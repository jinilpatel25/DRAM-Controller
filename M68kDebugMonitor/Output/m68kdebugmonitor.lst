680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 07 Feb 2024      Time: 15:04:21          Source: C:\USERS\ADMIN\DESKTOP\ASSIGNMENT2\ASSIGNMENT2\DRAM_CONTROLLER\M68KDEBUGMONITOR\OUTPUT\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  0546 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2C52      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  1F86      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\USERS\ADMIN\DESKTOP\ASSIGNMENT2\ASSIGNMENT2\DRAM_CONTROLLER\M68KV6.0-800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; char    TempString[100] ;
                     495   ; /************************************************************************************
                     496   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     497   ; ************************************************************************************/
                     498   ; void Wait1ms(void)
                     499   ; {
                     500   _Wait1ms:
00000932  2F02       501          move.l    D2,-(A7)
                     502   ; long int  i ;
                     503   ; for(i = 0; i < 1000; i ++)
00000934  4282       504          clr.l     D2
                     505   Wait1ms_1:
00000936  0C82 0000  506          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       507          bge.s     Wait1ms_3
0000093E  5282       508          addq.l    #1,D2
00000940  60F4       509          bra       Wait1ms_1
                     510   Wait1ms_3:
00000942  241F       511          move.l    (A7)+,D2
00000944  4E75       512          rts
                     513   ; ;
                     514   ; }
                     515   ; /************************************************************************************
                     516   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     517   ; **************************************************************************************/
                     518   ; void Wait3ms(void)
                     519   ; {
                     520   _Wait3ms:
00000946  2F02       521          move.l    D2,-(A7)
                     522   ; int i ;
                     523   ; for(i = 0; i < 3; i++)
00000948  4282       524          clr.l     D2
                     525   Wait3ms_1:
0000094A  0C82 0000  526          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       527          bge.s     Wait3ms_3
                     528   ; Wait1ms() ;
00000952  4EB8 0932  529          jsr       _Wait1ms
00000956  5282       530          addq.l    #1,D2
00000958  60F0       531          bra       Wait3ms_1
                     532   Wait3ms_3:
0000095A  241F       533          move.l    (A7)+,D2
0000095C  4E75       534          rts
                     535   ; }
                     536   ; /*********************************************************************************************
                     537   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     538   ; *********************************************************************************************/
                     539   ; void Init_LCD(void)
                     540   ; {
                     541   _Init_LCD:
                     542   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  543          move.b    #12,4194336
00000962  0040 0020 
                     544   ; Wait3ms() ;
00000966  4EB8 0946  545          jsr       _Wait3ms
                     546   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  547          move.b    #56,4194336
0000096E  0040 0020 
                     548   ; Wait3ms() ;
00000972  4EB8 0946  549          jsr       _Wait3ms
00000976  4E75       550          rts
                     551   ; }
                     552   ; /******************************************************************************
                     553   ; *subroutine to output a single character held in d1 to the LCD display
                     554   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     555   ; *current cursor position
                     556   ; *******************************************************************************/
                     557   ; void Outchar(int c)
                     558   ; {
                     559   _Outchar:
00000978  4E56 0000  560          link      A6,#0
                     561   ; LCDdata = (char)(c);
0000097C  202E 0008  562          move.l    8(A6),D0
00000980  13C0 0040  563          move.b    D0,4194338
00000984  0022      
                     564   ; Wait1ms() ;
00000986  4EB8 0932  565          jsr       _Wait1ms
0000098A  4E5E       566          unlk      A6
0000098C  4E75       567          rts
                     568   ; }
                     569   ; /**********************************************************************************
                     570   ; *subroutine to output a message at the current cursor position of the LCD display
                     571   ; ************************************************************************************/
                     572   ; void OutMess(char *theMessage)
                     573   ; {
                     574   _OutMess:
0000098E  4E56 FFFC  575          link      A6,#-4
                     576   ; char c ;
                     577   ; while((c = *theMessage++) != (char)(0))
                     578   OutMess_1:
00000992  206E 0008  579          move.l    8(A6),A0
00000996  52AE 0008  580          addq.l    #1,8(A6)
0000099A  1D50 FFFF  581          move.b    (A0),-1(A6)
0000099E  1010       582          move.b    (A0),D0
000009A0  6712       583          beq.s     OutMess_3
                     584   ; Outchar(c) ;
000009A2  122E FFFF  585          move.b    -1(A6),D1
000009A6  4881       586          ext.w     D1
000009A8  48C1       587          ext.l     D1
000009AA  2F01       588          move.l    D1,-(A7)
000009AC  4EB8 0978  589          jsr       _Outchar
000009B0  584F       590          addq.w    #4,A7
000009B2  60DE       591          bra       OutMess_1
                     592   OutMess_3:
000009B4  4E5E       593          unlk      A6
000009B6  4E75       594          rts
                     595   ; }
                     596   ; /******************************************************************************
                     597   ; *subroutine to clear the line by issuing 24 space characters
                     598   ; *******************************************************************************/
                     599   ; void Clearln(void)
                     600   ; {
                     601   _Clearln:
000009B8  2F02       602          move.l    D2,-(A7)
                     603   ; unsigned char i ;
                     604   ; for(i = 0; i < 24; i ++)
000009BA  4202       605          clr.b     D2
                     606   Clearln_1:
000009BC  0C02 0018  607          cmp.b     #24,D2
000009C0  640E       608          bhs.s     Clearln_3
                     609   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  610          pea       32
000009C6  4EB8 0978  611          jsr       _Outchar
000009CA  584F       612          addq.w    #4,A7
000009CC  5202       613          addq.b    #1,D2
000009CE  60EC       614          bra       Clearln_1
                     615   Clearln_3:
000009D0  241F       616          move.l    (A7)+,D2
000009D2  4E75       617          rts
                     618   ; }
                     619   ; /******************************************************************************
                     620   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     621   ; *******************************************************************************/
                     622   ; void Oline0(char *theMessage)
                     623   ; {
                     624   _Oline0:
000009D4  4E56 0000  625          link      A6,#0
                     626   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  627          move.b    #128,4194336
000009DC  0040 0020 
                     628   ; Wait3ms();
000009E0  4EB8 0946  629          jsr       _Wait3ms
                     630   ; Clearln() ;
000009E4  4EB8 09B8  631          jsr       _Clearln
                     632   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  633          move.b    #128,4194336
000009EC  0040 0020 
                     634   ; Wait3ms() ;
000009F0  4EB8 0946  635          jsr       _Wait3ms
                     636   ; OutMess(theMessage) ;
000009F4  2F2E 0008  637          move.l    8(A6),-(A7)
000009F8  4EB8 098E  638          jsr       _OutMess
000009FC  584F       639          addq.w    #4,A7
000009FE  4E5E       640          unlk      A6
00000A00  4E75       641          rts
                     642   ; }
                     643   ; /******************************************************************************
                     644   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     645   ; *******************************************************************************/
                     646   ; void Oline1(char *theMessage)
                     647   ; {
                     648   _Oline1:
00000A02  4E56 0000  649          link      A6,#0
                     650   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  651          move.b    #192,4194336
00000A0A  0040 0020 
                     652   ; Wait3ms();
00000A0E  4EB8 0946  653          jsr       _Wait3ms
                     654   ; Clearln() ;
00000A12  4EB8 09B8  655          jsr       _Clearln
                     656   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  657          move.b    #192,4194336
00000A1A  0040 0020 
                     658   ; Wait3ms() ;
00000A1E  4EB8 0946  659          jsr       _Wait3ms
                     660   ; OutMess(theMessage) ;
00000A22  2F2E 0008  661          move.l    8(A6),-(A7)
00000A26  4EB8 098E  662          jsr       _OutMess
00000A2A  584F       663          addq.w    #4,A7
00000A2C  4E5E       664          unlk      A6
00000A2E  4E75       665          rts
                     666   ; }
                     667   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     668   ; {
                     669   _InstallExceptionHandler:
00000A30  4E56 FFFC  670          link      A6,#-4
                     671   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  672          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     673   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  674          move.l    -4(A6),A0
00000A40  202E 000C  675          move.l    12(A6),D0
00000A44  E588       676          lsl.l     #2,D0
00000A46  21AE 0008  677          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       678          unlk      A6
00000A4E  4E75       679          rts
                     680   ; }
                     681   ; void TestLEDS(void)
                     682   ; {
                     683   _TestLEDS:
00000A50  48E7 3000  684          movem.l   D2/D3,-(A7)
                     685   ; int delay ;
                     686   ; unsigned char count = 0 ;
00000A54  4202       687          clr.b     D2
                     688   ; while(1)    {
                     689   TestLEDS_1:
                     690   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       691          move.b    D2,D0
00000A58  E908       692          lsl.b     #4,D0
00000A5A  1202       693          move.b    D2,D1
00000A5C  C23C 000F  694          and.b     #15,D1
00000A60  D001       695          add.b     D1,D0
00000A62  13C0 0040  696          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  697          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  698          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  699          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  700          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  701          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  702          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  703          move.b    D0,4194304
00000A90  0000      
                     704   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       705          clr.l     D3
                     706   TestLEDS_4:
00000A94  0C83 0003  707          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       708          bge.s     TestLEDS_6
00000A9C  5283       709          addq.l    #1,D3
00000A9E  60F4       710          bra       TestLEDS_4
                     711   TestLEDS_6:
                     712   ; ;
                     713   ; count ++;
00000AA0  5202       714          addq.b    #1,D2
00000AA2  60B2       715          bra       TestLEDS_1
                     716   ; }
                     717   ; }
                     718   ; void SwitchTest(void)
                     719   ; {
                     720   _SwitchTest:
00000AA4  48E7 3020  721          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  722          lea       _printf.L,A2
00000AAC  30D4      
                     723   ; int i, switches = 0 ;
00000AAE  4283       724          clr.l     D3
                     725   ; printf("\r\n") ;
00000AB0  4879 0000  726          pea       @m68kde~2_1.L
00000AB4  39E6      
00000AB6  4E92       727          jsr       (A2)
00000AB8  584F       728          addq.w    #4,A7
                     729   ; while(1)    {
                     730   SwitchTest_1:
                     731   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  732          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  733          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       734          lsl.l     #8,D0
00000AC8  1239 0040  735          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  736          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       737          or.l      D1,D0
00000AD6  2600       738          move.l    D0,D3
                     739   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  740          pea       @m68kde~2_2.L
00000ADC  39EA      
00000ADE  4E92       741          jsr       (A2)
00000AE0  584F       742          addq.w    #4,A7
                     743   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  744          move.l    #128,D2
00000AE6  0080      
                     745   SwitchTest_4:
00000AE8  0C82 0000  746          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       747          ble.s     SwitchTest_6
                     748   ; if((switches & i) == 0)
00000AF0  2003       749          move.l    D3,D0
00000AF2  C082       750          and.l     D2,D0
00000AF4  660C       751          bne.s     SwitchTest_7
                     752   ; printf("0") ;
00000AF6  4879 0000  753          pea       @m68kde~2_3.L
00000AFA  3A00      
00000AFC  4E92       754          jsr       (A2)
00000AFE  584F       755          addq.w    #4,A7
00000B00  600A       756          bra.s     SwitchTest_8
                     757   SwitchTest_7:
                     758   ; else
                     759   ; printf("1") ;
00000B02  4879 0000  760          pea       @m68kde~2_4.L
00000B06  3A02      
00000B08  4E92       761          jsr       (A2)
00000B0A  584F       762          addq.w    #4,A7
                     763   SwitchTest_8:
00000B0C  E282       764          asr.l     #1,D2
00000B0E  60D8       765          bra       SwitchTest_4
                     766   SwitchTest_6:
00000B10  60A8       767          bra       SwitchTest_1
                     768   ; }
                     769   ; }
                     770   ; }
                     771   ; /*********************************************************************************************
                     772   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     773   ; *********************************************************************************************/
                     774   ; void Init_RS232(void)
                     775   ; {
                     776   _Init_RS232:
                     777   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  778          move.b    #21,4194368
00000B16  0040 0040 
                     779   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  780          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       781          rts
                     782   ; }
                     783   ; int kbhit(void)
                     784   ; {
                     785   _kbhit:
                     786   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  787          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  788          and.b     #1,D0
00000B2E  0C00 0001  789          cmp.b     #1,D0
00000B32  6604       790          bne.s     kbhit_1
                     791   ; return 1 ;
00000B34  7001       792          moveq     #1,D0
00000B36  6002       793          bra.s     kbhit_3
                     794   kbhit_1:
                     795   ; else
                     796   ; return 0 ;
00000B38  4280       797          clr.l     D0
                     798   kbhit_3:
00000B3A  4E75       799          rts
                     800   ; }
                     801   ; /*********************************************************************************************************
                     802   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     803   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     804   ; **  to allow the board to communicate with HyperTerminal Program
                     805   ; **
                     806   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     807   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     808   ; **  call _putch() also
                     809   ; *********************************************************************************************************/
                     810   ; int _putch( int c)
                     811   ; {
                     812   __putch:
00000B3C  4E56 0000  813          link      A6,#0
                     814   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     815   _putch_1:
00000B40  1039 0040  816          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  817          and.b     #2,D0
00000B4A  0C00 0002  818          cmp.b     #2,D0
00000B4E  6702       819          beq.s     _putch_3
00000B50  60EE       820          bra       _putch_1
                     821   _putch_3:
                     822   ; ;
                     823   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  824          move.l    8(A6),D0
00000B56  C03C 007F  825          and.b     #127,D0
00000B5A  13C0 0040  826          move.b    D0,4194370
00000B5E  0042      
                     827   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  828          move.l    8(A6),D0
00000B64  4E5E       829          unlk      A6
00000B66  4E75       830          rts
                     831   ; }
                     832   ; /*********************************************************************************************************
                     833   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     834   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     835   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     836   ; **
                     837   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     838   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     839   ; **  call _getch() also
                     840   ; *********************************************************************************************************/
                     841   ; int _getch( void )
                     842   ; {
                     843   __getch:
00000B68  2F02       844          move.l    D2,-(A7)
                     845   ; int c ;
                     846   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     847   _getch_1:
00000B6A  1039 0040  848          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  849          and.b     #1,D0
00000B74  0C00 0001  850          cmp.b     #1,D0
00000B78  6702       851          beq.s     _getch_3
00000B7A  60EE       852          bra       _getch_1
                     853   _getch_3:
                     854   ; ;
                     855   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  856          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  857          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  858          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       859          move.l    D0,D2
                     860   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     861   ; if(Echo)
00000B90  4AB9 0B00  862          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       863          beq.s     _getch_4
                     864   ; _putch(c);
00000B98  2F02       865          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  866          jsr       __putch
00000B9E  584F       867          addq.w    #4,A7
                     868   _getch_4:
                     869   ; return c ;
00000BA0  2002       870          move.l    D2,D0
00000BA2  241F       871          move.l    (A7)+,D2
00000BA4  4E75       872          rts
                     873   ; }
                     874   ; // flush the input stream for any unread characters
                     875   ; void FlushKeyboard(void)
                     876   ; {
                     877   _FlushKeyboard:
00000BA6  4E56 FFFC  878          link      A6,#-4
                     879   ; char c ;
                     880   ; while(1)    {
                     881   FlushKeyboard_1:
                     882   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  883          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  884          and.b     #1,D0
00000BB4  0C00 0001  885          cmp.b     #1,D0
00000BB8  6610       886          bne.s     FlushKeyboard_4
                     887   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  888          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  889          and.b     #127,D0
00000BC4  1D40 FFFF  890          move.b    D0,-1(A6)
00000BC8  6002       891          bra.s     FlushKeyboard_5
                     892   FlushKeyboard_4:
                     893   ; else
                     894   ; return ;
00000BCA  6002       895          bra.s     FlushKeyboard_6
                     896   FlushKeyboard_5:
00000BCC  60DC       897          bra       FlushKeyboard_1
                     898   FlushKeyboard_6:
00000BCE  4E5E       899          unlk      A6
00000BD0  4E75       900          rts
                     901   ; }
                     902   ; }
                     903   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     904   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     905   ; char xtod(int c)
                     906   ; {
                     907   _xtod:
00000BD2  4E56 0000  908          link      A6,#0
00000BD6  2F02       909          move.l    D2,-(A7)
00000BD8  242E 0008  910          move.l    8(A6),D2
                     911   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  912          cmp.b     #57,D2
00000BE0  6E08       913          bgt.s     xtod_1
                     914   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       915          move.b    D2,D0
00000BE4  0400 0030  916          sub.b     #48,D0
00000BE8  6014       917          bra.s     xtod_3
                     918   xtod_1:
                     919   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  920          cmp.b     #70,D2
00000BEE  6F08       921          ble.s     xtod_4
                     922   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       923          move.b    D2,D0
00000BF2  0400 0057  924          sub.b     #87,D0
00000BF6  6006       925          bra.s     xtod_3
                     926   xtod_4:
                     927   ; else
                     928   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       929          move.b    D2,D0
00000BFA  0400 0037  930          sub.b     #55,D0
                     931   xtod_3:
00000BFE  241F       932          move.l    (A7)+,D2
00000C00  4E5E       933          unlk      A6
00000C02  4E75       934          rts
                     935   ; }
                     936   ; int Get2HexDigits(char *CheckSumPtr)
                     937   ; {
                     938   _Get2HexDigits:
00000C04  4E56 0000  939          link      A6,#0
00000C08  2F02       940          move.l    D2,-(A7)
                     941   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       942          move.l    D0,-(A7)
00000C0C  4EB8 0B68  943          jsr       __getch
00000C10  2200       944          move.l    D0,D1
00000C12  201F       945          move.l    (A7)+,D0
00000C14  2F01       946          move.l    D1,-(A7)
00000C16  4EB8 0BD2  947          jsr       _xtod
00000C1A  584F       948          addq.w    #4,A7
00000C1C  C0BC 0000  949          and.l     #255,D0
00000C20  00FF      
00000C22  E980       950          asl.l     #4,D0
00000C24  2F00       951          move.l    D0,-(A7)
00000C26  2F01       952          move.l    D1,-(A7)
00000C28  4EB8 0B68  953          jsr       __getch
00000C2C  221F       954          move.l    (A7)+,D1
00000C2E  2F00       955          move.l    D0,-(A7)
00000C30  4EB8 0BD2  956          jsr       _xtod
00000C34  584F       957          addq.w    #4,A7
00000C36  2200       958          move.l    D0,D1
00000C38  201F       959          move.l    (A7)+,D0
00000C3A  C2BC 0000  960          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       961          or.l      D1,D0
00000C42  2400       962          move.l    D0,D2
                     963   ; if(CheckSumPtr)
00000C44  4AAE 0008  964          tst.l     8(A6)
00000C48  6706       965          beq.s     Get2HexDigits_1
                     966   ; *CheckSumPtr += i ;
00000C4A  206E 0008  967          move.l    8(A6),A0
00000C4E  D510       968          add.b     D2,(A0)
                     969   Get2HexDigits_1:
                     970   ; return i ;
00000C50  2002       971          move.l    D2,D0
00000C52  241F       972          move.l    (A7)+,D2
00000C54  4E5E       973          unlk      A6
00000C56  4E75       974          rts
                     975   ; }
                     976   ; int Get4HexDigits(char *CheckSumPtr)
                     977   ; {
                     978   _Get4HexDigits:
00000C58  4E56 0000  979          link      A6,#0
                     980   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  981          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  982          jsr       _Get2HexDigits
00000C64  584F       983          addq.w    #4,A7
00000C66  E180       984          asl.l     #8,D0
00000C68  2F00       985          move.l    D0,-(A7)
00000C6A  2F2E 0008  986          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  987          jsr       _Get2HexDigits
00000C72  584F       988          addq.w    #4,A7
00000C74  2200       989          move.l    D0,D1
00000C76  201F       990          move.l    (A7)+,D0
00000C78  8081       991          or.l      D1,D0
00000C7A  4E5E       992          unlk      A6
00000C7C  4E75       993          rts
                     994   ; }
                     995   ; int Get6HexDigits(char *CheckSumPtr)
                     996   ; {
                     997   _Get6HexDigits:
00000C7E  4E56 0000  998          link      A6,#0
                     999   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1000          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1001          jsr       _Get4HexDigits
00000C8A  584F      1002          addq.w    #4,A7
00000C8C  E180      1003          asl.l     #8,D0
00000C8E  2F00      1004          move.l    D0,-(A7)
00000C90  2F2E 0008 1005          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1006          jsr       _Get2HexDigits
00000C98  584F      1007          addq.w    #4,A7
00000C9A  2200      1008          move.l    D0,D1
00000C9C  201F      1009          move.l    (A7)+,D0
00000C9E  8081      1010          or.l      D1,D0
00000CA0  4E5E      1011          unlk      A6
00000CA2  4E75      1012          rts
                    1013   ; }
                    1014   ; int Get8HexDigits(char *CheckSumPtr)
                    1015   ; {
                    1016   _Get8HexDigits:
00000CA4  4E56 0000 1017          link      A6,#0
                    1018   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1019          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1020          jsr       _Get4HexDigits
00000CB0  584F      1021          addq.w    #4,A7
00000CB2  E180      1022          asl.l     #8,D0
00000CB4  E180      1023          asl.l     #8,D0
00000CB6  2F00      1024          move.l    D0,-(A7)
00000CB8  2F2E 0008 1025          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1026          jsr       _Get4HexDigits
00000CC0  584F      1027          addq.w    #4,A7
00000CC2  2200      1028          move.l    D0,D1
00000CC4  201F      1029          move.l    (A7)+,D0
00000CC6  8081      1030          or.l      D1,D0
00000CC8  4E5E      1031          unlk      A6
00000CCA  4E75      1032          rts
                    1033   ; }
                    1034   ; void DumpMemory(void)   // simple dump memory fn
                    1035   ; {
                    1036   _DumpMemory:
00000CCC  48E7 3C30 1037          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000CD0  45F9 0000 1038          lea       _printf.L,A2
00000CD4  30D4      
00000CD6  47F9 0000 1039          lea       _putch.L,A3
00000CDA  2FF0      
                    1040   ; int i, j ;
                    1041   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1042   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000CDC  4879 0000 1043          pea       @m68kde~2_5.L
00000CE0  3A04      
00000CE2  4E92      1044          jsr       (A2)
00000CE4  584F      1045          addq.w    #4,A7
                    1046   ; printf("\r\nEnter Start Address: ") ;
00000CE6  4879 0000 1047          pea       @m68kde~2_6.L
00000CEA  3A3E      
00000CEC  4E92      1048          jsr       (A2)
00000CEE  584F      1049          addq.w    #4,A7
                    1050   ; RamPtr = Get8HexDigits(0) ;
00000CF0  42A7      1051          clr.l     -(A7)
00000CF2  4EB8 0CA4 1052          jsr       _Get8HexDigits
00000CF6  584F      1053          addq.w    #4,A7
00000CF8  2600      1054          move.l    D0,D3
                    1055   ; while(1)    {
                    1056   DumpMemory_1:
                    1057   ; for(i = 0; i < 16; i ++)    {
00000CFA  4285      1058          clr.l     D5
                    1059   DumpMemory_4:
00000CFC  0C85 0000 1060          cmp.l     #16,D5
00000D00  0010      
00000D02  6C00 0096 1061          bge       DumpMemory_6
                    1062   ; printf("\r\n%08x ", RamPtr) ;
00000D06  2F03      1063          move.l    D3,-(A7)
00000D08  4879 0000 1064          pea       @m68kde~2_7.L
00000D0C  3A56      
00000D0E  4E92      1065          jsr       (A2)
00000D10  504F      1066          addq.w    #8,A7
                    1067   ; for(j=0; j < 16; j ++)  {
00000D12  4282      1068          clr.l     D2
                    1069   DumpMemory_7:
00000D14  0C82 0000 1070          cmp.l     #16,D2
00000D18  0010      
00000D1A  6C24      1071          bge.s     DumpMemory_9
                    1072   ; printf("%02X",RamPtr[j]) ;
00000D1C  2043      1073          move.l    D3,A0
00000D1E  1230 2800 1074          move.b    0(A0,D2.L),D1
00000D22  C2BC 0000 1075          and.l     #255,D1
00000D26  00FF      
00000D28  2F01      1076          move.l    D1,-(A7)
00000D2A  4879 0000 1077          pea       @m68kde~2_8.L
00000D2E  3A5E      
00000D30  4E92      1078          jsr       (A2)
00000D32  504F      1079          addq.w    #8,A7
                    1080   ; putchar(' ') ;
00000D34  4878 0020 1081          pea       32
00000D38  4E93      1082          jsr       (A3)
00000D3A  584F      1083          addq.w    #4,A7
00000D3C  5282      1084          addq.l    #1,D2
00000D3E  60D4      1085          bra       DumpMemory_7
                    1086   DumpMemory_9:
                    1087   ; }
                    1088   ; // now display the data as ASCII at the end
                    1089   ; printf("  ") ;
00000D40  4879 0000 1090          pea       @m68kde~2_9.L
00000D44  3A64      
00000D46  4E92      1091          jsr       (A2)
00000D48  584F      1092          addq.w    #4,A7
                    1093   ; for(j = 0; j < 16; j++) {
00000D4A  4282      1094          clr.l     D2
                    1095   DumpMemory_10:
00000D4C  0C82 0000 1096          cmp.l     #16,D2
00000D50  0010      
00000D52  6C00 003A 1097          bge       DumpMemory_12
                    1098   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000D56  2043      1099          move.l    D3,A0
00000D58  1030 2800 1100          move.b    0(A0,D2.L),D0
00000D5C  C03C 007F 1101          and.b     #127,D0
00000D60  1800      1102          move.b    D0,D4
                    1103   ; if((c > (char)(0x7f)) || (c < ' '))
00000D62  0C04 007F 1104          cmp.b     #127,D4
00000D66  6206      1105          bhi.s     DumpMemory_15
00000D68  0C04 0020 1106          cmp.b     #32,D4
00000D6C  640A      1107          bhs.s     DumpMemory_13
                    1108   DumpMemory_15:
                    1109   ; putchar('.') ;
00000D6E  4878 002E 1110          pea       46
00000D72  4E93      1111          jsr       (A3)
00000D74  584F      1112          addq.w    #4,A7
00000D76  6012      1113          bra.s     DumpMemory_14
                    1114   DumpMemory_13:
                    1115   ; else
                    1116   ; putchar(RamPtr[j]) ;
00000D78  2043      1117          move.l    D3,A0
00000D7A  1230 2800 1118          move.b    0(A0,D2.L),D1
00000D7E  C2BC 0000 1119          and.l     #255,D1
00000D82  00FF      
00000D84  2F01      1120          move.l    D1,-(A7)
00000D86  4E93      1121          jsr       (A3)
00000D88  584F      1122          addq.w    #4,A7
                    1123   DumpMemory_14:
00000D8A  5282      1124          addq.l    #1,D2
00000D8C  60BE      1125          bra       DumpMemory_10
                    1126   DumpMemory_12:
                    1127   ; }
                    1128   ; RamPtr = RamPtr + 16 ;
00000D8E  0683 0000 1129          add.l     #16,D3
00000D92  0010      
00000D94  5285      1130          addq.l    #1,D5
00000D96  6000 FF64 1131          bra       DumpMemory_4
                    1132   DumpMemory_6:
                    1133   ; }
                    1134   ; printf("\r\n") ;
00000D9A  4879 0000 1135          pea       @m68kde~2_1.L
00000D9E  39E6      
00000DA0  4E92      1136          jsr       (A2)
00000DA2  584F      1137          addq.w    #4,A7
                    1138   ; c = _getch() ;
00000DA4  4EB8 0B68 1139          jsr       __getch
00000DA8  1800      1140          move.b    D0,D4
                    1141   ; if(c == 0x1b)          // break on ESC
00000DAA  0C04 001B 1142          cmp.b     #27,D4
00000DAE  6602      1143          bne.s     DumpMemory_16
                    1144   ; break ;
00000DB0  6004      1145          bra.s     DumpMemory_3
                    1146   DumpMemory_16:
00000DB2  6000 FF46 1147          bra       DumpMemory_1
                    1148   DumpMemory_3:
00000DB6  4CDF 0C3C 1149          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000DBA  4E75      1150          rts
                    1151   ; }
                    1152   ; }
                    1153   ; void FillMemory()
                    1154   ; {
                    1155   _FillMemory:
00000DBC  48E7 3820 1156          movem.l   D2/D3/D4/A2,-(A7)
00000DC0  45F9 0000 1157          lea       _printf.L,A2
00000DC4  30D4      
                    1158   ; char *StartRamPtr, *EndRamPtr ;
                    1159   ; unsigned char FillData ;
                    1160   ; printf("\r\nFill Memory Block") ;
00000DC6  4879 0000 1161          pea       @m68kde~2_10.L
00000DCA  3A68      
00000DCC  4E92      1162          jsr       (A2)
00000DCE  584F      1163          addq.w    #4,A7
                    1164   ; printf("\r\nEnter Start Address: ") ;
00000DD0  4879 0000 1165          pea       @m68kde~2_6.L
00000DD4  3A3E      
00000DD6  4E92      1166          jsr       (A2)
00000DD8  584F      1167          addq.w    #4,A7
                    1168   ; StartRamPtr = Get8HexDigits(0) ;
00000DDA  42A7      1169          clr.l     -(A7)
00000DDC  4EB8 0CA4 1170          jsr       _Get8HexDigits
00000DE0  584F      1171          addq.w    #4,A7
00000DE2  2400      1172          move.l    D0,D2
                    1173   ; printf("\r\nEnter End Address: ") ;
00000DE4  4879 0000 1174          pea       @m68kde~2_11.L
00000DE8  3A7C      
00000DEA  4E92      1175          jsr       (A2)
00000DEC  584F      1176          addq.w    #4,A7
                    1177   ; EndRamPtr = Get8HexDigits(0) ;
00000DEE  42A7      1178          clr.l     -(A7)
00000DF0  4EB8 0CA4 1179          jsr       _Get8HexDigits
00000DF4  584F      1180          addq.w    #4,A7
00000DF6  2800      1181          move.l    D0,D4
                    1182   ; printf("\r\nEnter Fill Data: ") ;
00000DF8  4879 0000 1183          pea       @m68kde~2_12.L
00000DFC  3A92      
00000DFE  4E92      1184          jsr       (A2)
00000E00  584F      1185          addq.w    #4,A7
                    1186   ; FillData = Get2HexDigits(0) ;
00000E02  42A7      1187          clr.l     -(A7)
00000E04  4EB8 0C04 1188          jsr       _Get2HexDigits
00000E08  584F      1189          addq.w    #4,A7
00000E0A  1600      1190          move.b    D0,D3
                    1191   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00000E0C  C6BC 0000 1192          and.l     #255,D3
00000E10  00FF      
00000E12  2F03      1193          move.l    D3,-(A7)
00000E14  2F04      1194          move.l    D4,-(A7)
00000E16  2F02      1195          move.l    D2,-(A7)
00000E18  4879 0000 1196          pea       @m68kde~2_13.L
00000E1C  3AA6      
00000E1E  4E92      1197          jsr       (A2)
00000E20  DEFC 0010 1198          add.w     #16,A7
                    1199   ; while(StartRamPtr < EndRamPtr)
                    1200   FillMemory_1:
00000E24  B484      1201          cmp.l     D4,D2
00000E26  6408      1202          bhs.s     FillMemory_3
                    1203   ; *StartRamPtr++ = FillData ;
00000E28  2042      1204          move.l    D2,A0
00000E2A  5282      1205          addq.l    #1,D2
00000E2C  1083      1206          move.b    D3,(A0)
00000E2E  60F4      1207          bra       FillMemory_1
                    1208   FillMemory_3:
00000E30  4CDF 041C 1209          movem.l   (A7)+,D2/D3/D4/A2
00000E34  4E75      1210          rts
                    1211   ; }
                    1212   ; void Load_SRecordFile()
                    1213   ; {
                    1214   _Load_SRecordFile:
00000E36  4E56 FFDC 1215          link      A6,#-36
00000E3A  48E7 3F3C 1216          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00000E3E  45EE FFFA 1217          lea       -6(A6),A2
00000E42  47F8 0C04 1218          lea       _Get2HexDigits.L,A3
00000E46  49F9 0000 1219          lea       _printf.L,A4
00000E4A  30D4      
                    1220   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00000E4C  42AE FFEE 1221          clr.l     -18(A6)
00000E50  3A7C 0000 1222          move.w    #0,A5
                    1223   ; int result, ByteCount ;
                    1224   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1225   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1226   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00000E54  7E00      1227          moveq     #0,D7
                    1228   ; AddressFail = 0 ;
00000E56  42AE FFEA 1229          clr.l     -22(A6)
                    1230   ; Echo = 0 ;                              // don't echo S records during download
00000E5A  42B9 0B00 1231          clr.l     _Echo.L
00000E5E  00E0      
                    1232   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00000E60  4879 0000 1233          pea       @m68kde~2_14.L
00000E64  3AD6      
00000E66  4E94      1234          jsr       (A4)
00000E68  584F      1235          addq.w    #4,A7
                    1236   ; while(1)    {
                    1237   Load_SRecordFile_1:
                    1238   ; CheckSum = 0 ;
00000E6A  4212      1239          clr.b     (A2)
                    1240   ; do {
                    1241   Load_SRecordFile_4:
                    1242   ; c = toupper(_getch()) ;
00000E6C  2F00      1243          move.l    D0,-(A7)
00000E6E  4EB8 0B68 1244          jsr       __getch
00000E72  2200      1245          move.l    D0,D1
00000E74  201F      1246          move.l    (A7)+,D0
00000E76  2F01      1247          move.l    D1,-(A7)
00000E78  4EB9 0000 1248          jsr       _toupper
00000E7C  30B8      
00000E7E  584F      1249          addq.w    #4,A7
00000E80  1C00      1250          move.b    D0,D6
                    1251   ; if(c == 0x1b )      // if break
00000E82  0C06 001B 1252          cmp.b     #27,D6
00000E86  6604      1253          bne.s     Load_SRecordFile_6
                    1254   ; return;
00000E88  6000 0132 1255          bra       Load_SRecordFile_8
                    1256   Load_SRecordFile_6:
00000E8C  0C06 0053 1257          cmp.b     #83,D6
00000E90  66DA      1258          bne       Load_SRecordFile_4
                    1259   ; }while(c != (char)('S'));   // wait for S start of header
                    1260   ; HeaderType = _getch() ;
00000E92  4EB8 0B68 1261          jsr       __getch
00000E96  1600      1262          move.b    D0,D3
                    1263   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
00000E98  0C03 0030 1264          cmp.b     #48,D3
00000E9C  6706      1265          beq.s     Load_SRecordFile_11
00000E9E  0C03 0035 1266          cmp.b     #53,D3
00000EA2  6604      1267          bne.s     Load_SRecordFile_9
                    1268   Load_SRecordFile_11:
                    1269   ; continue ;
00000EA4  6000 00D2 1270          bra       Load_SRecordFile_23
                    1271   Load_SRecordFile_9:
                    1272   ; if(HeaderType >= (char)('7'))
00000EA8  0C03 0037 1273          cmp.b     #55,D3
00000EAC  6D04      1274          blt.s     Load_SRecordFile_12
                    1275   ; break ;                 // end load on s7,s8,s9 records
00000EAE  6000 00CC 1276          bra       Load_SRecordFile_3
                    1277   Load_SRecordFile_12:
                    1278   ; // get the bytecount
                    1279   ; ByteCount = Get2HexDigits(&CheckSum) ;
00000EB2  2F0A      1280          move.l    A2,-(A7)
00000EB4  4E93      1281          jsr       (A3)
00000EB6  584F      1282          addq.w    #4,A7
00000EB8  2D40 FFF6 1283          move.l    D0,-10(A6)
                    1284   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1285   ; if(HeaderType == (char)('1')) {
00000EBC  0C03 0031 1286          cmp.b     #49,D3
00000EC0  660E      1287          bne.s     Load_SRecordFile_14
                    1288   ; AddressSize = 2 ;       // 2 byte address
00000EC2  7A02      1289          moveq     #2,D5
                    1290   ; Address = Get4HexDigits(&CheckSum);
00000EC4  2F0A      1291          move.l    A2,-(A7)
00000EC6  4EB8 0C58 1292          jsr       _Get4HexDigits
00000ECA  584F      1293          addq.w    #4,A7
00000ECC  2800      1294          move.l    D0,D4
00000ECE  6020      1295          bra.s     Load_SRecordFile_17
                    1296   Load_SRecordFile_14:
                    1297   ; }
                    1298   ; else if (HeaderType == (char)('2')) {
00000ED0  0C03 0032 1299          cmp.b     #50,D3
00000ED4  660E      1300          bne.s     Load_SRecordFile_16
                    1301   ; AddressSize = 3 ;       // 3 byte address
00000ED6  7A03      1302          moveq     #3,D5
                    1303   ; Address = Get6HexDigits(&CheckSum) ;
00000ED8  2F0A      1304          move.l    A2,-(A7)
00000EDA  4EB8 0C7E 1305          jsr       _Get6HexDigits
00000EDE  584F      1306          addq.w    #4,A7
00000EE0  2800      1307          move.l    D0,D4
00000EE2  600C      1308          bra.s     Load_SRecordFile_17
                    1309   Load_SRecordFile_16:
                    1310   ; }
                    1311   ; else    {
                    1312   ; AddressSize = 4 ;       // 4 byte address
00000EE4  7A04      1313          moveq     #4,D5
                    1314   ; Address = Get8HexDigits(&CheckSum) ;
00000EE6  2F0A      1315          move.l    A2,-(A7)
00000EE8  4EB8 0CA4 1316          jsr       _Get8HexDigits
00000EEC  584F      1317          addq.w    #4,A7
00000EEE  2800      1318          move.l    D0,D4
                    1319   Load_SRecordFile_17:
                    1320   ; }
                    1321   ; RamPtr = (char *)(Address) ;                            // point to download area
00000EF0  2D44 FFFC 1322          move.l    D4,-4(A6)
                    1323   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00000EF4  202E FFF6 1324          move.l    -10(A6),D0
00000EF8  9085      1325          sub.l     D5,D0
00000EFA  5380      1326          subq.l    #1,D0
00000EFC  2D40 FFE2 1327          move.l    D0,-30(A6)
                    1328   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00000F00  4282      1329          clr.l     D2
                    1330   Load_SRecordFile_18:
00000F02  B4AE FFE2 1331          cmp.l     -30(A6),D2
00000F06  6C1E      1332          bge.s     Load_SRecordFile_20
                    1333   ; DataByte = Get2HexDigits(&CheckSum) ;
00000F08  2F0A      1334          move.l    A2,-(A7)
00000F0A  4E93      1335          jsr       (A3)
00000F0C  584F      1336          addq.w    #4,A7
00000F0E  2D40 FFDE 1337          move.l    D0,-34(A6)
                    1338   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00000F12  202E FFDE 1339          move.l    -34(A6),D0
00000F16  206E FFFC 1340          move.l    -4(A6),A0
00000F1A  52AE FFFC 1341          addq.l    #1,-4(A6)
00000F1E  1080      1342          move.b    D0,(A0)
                    1343   ; ByteTotal++;
00000F20  524D      1344          addq.w    #1,A5
00000F22  5282      1345          addq.l    #1,D2
00000F24  60DC      1346          bra       Load_SRecordFile_18
                    1347   Load_SRecordFile_20:
                    1348   ; }
                    1349   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1350   ; ReadCheckSum = Get2HexDigits(0) ;
00000F26  42A7      1351          clr.l     -(A7)
00000F28  4E93      1352          jsr       (A3)
00000F2A  584F      1353          addq.w    #4,A7
00000F2C  1D40 FFFB 1354          move.b    D0,-5(A6)
                    1355   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00000F30  1012      1356          move.b    (A2),D0
00000F32  4600      1357          not.b     D0
00000F34  4880      1358          ext.w     D0
00000F36  C07C 00FF 1359          and.w     #255,D0
00000F3A  122E FFFB 1360          move.b    -5(A6),D1
00000F3E  4881      1361          ext.w     D1
00000F40  C27C 00FF 1362          and.w     #255,D1
00000F44  B041      1363          cmp.w     D1,D0
00000F46  6708      1364          beq.s     Load_SRecordFile_21
                    1365   ; LoadFailed = 1 ;
00000F48  7E01      1366          moveq     #1,D7
                    1367   ; FailedAddress = Address ;
00000F4A  2D44 FFE6 1368          move.l    D4,-26(A6)
                    1369   ; break;
00000F4E  602C      1370          bra.s     Load_SRecordFile_3
                    1371   Load_SRecordFile_21:
                    1372   ; }
                    1373   ; SRecordCount++ ;
00000F50  52AE FFEE 1374          addq.l    #1,-18(A6)
                    1375   ; // display feedback on progress
                    1376   ; if(SRecordCount % 25 == 0)
00000F54  2F2E FFEE 1377          move.l    -18(A6),-(A7)
00000F58  4878 0019 1378          pea       25
00000F5C  4EB9 0000 1379          jsr       LDIV
00000F60  2F24      
00000F62  202F 0004 1380          move.l    4(A7),D0
00000F66  504F      1381          addq.w    #8,A7
00000F68  4A80      1382          tst.l     D0
00000F6A  660C      1383          bne.s     Load_SRecordFile_23
                    1384   ; putchar('.') ;
00000F6C  4878 002E 1385          pea       46
00000F70  4EB9 0000 1386          jsr       _putch
00000F74  2FF0      
00000F76  584F      1387          addq.w    #4,A7
                    1388   Load_SRecordFile_23:
00000F78  6000 FEF0 1389          bra       Load_SRecordFile_1
                    1390   Load_SRecordFile_3:
                    1391   ; }
                    1392   ; if(LoadFailed == 1) {
00000F7C  0C87 0000 1393          cmp.l     #1,D7
00000F80  0001      
00000F82  6610      1394          bne.s     Load_SRecordFile_25
                    1395   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00000F84  2F2E FFE6 1396          move.l    -26(A6),-(A7)
00000F88  4879 0000 1397          pea       @m68kde~2_15.L
00000F8C  3B06      
00000F8E  4E94      1398          jsr       (A4)
00000F90  504F      1399          addq.w    #8,A7
00000F92  600C      1400          bra.s     Load_SRecordFile_26
                    1401   Load_SRecordFile_25:
                    1402   ; }
                    1403   ; else
                    1404   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
00000F94  2F0D      1405          move.l    A5,-(A7)
00000F96  4879 0000 1406          pea       @m68kde~2_16.L
00000F9A  3B2C      
00000F9C  4E94      1407          jsr       (A4)
00000F9E  504F      1408          addq.w    #8,A7
                    1409   Load_SRecordFile_26:
                    1410   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1411   ; for(i = 0; i < 400000; i ++)
00000FA0  4282      1412          clr.l     D2
                    1413   Load_SRecordFile_27:
00000FA2  0C82 0006 1414          cmp.l     #400000,D2
00000FA6  1A80      
00000FA8  6C04      1415          bge.s     Load_SRecordFile_29
00000FAA  5282      1416          addq.l    #1,D2
00000FAC  60F4      1417          bra       Load_SRecordFile_27
                    1418   Load_SRecordFile_29:
                    1419   ; ;
                    1420   ; FlushKeyboard() ;
00000FAE  4EB8 0BA6 1421          jsr       _FlushKeyboard
                    1422   ; Echo = 1;
00000FB2  23FC 0000 1423          move.l    #1,_Echo.L
00000FB6  0001 0B00 
00000FBA  00E0      
                    1424   Load_SRecordFile_8:
00000FBC  4CDF 3CFC 1425          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00000FC0  4E5E      1426          unlk      A6
00000FC2  4E75      1427          rts
                    1428   ; }
                    1429   ; void MemoryChange(void)
                    1430   ; {
                    1431   _MemoryChange:
00000FC4  48E7 3820 1432          movem.l   D2/D3/D4/A2,-(A7)
00000FC8  45F9 0000 1433          lea       _printf.L,A2
00000FCC  30D4      
                    1434   ; unsigned char *RamPtr,c ; // pointer to memory
                    1435   ; int Data ;
                    1436   ; printf("\r\nExamine and Change Memory") ;
00000FCE  4879 0000 1437          pea       @m68kde~2_17.L
00000FD2  3B4E      
00000FD4  4E92      1438          jsr       (A2)
00000FD6  584F      1439          addq.w    #4,A7
                    1440   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
00000FD8  4879 0000 1441          pea       @m68kde~2_18.L
00000FDC  3B6A      
00000FDE  4E92      1442          jsr       (A2)
00000FE0  584F      1443          addq.w    #4,A7
                    1444   ; printf("\r\nEnter Address: ") ;
00000FE2  4879 0000 1445          pea       @m68kde~2_19.L
00000FE6  3BB0      
00000FE8  4E92      1446          jsr       (A2)
00000FEA  584F      1447          addq.w    #4,A7
                    1448   ; RamPtr = Get8HexDigits(0) ;
00000FEC  42A7      1449          clr.l     -(A7)
00000FEE  4EB8 0CA4 1450          jsr       _Get8HexDigits
00000FF2  584F      1451          addq.w    #4,A7
00000FF4  2600      1452          move.l    D0,D3
                    1453   ; while(1)    {
                    1454   MemoryChange_1:
                    1455   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
00000FF6  2043      1456          move.l    D3,A0
00000FF8  1210      1457          move.b    (A0),D1
00000FFA  C2BC 0000 1458          and.l     #255,D1
00000FFE  00FF      
00001000  2F01      1459          move.l    D1,-(A7)
00001002  2F03      1460          move.l    D3,-(A7)
00001004  4879 0000 1461          pea       @m68kde~2_20.L
00001008  3BC2      
0000100A  4E92      1462          jsr       (A2)
0000100C  DEFC 000C 1463          add.w     #12,A7
                    1464   ; c = tolower(_getch()) ;
00001010  2F00      1465          move.l    D0,-(A7)
00001012  4EB8 0B68 1466          jsr       __getch
00001016  2200      1467          move.l    D0,D1
00001018  201F      1468          move.l    (A7)+,D0
0000101A  2F01      1469          move.l    D1,-(A7)
0000101C  4EB9 0000 1470          jsr       _tolower
00001020  3054      
00001022  584F      1471          addq.w    #4,A7
00001024  1400      1472          move.b    D0,D2
                    1473   ; if(c == (char)(0x1b))
00001026  0C02 001B 1474          cmp.b     #27,D2
0000102A  6604      1475          bne.s     MemoryChange_4
                    1476   ; return ;                                // abort on escape
0000102C  6000 0090 1477          bra       MemoryChange_6
                    1478   MemoryChange_4:
                    1479   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001030  0C02 0030 1480          cmp.b     #48,D2
00001034  6506      1481          blo.s     MemoryChange_10
00001036  0C02 0039 1482          cmp.b     #57,D2
0000103A  6310      1483          bls.s     MemoryChange_9
                    1484   MemoryChange_10:
0000103C  0C02 0061 1485          cmp.b     #97,D2
00001040  6500 006E 1486          blo       MemoryChange_7
00001044  0C02 0066 1487          cmp.b     #102,D2
00001048  6200 0066 1488          bhi       MemoryChange_7
                    1489   MemoryChange_9:
                    1490   ; Data = (xtod(c) << 4) | (xtod(_getch()));
0000104C  C4BC 0000 1491          and.l     #255,D2
00001050  00FF      
00001052  2F02      1492          move.l    D2,-(A7)
00001054  4EB8 0BD2 1493          jsr       _xtod
00001058  584F      1494          addq.w    #4,A7
0000105A  C0BC 0000 1495          and.l     #255,D0
0000105E  00FF      
00001060  E980      1496          asl.l     #4,D0
00001062  2F00      1497          move.l    D0,-(A7)
00001064  2F01      1498          move.l    D1,-(A7)
00001066  4EB8 0B68 1499          jsr       __getch
0000106A  221F      1500          move.l    (A7)+,D1
0000106C  2F00      1501          move.l    D0,-(A7)
0000106E  4EB8 0BD2 1502          jsr       _xtod
00001072  584F      1503          addq.w    #4,A7
00001074  2200      1504          move.l    D0,D1
00001076  201F      1505          move.l    (A7)+,D0
00001078  C2BC 0000 1506          and.l     #255,D1
0000107C  00FF      
0000107E  8081      1507          or.l      D1,D0
00001080  2800      1508          move.l    D0,D4
                    1509   ; *RamPtr = (char)(Data) ;
00001082  2043      1510          move.l    D3,A0
00001084  1084      1511          move.b    D4,(A0)
                    1512   ; if(*RamPtr != Data) {
00001086  2043      1513          move.l    D3,A0
00001088  1010      1514          move.b    (A0),D0
0000108A  C0BC 0000 1515          and.l     #255,D0
0000108E  00FF      
00001090  B084      1516          cmp.l     D4,D0
00001092  671A      1517          beq.s     MemoryChange_11
                    1518   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
00001094  2043      1519          move.l    D3,A0
00001096  1210      1520          move.b    (A0),D1
00001098  C2BC 0000 1521          and.l     #255,D1
0000109C  00FF      
0000109E  2F01      1522          move.l    D1,-(A7)
000010A0  2F04      1523          move.l    D4,-(A7)
000010A2  4879 0000 1524          pea       @m68kde~2_21.L
000010A6  3BD4      
000010A8  4E92      1525          jsr       (A2)
000010AA  DEFC 000C 1526          add.w     #12,A7
                    1527   MemoryChange_11:
000010AE  6008      1528          bra.s     MemoryChange_13
                    1529   MemoryChange_7:
                    1530   ; }
                    1531   ; }
                    1532   ; else if(c == (char)('-'))
000010B0  0C02 002D 1533          cmp.b     #45,D2
000010B4  6602      1534          bne.s     MemoryChange_13
                    1535   ; RamPtr -= 2 ; ;
000010B6  5583      1536          subq.l    #2,D3
                    1537   MemoryChange_13:
                    1538   ; RamPtr ++ ;
000010B8  5283      1539          addq.l    #1,D3
000010BA  6000 FF3A 1540          bra       MemoryChange_1
                    1541   MemoryChange_6:
000010BE  4CDF 041C 1542          movem.l   (A7)+,D2/D3/D4/A2
000010C2  4E75      1543          rts
                    1544   ; }
                    1545   ; }
                    1546   ; /*******************************************************************
                    1547   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1548   ; ********************************************************************/
                    1549   ; void ProgramFlashChip(void)
                    1550   ; {
                    1551   _ProgramFlashChip:
000010C4  4E75      1552          rts
                    1553   ; //
                    1554   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1555   ; // TODO : then verify by reading it back and comparing to memory
                    1556   ; //
                    1557   ; }
                    1558   ; /*************************************************************************
                    1559   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1560   ; **************************************************************************/
                    1561   ; void LoadFromFlashChip(void)
                    1562   ; {
                    1563   _LoadFromFlashChip:
                    1564   ; printf("\r\nLoading Program From SPI Flash....") ;
000010C6  4879 0000 1565          pea       @m68kde~2_22.L
000010CA  3C08      
000010CC  4EB9 0000 1566          jsr       _printf
000010D0  30D4      
000010D2  584F      1567          addq.w    #4,A7
000010D4  4E75      1568          rts
                    1569   ; //
                    1570   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1571   ; //
                    1572   ; }
                    1573   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1574   ; // IMPORTANT
                    1575   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1576   ; // has to be done with an interrupt (IRQ Level 6)
                    1577   ; //
                    1578   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1579   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1580   ; //
                    1581   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1582   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1583   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1584   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1585   ; // program area
                    1586   ; //
                    1587   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1588   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1589   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1590   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1591   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1592   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1593   ; void DumpRegisters()
                    1594   ; {
                    1595   _DumpRegisters:
000010D6  48E7 3F3C 1596          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000010DA  45F9 0000 1597          lea       _putch.L,A2
000010DE  2FF0      
000010E0  47F9 0000 1598          lea       _printf.L,A3
000010E4  30D4      
000010E6  49F9 0B00 1599          lea       _SR.L,A4
000010EA  012C      
000010EC  4BF9 0B00 1600          lea       _WatchPointString.L,A5
000010F0  01C2      
                    1601   ; short i, x, j, k ;
                    1602   ; unsigned char c, *BytePointer;
                    1603   ; // buld up strings for displaying watchpoints
                    1604   ; for(x = 0; x < (short)(8); x++)
000010F2  4242      1605          clr.w     D2
                    1606   DumpRegisters_1:
000010F4  0C42 0008 1607          cmp.w     #8,D2
000010F8  6C00 01C6 1608          bge       DumpRegisters_3
                    1609   ; {
                    1610   ; if(WatchPointSetOrCleared[x] == 1)
000010FC  48C2      1611          ext.l     D2
000010FE  2002      1612          move.l    D2,D0
00001100  E588      1613          lsl.l     #2,D0
00001102  41F9 0B00 1614          lea       _WatchPointSetOrCleared.L,A0
00001106  01A2      
00001108  2030 0800 1615          move.l    0(A0,D0.L),D0
0000110C  0C80 0000 1616          cmp.l     #1,D0
00001110  0001      
00001112  6600 0186 1617          bne       DumpRegisters_4
                    1618   ; {
                    1619   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
00001116  48C2      1620          ext.l     D2
00001118  2202      1621          move.l    D2,D1
0000111A  E589      1622          lsl.l     #2,D1
0000111C  41F9 0B00 1623          lea       _WatchPointAddress.L,A0
00001120  0182      
00001122  2F30 1800 1624          move.l    0(A0,D1.L),-(A7)
00001126  4879 0000 1625          pea       @m68kde~2_23.L
0000112A  3C2E      
0000112C  220D      1626          move.l    A5,D1
0000112E  48C2      1627          ext.l     D2
00001130  2F00      1628          move.l    D0,-(A7)
00001132  2002      1629          move.l    D2,D0
00001134  C1FC 0064 1630          muls      #100,D0
00001138  D280      1631          add.l     D0,D1
0000113A  201F      1632          move.l    (A7)+,D0
0000113C  2F01      1633          move.l    D1,-(A7)
0000113E  4EB9 0000 1634          jsr       _sprintf
00001142  3070      
00001144  DEFC 000C 1635          add.w     #12,A7
                    1636   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001148  48C2      1637          ext.l     D2
0000114A  2002      1638          move.l    D2,D0
0000114C  E588      1639          lsl.l     #2,D0
0000114E  41F9 0B00 1640          lea       _WatchPointAddress.L,A0
00001152  0182      
00001154  2A30 0800 1641          move.l    0(A0,D0.L),D5
                    1642   ; for(j = 0; j < (short)(16); j+=2)
00001158  4243      1643          clr.w     D3
                    1644   DumpRegisters_6:
0000115A  0C43 0010 1645          cmp.w     #16,D3
0000115E  6C00 0082 1646          bge       DumpRegisters_8
                    1647   ; {
                    1648   ; for(k = 0; k < (short)(2); k++)
00001162  4246      1649          clr.w     D6
                    1650   DumpRegisters_9:
00001164  0C46 0002 1651          cmp.w     #2,D6
00001168  6C00 0052 1652          bge       DumpRegisters_11
                    1653   ; {
                    1654   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
0000116C  2045      1655          move.l    D5,A0
0000116E  48C3      1656          ext.l     D3
00001170  2203      1657          move.l    D3,D1
00001172  48C6      1658          ext.l     D6
00001174  D286      1659          add.l     D6,D1
00001176  1230 1800 1660          move.b    0(A0,D1.L),D1
0000117A  C2BC 0000 1661          and.l     #255,D1
0000117E  00FF      
00001180  2F01      1662          move.l    D1,-(A7)
00001182  4879 0000 1663          pea       @m68kde~2_8.L
00001186  3A5E      
00001188  4879 0B00 1664          pea       _TempString.L
0000118C  04E2      
0000118E  4EB9 0000 1665          jsr       _sprintf
00001192  3070      
00001194  DEFC 000C 1666          add.w     #12,A7
                    1667   ; strcat(WatchPointString[x], TempString) ;
00001198  4879 0B00 1668          pea       _TempString.L
0000119C  04E2      
0000119E  220D      1669          move.l    A5,D1
000011A0  48C2      1670          ext.l     D2
000011A2  2F00      1671          move.l    D0,-(A7)
000011A4  2002      1672          move.l    D2,D0
000011A6  C1FC 0064 1673          muls      #100,D0
000011AA  D280      1674          add.l     D0,D1
000011AC  201F      1675          move.l    (A7)+,D0
000011AE  2F01      1676          move.l    D1,-(A7)
000011B0  4EB9 0000 1677          jsr       _strcat
000011B4  30A2      
000011B6  504F      1678          addq.w    #8,A7
000011B8  5246      1679          addq.w    #1,D6
000011BA  60A8      1680          bra       DumpRegisters_9
                    1681   DumpRegisters_11:
                    1682   ; }
                    1683   ; strcat(WatchPointString[x]," ") ;
000011BC  4879 0000 1684          pea       @m68kde~2_24.L
000011C0  3C36      
000011C2  220D      1685          move.l    A5,D1
000011C4  48C2      1686          ext.l     D2
000011C6  2F00      1687          move.l    D0,-(A7)
000011C8  2002      1688          move.l    D2,D0
000011CA  C1FC 0064 1689          muls      #100,D0
000011CE  D280      1690          add.l     D0,D1
000011D0  201F      1691          move.l    (A7)+,D0
000011D2  2F01      1692          move.l    D1,-(A7)
000011D4  4EB9 0000 1693          jsr       _strcat
000011D8  30A2      
000011DA  504F      1694          addq.w    #8,A7
000011DC  5443      1695          addq.w    #2,D3
000011DE  6000 FF7A 1696          bra       DumpRegisters_6
                    1697   DumpRegisters_8:
                    1698   ; }
                    1699   ; strcat(WatchPointString[x], "  ") ;
000011E2  4879 0000 1700          pea       @m68kde~2_9.L
000011E6  3A64      
000011E8  220D      1701          move.l    A5,D1
000011EA  48C2      1702          ext.l     D2
000011EC  2F00      1703          move.l    D0,-(A7)
000011EE  2002      1704          move.l    D2,D0
000011F0  C1FC 0064 1705          muls      #100,D0
000011F4  D280      1706          add.l     D0,D1
000011F6  201F      1707          move.l    (A7)+,D0
000011F8  2F01      1708          move.l    D1,-(A7)
000011FA  4EB9 0000 1709          jsr       _strcat
000011FE  30A2      
00001200  504F      1710          addq.w    #8,A7
                    1711   ; BytePointer = (char *)(WatchPointAddress[x]) ;
00001202  48C2      1712          ext.l     D2
00001204  2002      1713          move.l    D2,D0
00001206  E588      1714          lsl.l     #2,D0
00001208  41F9 0B00 1715          lea       _WatchPointAddress.L,A0
0000120C  0182      
0000120E  2A30 0800 1716          move.l    0(A0,D0.L),D5
                    1717   ; for(j = 0; j < (short)(16); j++)
00001212  4243      1718          clr.w     D3
                    1719   DumpRegisters_12:
00001214  0C43 0010 1720          cmp.w     #16,D3
00001218  6C00 007E 1721          bge       DumpRegisters_14
                    1722   ; {
                    1723   ; c = ((char)(BytePointer[j]) & 0x7f) ;
0000121C  2045      1724          move.l    D5,A0
0000121E  48C3      1725          ext.l     D3
00001220  1030 3800 1726          move.b    0(A0,D3.L),D0
00001224  C03C 007F 1727          and.b     #127,D0
00001228  1E00      1728          move.b    D0,D7
                    1729   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
0000122A  0C07 007F 1730          cmp.b     #127,D7
0000122E  6206      1731          bhi.s     DumpRegisters_17
00001230  0C07 0020 1732          cmp.b     #32,D7
00001234  6416      1733          bhs.s     DumpRegisters_15
                    1734   DumpRegisters_17:
                    1735   ; sprintf(TempString, ".") ;
00001236  4879 0000 1736          pea       @m68kde~2_25.L
0000123A  3C38      
0000123C  4879 0B00 1737          pea       _TempString.L
00001240  04E2      
00001242  4EB9 0000 1738          jsr       _sprintf
00001246  3070      
00001248  504F      1739          addq.w    #8,A7
0000124A  6026      1740          bra.s     DumpRegisters_16
                    1741   DumpRegisters_15:
                    1742   ; else
                    1743   ; sprintf(TempString, "%c", BytePointer[j]) ;
0000124C  2045      1744          move.l    D5,A0
0000124E  48C3      1745          ext.l     D3
00001250  1230 3800 1746          move.b    0(A0,D3.L),D1
00001254  C2BC 0000 1747          and.l     #255,D1
00001258  00FF      
0000125A  2F01      1748          move.l    D1,-(A7)
0000125C  4879 0000 1749          pea       @m68kde~2_26.L
00001260  3C3A      
00001262  4879 0B00 1750          pea       _TempString.L
00001266  04E2      
00001268  4EB9 0000 1751          jsr       _sprintf
0000126C  3070      
0000126E  DEFC 000C 1752          add.w     #12,A7
                    1753   DumpRegisters_16:
                    1754   ; strcat(WatchPointString[x], TempString) ;
00001272  4879 0B00 1755          pea       _TempString.L
00001276  04E2      
00001278  220D      1756          move.l    A5,D1
0000127A  48C2      1757          ext.l     D2
0000127C  2F00      1758          move.l    D0,-(A7)
0000127E  2002      1759          move.l    D2,D0
00001280  C1FC 0064 1760          muls      #100,D0
00001284  D280      1761          add.l     D0,D1
00001286  201F      1762          move.l    (A7)+,D0
00001288  2F01      1763          move.l    D1,-(A7)
0000128A  4EB9 0000 1764          jsr       _strcat
0000128E  30A2      
00001290  504F      1765          addq.w    #8,A7
00001292  5243      1766          addq.w    #1,D3
00001294  6000 FF7E 1767          bra       DumpRegisters_12
                    1768   DumpRegisters_14:
00001298  6020      1769          bra.s     DumpRegisters_5
                    1770   DumpRegisters_4:
                    1771   ; }
                    1772   ; }
                    1773   ; else
                    1774   ; strcpy(WatchPointString[x], "") ;
0000129A  4879 0000 1775          pea       @m68kde~2_27.L
0000129E  3C3E      
000012A0  220D      1776          move.l    A5,D1
000012A2  48C2      1777          ext.l     D2
000012A4  2F00      1778          move.l    D0,-(A7)
000012A6  2002      1779          move.l    D2,D0
000012A8  C1FC 0064 1780          muls      #100,D0
000012AC  D280      1781          add.l     D0,D1
000012AE  201F      1782          move.l    (A7)+,D0
000012B0  2F01      1783          move.l    D1,-(A7)
000012B2  4EB9 0000 1784          jsr       _strcpy
000012B6  2F02      
000012B8  504F      1785          addq.w    #8,A7
                    1786   DumpRegisters_5:
000012BA  5242      1787          addq.w    #1,D2
000012BC  6000 FE36 1788          bra       DumpRegisters_1
                    1789   DumpRegisters_3:
                    1790   ; }
                    1791   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
000012C0  2F39 0B00 1792          move.l    _a0.L,-(A7)
000012C4  0104      
000012C6  2F39 0B00 1793          move.l    _d0.L,-(A7)
000012CA  00E4      
000012CC  4879 0000 1794          pea       @m68kde~2_28.L
000012D0  3C40      
000012D2  4E93      1795          jsr       (A3)
000012D4  DEFC 000C 1796          add.w     #12,A7
                    1797   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
000012D8  2F39 0B00 1798          move.l    _a1.L,-(A7)
000012DC  0108      
000012DE  2F39 0B00 1799          move.l    _d1.L,-(A7)
000012E2  00E8      
000012E4  4879 0000 1800          pea       @m68kde~2_29.L
000012E8  3C5C      
000012EA  4E93      1801          jsr       (A3)
000012EC  DEFC 000C 1802          add.w     #12,A7
                    1803   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
000012F0  2F39 0B00 1804          move.l    _a2.L,-(A7)
000012F4  010C      
000012F6  2F39 0B00 1805          move.l    _d2.L,-(A7)
000012FA  00EC      
000012FC  4879 0000 1806          pea       @m68kde~2_30.L
00001300  3C76      
00001302  4E93      1807          jsr       (A3)
00001304  DEFC 000C 1808          add.w     #12,A7
                    1809   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001308  2F39 0B00 1810          move.l    _a3.L,-(A7)
0000130C  0110      
0000130E  2F39 0B00 1811          move.l    _d3.L,-(A7)
00001312  00F0      
00001314  4879 0000 1812          pea       @m68kde~2_31.L
00001318  3C90      
0000131A  4E93      1813          jsr       (A3)
0000131C  DEFC 000C 1814          add.w     #12,A7
                    1815   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
00001320  2F39 0B00 1816          move.l    _a4.L,-(A7)
00001324  0114      
00001326  2F39 0B00 1817          move.l    _d4.L,-(A7)
0000132A  00F4      
0000132C  4879 0000 1818          pea       @m68kde~2_32.L
00001330  3CAA      
00001332  4E93      1819          jsr       (A3)
00001334  DEFC 000C 1820          add.w     #12,A7
                    1821   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
00001338  2F39 0B00 1822          move.l    _a5.L,-(A7)
0000133C  0118      
0000133E  2F39 0B00 1823          move.l    _d5.L,-(A7)
00001342  00F8      
00001344  4879 0000 1824          pea       @m68kde~2_33.L
00001348  3CC4      
0000134A  4E93      1825          jsr       (A3)
0000134C  DEFC 000C 1826          add.w     #12,A7
                    1827   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
00001350  2F39 0B00 1828          move.l    _a6.L,-(A7)
00001354  011C      
00001356  2F39 0B00 1829          move.l    _d6.L,-(A7)
0000135A  00FC      
0000135C  4879 0000 1830          pea       @m68kde~2_34.L
00001360  3CDE      
00001362  4E93      1831          jsr       (A3)
00001364  DEFC 000C 1832          add.w     #12,A7
                    1833   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
00001368  3214      1834          move.w    (A4),D1
0000136A  C27C 2000 1835          and.w     #8192,D1
0000136E  0C41 2000 1836          cmp.w     #8192,D1
00001372  6608      1837          bne.s     DumpRegisters_18
00001374  2239 0B00 1838          move.l    _SSP.L,D1
00001378  0124      
0000137A  6006      1839          bra.s     DumpRegisters_19
                    1840   DumpRegisters_18:
0000137C  2239 0B00 1841          move.l    _USP.L,D1
00001380  0128      
                    1842   DumpRegisters_19:
00001382  2F01      1843          move.l    D1,-(A7)
00001384  2F39 0B00 1844          move.l    _d7.L,-(A7)
00001388  0100      
0000138A  4879 0000 1845          pea       @m68kde~2_35.L
0000138E  3CF8      
00001390  4E93      1846          jsr       (A3)
00001392  DEFC 000C 1847          add.w     #12,A7
                    1848   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
00001396  2F39 0B00 1849          move.l    _USP.L,-(A7)
0000139A  0128      
0000139C  4879 0000 1850          pea       @m68kde~2_36.L
000013A0  3D12      
000013A2  4E93      1851          jsr       (A3)
000013A4  504F      1852          addq.w    #8,A7
                    1853   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
000013A6  2F39 0B00 1854          move.l    _SSP.L,-(A7)
000013AA  0124      
000013AC  4879 0000 1855          pea       @m68kde~2_37.L
000013B0  3D30      
000013B2  4E93      1856          jsr       (A3)
000013B4  504F      1857          addq.w    #8,A7
                    1858   ; printf("\r\n SR = $%04X   ",SR) ;
000013B6  3214      1859          move.w    (A4),D1
000013B8  C2BC 0000 1860          and.l     #65535,D1
000013BC  FFFF      
000013BE  2F01      1861          move.l    D1,-(A7)
000013C0  4879 0000 1862          pea       @m68kde~2_38.L
000013C4  3D52      
000013C6  4E93      1863          jsr       (A3)
000013C8  504F      1864          addq.w    #8,A7
                    1865   ; // display the status word in characters etc.
                    1866   ; printf("   [") ;
000013CA  4879 0000 1867          pea       @m68kde~2_39.L
000013CE  3D64      
000013D0  4E93      1868          jsr       (A3)
000013D2  584F      1869          addq.w    #4,A7
                    1870   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
000013D4  3014      1871          move.w    (A4),D0
000013D6  C07C 8000 1872          and.w     #32768,D0
000013DA  0C40 8000 1873          cmp.w     #32768,D0
000013DE  660A      1874          bne.s     DumpRegisters_20
000013E0  4878 0054 1875          pea       84
000013E4  4E92      1876          jsr       (A2)
000013E6  584F      1877          addq.w    #4,A7
000013E8  6008      1878          bra.s     DumpRegisters_21
                    1879   DumpRegisters_20:
000013EA  4878 002D 1880          pea       45
000013EE  4E92      1881          jsr       (A2)
000013F0  584F      1882          addq.w    #4,A7
                    1883   DumpRegisters_21:
                    1884   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
000013F2  3014      1885          move.w    (A4),D0
000013F4  C07C 2000 1886          and.w     #8192,D0
000013F8  0C40 2000 1887          cmp.w     #8192,D0
000013FC  660A      1888          bne.s     DumpRegisters_22
000013FE  4878 0053 1889          pea       83
00001402  4E92      1890          jsr       (A2)
00001404  584F      1891          addq.w    #4,A7
00001406  6008      1892          bra.s     DumpRegisters_23
                    1893   DumpRegisters_22:
00001408  4878 0055 1894          pea       85
0000140C  4E92      1895          jsr       (A2)
0000140E  584F      1896          addq.w    #4,A7
                    1897   DumpRegisters_23:
                    1898   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001410  3014      1899          move.w    (A4),D0
00001412  C07C 0400 1900          and.w     #1024,D0
00001416  0C40 0400 1901          cmp.w     #1024,D0
0000141A  660A      1902          bne.s     DumpRegisters_24
0000141C  4878 0031 1903          pea       49
00001420  4E92      1904          jsr       (A2)
00001422  584F      1905          addq.w    #4,A7
00001424  6008      1906          bra.s     DumpRegisters_25
                    1907   DumpRegisters_24:
00001426  4878 0030 1908          pea       48
0000142A  4E92      1909          jsr       (A2)
0000142C  584F      1910          addq.w    #4,A7
                    1911   DumpRegisters_25:
                    1912   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
0000142E  3014      1913          move.w    (A4),D0
00001430  C07C 0200 1914          and.w     #512,D0
00001434  0C40 0200 1915          cmp.w     #512,D0
00001438  660A      1916          bne.s     DumpRegisters_26
0000143A  4878 0031 1917          pea       49
0000143E  4E92      1918          jsr       (A2)
00001440  584F      1919          addq.w    #4,A7
00001442  6008      1920          bra.s     DumpRegisters_27
                    1921   DumpRegisters_26:
00001444  4878 0030 1922          pea       48
00001448  4E92      1923          jsr       (A2)
0000144A  584F      1924          addq.w    #4,A7
                    1925   DumpRegisters_27:
                    1926   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
0000144C  3014      1927          move.w    (A4),D0
0000144E  C07C 0100 1928          and.w     #256,D0
00001452  0C40 0100 1929          cmp.w     #256,D0
00001456  660A      1930          bne.s     DumpRegisters_28
00001458  4878 0031 1931          pea       49
0000145C  4E92      1932          jsr       (A2)
0000145E  584F      1933          addq.w    #4,A7
00001460  6008      1934          bra.s     DumpRegisters_29
                    1935   DumpRegisters_28:
00001462  4878 0030 1936          pea       48
00001466  4E92      1937          jsr       (A2)
00001468  584F      1938          addq.w    #4,A7
                    1939   DumpRegisters_29:
                    1940   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
0000146A  3014      1941          move.w    (A4),D0
0000146C  C07C 0010 1942          and.w     #16,D0
00001470  0C40 0010 1943          cmp.w     #16,D0
00001474  660A      1944          bne.s     DumpRegisters_30
00001476  4878 0058 1945          pea       88
0000147A  4E92      1946          jsr       (A2)
0000147C  584F      1947          addq.w    #4,A7
0000147E  6008      1948          bra.s     DumpRegisters_31
                    1949   DumpRegisters_30:
00001480  4878 002D 1950          pea       45
00001484  4E92      1951          jsr       (A2)
00001486  584F      1952          addq.w    #4,A7
                    1953   DumpRegisters_31:
                    1954   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001488  3014      1955          move.w    (A4),D0
0000148A  C07C 0008 1956          and.w     #8,D0
0000148E  0C40 0008 1957          cmp.w     #8,D0
00001492  660A      1958          bne.s     DumpRegisters_32
00001494  4878 004E 1959          pea       78
00001498  4E92      1960          jsr       (A2)
0000149A  584F      1961          addq.w    #4,A7
0000149C  6008      1962          bra.s     DumpRegisters_33
                    1963   DumpRegisters_32:
0000149E  4878 002D 1964          pea       45
000014A2  4E92      1965          jsr       (A2)
000014A4  584F      1966          addq.w    #4,A7
                    1967   DumpRegisters_33:
                    1968   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
000014A6  3014      1969          move.w    (A4),D0
000014A8  C07C 0004 1970          and.w     #4,D0
000014AC  0C40 0004 1971          cmp.w     #4,D0
000014B0  660A      1972          bne.s     DumpRegisters_34
000014B2  4878 005A 1973          pea       90
000014B6  4E92      1974          jsr       (A2)
000014B8  584F      1975          addq.w    #4,A7
000014BA  6008      1976          bra.s     DumpRegisters_35
                    1977   DumpRegisters_34:
000014BC  4878 002D 1978          pea       45
000014C0  4E92      1979          jsr       (A2)
000014C2  584F      1980          addq.w    #4,A7
                    1981   DumpRegisters_35:
                    1982   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
000014C4  3014      1983          move.w    (A4),D0
000014C6  C07C 0002 1984          and.w     #2,D0
000014CA  0C40 0002 1985          cmp.w     #2,D0
000014CE  660A      1986          bne.s     DumpRegisters_36
000014D0  4878 0056 1987          pea       86
000014D4  4E92      1988          jsr       (A2)
000014D6  584F      1989          addq.w    #4,A7
000014D8  6008      1990          bra.s     DumpRegisters_37
                    1991   DumpRegisters_36:
000014DA  4878 002D 1992          pea       45
000014DE  4E92      1993          jsr       (A2)
000014E0  584F      1994          addq.w    #4,A7
                    1995   DumpRegisters_37:
                    1996   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
000014E2  3014      1997          move.w    (A4),D0
000014E4  C07C 0001 1998          and.w     #1,D0
000014E8  0C40 0001 1999          cmp.w     #1,D0
000014EC  660A      2000          bne.s     DumpRegisters_38
000014EE  4878 0043 2001          pea       67
000014F2  4E92      2002          jsr       (A2)
000014F4  584F      2003          addq.w    #4,A7
000014F6  6008      2004          bra.s     DumpRegisters_39
                    2005   DumpRegisters_38:
000014F8  4878 002D 2006          pea       45
000014FC  4E92      2007          jsr       (A2)
000014FE  584F      2008          addq.w    #4,A7
                    2009   DumpRegisters_39:
                    2010   ; putchar(']') ;
00001500  4878 005D 2011          pea       93
00001504  4E92      2012          jsr       (A2)
00001506  584F      2013          addq.w    #4,A7
                    2014   ; printf("\r\n PC = $%08X  ", PC) ;
00001508  2F39 0B00 2015          move.l    _PC.L,-(A7)
0000150C  0120      
0000150E  4879 0000 2016          pea       @m68kde~2_40.L
00001512  3D6A      
00001514  4E93      2017          jsr       (A3)
00001516  504F      2018          addq.w    #8,A7
                    2019   ; if(*(unsigned short int *)(PC) == 0x4e4e)
00001518  2039 0B00 2020          move.l    _PC.L,D0
0000151C  0120      
0000151E  2040      2021          move.l    D0,A0
00001520  3010      2022          move.w    (A0),D0
00001522  0C40 4E4E 2023          cmp.w     #20046,D0
00001526  660A      2024          bne.s     DumpRegisters_40
                    2025   ; printf("[@ BREAKPOINT]") ;
00001528  4879 0000 2026          pea       @m68kde~2_41.L
0000152C  3D7A      
0000152E  4E93      2027          jsr       (A3)
00001530  584F      2028          addq.w    #4,A7
                    2029   DumpRegisters_40:
                    2030   ; printf("\r\n") ;
00001532  4879 0000 2031          pea       @m68kde~2_1.L
00001536  39E6      
00001538  4E93      2032          jsr       (A3)
0000153A  584F      2033          addq.w    #4,A7
                    2034   ; for(i=0; i < 8; i++)    {
0000153C  4244      2035          clr.w     D4
                    2036   DumpRegisters_42:
0000153E  0C44 0008 2037          cmp.w     #8,D4
00001542  6C00 0040 2038          bge       DumpRegisters_44
                    2039   ; if(WatchPointSetOrCleared[i] == 1)
00001546  48C4      2040          ext.l     D4
00001548  2004      2041          move.l    D4,D0
0000154A  E588      2042          lsl.l     #2,D0
0000154C  41F9 0B00 2043          lea       _WatchPointSetOrCleared.L,A0
00001550  01A2      
00001552  2030 0800 2044          move.l    0(A0,D0.L),D0
00001556  0C80 0000 2045          cmp.l     #1,D0
0000155A  0001      
0000155C  6622      2046          bne.s     DumpRegisters_45
                    2047   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000155E  220D      2048          move.l    A5,D1
00001560  48C4      2049          ext.l     D4
00001562  2F00      2050          move.l    D0,-(A7)
00001564  2004      2051          move.l    D4,D0
00001566  C1FC 0064 2052          muls      #100,D0
0000156A  D280      2053          add.l     D0,D1
0000156C  201F      2054          move.l    (A7)+,D0
0000156E  2F01      2055          move.l    D1,-(A7)
00001570  48C4      2056          ext.l     D4
00001572  2F04      2057          move.l    D4,-(A7)
00001574  4879 0000 2058          pea       @m68kde~2_42.L
00001578  3D8A      
0000157A  4E93      2059          jsr       (A3)
0000157C  DEFC 000C 2060          add.w     #12,A7
                    2061   DumpRegisters_45:
00001580  5244      2062          addq.w    #1,D4
00001582  60BA      2063          bra       DumpRegisters_42
                    2064   DumpRegisters_44:
00001584  4CDF 3CFC 2065          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001588  4E75      2066          rts
                    2067   ; }
                    2068   ; }
                    2069   ; // Trace Exception Handler
                    2070   ; void DumpRegistersandPause(void)
                    2071   ; {
                    2072   _DumpRegistersandPause:
0000158A  2F0A      2073          move.l    A2,-(A7)
0000158C  45F9 0000 2074          lea       _printf.L,A2
00001590  30D4      
                    2075   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
00001592  4879 0000 2076          pea       @m68kde~2_43.L
00001596  3D96      
00001598  4E92      2077          jsr       (A2)
0000159A  584F      2078          addq.w    #4,A7
                    2079   ; printf("\r\nBreak Points :[Disabled]") ;
0000159C  4879 0000 2080          pea       @m68kde~2_44.L
000015A0  3DB6      
000015A2  4E92      2081          jsr       (A2)
000015A4  584F      2082          addq.w    #4,A7
                    2083   ; DumpRegisters() ;
000015A6  4EB8 10D6 2084          jsr       _DumpRegisters
                    2085   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
000015AA  4879 0000 2086          pea       @m68kde~2_45.L
000015AE  3DD2      
000015B0  4E92      2087          jsr       (A2)
000015B2  584F      2088          addq.w    #4,A7
                    2089   ; printf("\r\nPress <ESC> to Resume Program") ;
000015B4  4879 0000 2090          pea       @m68kde~2_46.L
000015B8  3DFE      
000015BA  4E92      2091          jsr       (A2)
000015BC  584F      2092          addq.w    #4,A7
                    2093   ; menu() ;
000015BE  4EB9 0000 2094          jsr       _menu
000015C2  216E      
000015C4  245F      2095          move.l    (A7)+,A2
000015C6  4E75      2096          rts
                    2097   ; }
                    2098   ; void ChangeRegisters(void)
                    2099   ; {
                    2100   _ChangeRegisters:
000015C8  4E56 FFFC 2101          link      A6,#-4
000015CC  48E7 303C 2102          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000015D0  45F9 0000 2103          lea       _printf.L,A2
000015D4  30D4      
000015D6  47EE FFFC 2104          lea       -4(A6),A3
000015DA  49F8 0CA4 2105          lea       _Get8HexDigits.L,A4
000015DE  4BF8 0B68 2106          lea       __getch.L,A5
                    2107   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2108   ; int reg_val ;
                    2109   ; char c, reg[3] ;
                    2110   ; reg[0] = tolower(_getch()) ;
000015E2  2F00      2111          move.l    D0,-(A7)
000015E4  4E95      2112          jsr       (A5)
000015E6  2200      2113          move.l    D0,D1
000015E8  201F      2114          move.l    (A7)+,D0
000015EA  2F01      2115          move.l    D1,-(A7)
000015EC  4EB9 0000 2116          jsr       _tolower
000015F0  3054      
000015F2  584F      2117          addq.w    #4,A7
000015F4  1680      2118          move.b    D0,(A3)
                    2119   ; reg[1] = c = tolower(_getch()) ;
000015F6  2F00      2120          move.l    D0,-(A7)
000015F8  4E95      2121          jsr       (A5)
000015FA  2200      2122          move.l    D0,D1
000015FC  201F      2123          move.l    (A7)+,D0
000015FE  2F01      2124          move.l    D1,-(A7)
00001600  4EB9 0000 2125          jsr       _tolower
00001604  3054      
00001606  584F      2126          addq.w    #4,A7
00001608  1400      2127          move.b    D0,D2
0000160A  1740 0001 2128          move.b    D0,1(A3)
                    2129   ; if(reg[0] == (char)('d'))  {    // change data register
0000160E  1013      2130          move.b    (A3),D0
00001610  0C00 0064 2131          cmp.b     #100,D0
00001614  6600 00AE 2132          bne       ChangeRegisters_1
                    2133   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
00001618  102B 0001 2134          move.b    1(A3),D0
0000161C  0C00 0037 2135          cmp.b     #55,D0
00001620  6E0A      2136          bgt.s     ChangeRegisters_5
00001622  102B 0001 2137          move.b    1(A3),D0
00001626  0C00 0030 2138          cmp.b     #48,D0
0000162A  6C0E      2139          bge.s     ChangeRegisters_3
                    2140   ChangeRegisters_5:
                    2141   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
0000162C  4879 0000 2142          pea       @m68kde~2_47.L
00001630  3E1E      
00001632  4E92      2143          jsr       (A2)
00001634  584F      2144          addq.w    #4,A7
                    2145   ; return ;
00001636  6000 0244 2146          bra       ChangeRegisters_6
                    2147   ChangeRegisters_3:
                    2148   ; }
                    2149   ; else {
                    2150   ; printf("\r\nD%c = ", c) ;
0000163A  4882      2151          ext.w     D2
0000163C  48C2      2152          ext.l     D2
0000163E  2F02      2153          move.l    D2,-(A7)
00001640  4879 0000 2154          pea       @m68kde~2_48.L
00001644  3E4A      
00001646  4E92      2155          jsr       (A2)
00001648  504F      2156          addq.w    #8,A7
                    2157   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
0000164A  42A7      2158          clr.l     -(A7)
0000164C  4E94      2159          jsr       (A4)
0000164E  584F      2160          addq.w    #4,A7
00001650  2600      2161          move.l    D0,D3
                    2162   ; }
                    2163   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2164   ; if(c == (char)('0'))
00001652  0C02 0030 2165          cmp.b     #48,D2
00001656  660A      2166          bne.s     ChangeRegisters_7
                    2167   ; d0 = reg_val ;
00001658  23C3 0B00 2168          move.l    D3,_d0.L
0000165C  00E4      
0000165E  6000 0060 2169          bra       ChangeRegisters_20
                    2170   ChangeRegisters_7:
                    2171   ; else if(c == (char)('1'))
00001662  0C02 0031 2172          cmp.b     #49,D2
00001666  660A      2173          bne.s     ChangeRegisters_9
                    2174   ; d1 = reg_val ;
00001668  23C3 0B00 2175          move.l    D3,_d1.L
0000166C  00E8      
0000166E  6000 0050 2176          bra       ChangeRegisters_20
                    2177   ChangeRegisters_9:
                    2178   ; else if(c == (char)('2'))
00001672  0C02 0032 2179          cmp.b     #50,D2
00001676  660A      2180          bne.s     ChangeRegisters_11
                    2181   ; d2 = reg_val ;
00001678  23C3 0B00 2182          move.l    D3,_d2.L
0000167C  00EC      
0000167E  6000 0040 2183          bra       ChangeRegisters_20
                    2184   ChangeRegisters_11:
                    2185   ; else if(c == (char)('3'))
00001682  0C02 0033 2186          cmp.b     #51,D2
00001686  6608      2187          bne.s     ChangeRegisters_13
                    2188   ; d3 = reg_val ;
00001688  23C3 0B00 2189          move.l    D3,_d3.L
0000168C  00F0      
0000168E  6030      2190          bra.s     ChangeRegisters_20
                    2191   ChangeRegisters_13:
                    2192   ; else if(c == (char)('4'))
00001690  0C02 0034 2193          cmp.b     #52,D2
00001694  6608      2194          bne.s     ChangeRegisters_15
                    2195   ; d4 = reg_val ;
00001696  23C3 0B00 2196          move.l    D3,_d4.L
0000169A  00F4      
0000169C  6022      2197          bra.s     ChangeRegisters_20
                    2198   ChangeRegisters_15:
                    2199   ; else if(c == (char)('5'))
0000169E  0C02 0035 2200          cmp.b     #53,D2
000016A2  6608      2201          bne.s     ChangeRegisters_17
                    2202   ; d5 = reg_val ;
000016A4  23C3 0B00 2203          move.l    D3,_d5.L
000016A8  00F8      
000016AA  6014      2204          bra.s     ChangeRegisters_20
                    2205   ChangeRegisters_17:
                    2206   ; else if(c == (char)('6'))
000016AC  0C02 0036 2207          cmp.b     #54,D2
000016B0  6608      2208          bne.s     ChangeRegisters_19
                    2209   ; d6 = reg_val ;
000016B2  23C3 0B00 2210          move.l    D3,_d6.L
000016B6  00FC      
000016B8  6006      2211          bra.s     ChangeRegisters_20
                    2212   ChangeRegisters_19:
                    2213   ; else
                    2214   ; d7 = reg_val ;
000016BA  23C3 0B00 2215          move.l    D3,_d7.L
000016BE  0100      
                    2216   ChangeRegisters_20:
000016C0  6000 01B6 2217          bra       ChangeRegisters_51
                    2218   ChangeRegisters_1:
                    2219   ; }
                    2220   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
000016C4  1013      2221          move.b    (A3),D0
000016C6  0C00 0061 2222          cmp.b     #97,D0
000016CA  6600 00A6 2223          bne       ChangeRegisters_21
                    2224   ; if((c > (char)('7')) || (c < (char)('0'))) {
000016CE  0C02 0037 2225          cmp.b     #55,D2
000016D2  6E06      2226          bgt.s     ChangeRegisters_25
000016D4  0C02 0030 2227          cmp.b     #48,D2
000016D8  6C0E      2228          bge.s     ChangeRegisters_23
                    2229   ChangeRegisters_25:
                    2230   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
000016DA  4879 0000 2231          pea       @m68kde~2_49.L
000016DE  3E54      
000016E0  4E92      2232          jsr       (A2)
000016E2  584F      2233          addq.w    #4,A7
                    2234   ; return ;
000016E4  6000 0196 2235          bra       ChangeRegisters_6
                    2236   ChangeRegisters_23:
                    2237   ; }
                    2238   ; else {
                    2239   ; printf("\r\nA%c = ", c) ;
000016E8  4882      2240          ext.w     D2
000016EA  48C2      2241          ext.l     D2
000016EC  2F02      2242          move.l    D2,-(A7)
000016EE  4879 0000 2243          pea       @m68kde~2_50.L
000016F2  3E82      
000016F4  4E92      2244          jsr       (A2)
000016F6  504F      2245          addq.w    #8,A7
                    2246   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000016F8  42A7      2247          clr.l     -(A7)
000016FA  4E94      2248          jsr       (A4)
000016FC  584F      2249          addq.w    #4,A7
000016FE  2600      2250          move.l    D0,D3
                    2251   ; }
                    2252   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2253   ; if(c == (char)('0'))
00001700  0C02 0030 2254          cmp.b     #48,D2
00001704  660A      2255          bne.s     ChangeRegisters_26
                    2256   ; a0 = reg_val ;
00001706  23C3 0B00 2257          move.l    D3,_a0.L
0000170A  0104      
0000170C  6000 0060 2258          bra       ChangeRegisters_39
                    2259   ChangeRegisters_26:
                    2260   ; else if(c == (char)('1'))
00001710  0C02 0031 2261          cmp.b     #49,D2
00001714  660A      2262          bne.s     ChangeRegisters_28
                    2263   ; a1 = reg_val ;
00001716  23C3 0B00 2264          move.l    D3,_a1.L
0000171A  0108      
0000171C  6000 0050 2265          bra       ChangeRegisters_39
                    2266   ChangeRegisters_28:
                    2267   ; else if(c == (char)('2'))
00001720  0C02 0032 2268          cmp.b     #50,D2
00001724  660A      2269          bne.s     ChangeRegisters_30
                    2270   ; a2 = reg_val ;
00001726  23C3 0B00 2271          move.l    D3,_a2.L
0000172A  010C      
0000172C  6000 0040 2272          bra       ChangeRegisters_39
                    2273   ChangeRegisters_30:
                    2274   ; else if(c == (char)('3'))
00001730  0C02 0033 2275          cmp.b     #51,D2
00001734  6608      2276          bne.s     ChangeRegisters_32
                    2277   ; a3 = reg_val ;
00001736  23C3 0B00 2278          move.l    D3,_a3.L
0000173A  0110      
0000173C  6030      2279          bra.s     ChangeRegisters_39
                    2280   ChangeRegisters_32:
                    2281   ; else if(c == (char)('4'))
0000173E  0C02 0034 2282          cmp.b     #52,D2
00001742  6608      2283          bne.s     ChangeRegisters_34
                    2284   ; a4 = reg_val ;
00001744  23C3 0B00 2285          move.l    D3,_a4.L
00001748  0114      
0000174A  6022      2286          bra.s     ChangeRegisters_39
                    2287   ChangeRegisters_34:
                    2288   ; else if(c == (char)('5'))
0000174C  0C02 0035 2289          cmp.b     #53,D2
00001750  6608      2290          bne.s     ChangeRegisters_36
                    2291   ; a5 = reg_val ;
00001752  23C3 0B00 2292          move.l    D3,_a5.L
00001756  0118      
00001758  6014      2293          bra.s     ChangeRegisters_39
                    2294   ChangeRegisters_36:
                    2295   ; else if(c == (char)('6'))
0000175A  0C02 0036 2296          cmp.b     #54,D2
0000175E  6608      2297          bne.s     ChangeRegisters_38
                    2298   ; a6 = reg_val ;
00001760  23C3 0B00 2299          move.l    D3,_a6.L
00001764  011C      
00001766  6006      2300          bra.s     ChangeRegisters_39
                    2301   ChangeRegisters_38:
                    2302   ; else
                    2303   ; USP = reg_val ;
00001768  23C3 0B00 2304          move.l    D3,_USP.L
0000176C  0128      
                    2305   ChangeRegisters_39:
0000176E  6000 0108 2306          bra       ChangeRegisters_51
                    2307   ChangeRegisters_21:
                    2308   ; }
                    2309   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001772  1013      2310          move.b    (A3),D0
00001774  0C00 0075 2311          cmp.b     #117,D0
00001778  6600 004E 2312          bne       ChangeRegisters_40
0000177C  0C02 0073 2313          cmp.b     #115,D2
00001780  6600 0046 2314          bne       ChangeRegisters_40
                    2315   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001784  2F00      2316          move.l    D0,-(A7)
00001786  4E95      2317          jsr       (A5)
00001788  2200      2318          move.l    D0,D1
0000178A  201F      2319          move.l    (A7)+,D0
0000178C  2F01      2320          move.l    D1,-(A7)
0000178E  4EB9 0000 2321          jsr       _tolower
00001792  3054      
00001794  584F      2322          addq.w    #4,A7
00001796  0C80 0000 2323          cmp.l     #112,D0
0000179A  0070      
0000179C  6618      2324          bne.s     ChangeRegisters_42
                    2325   ; printf("\r\nUser SP = ") ;
0000179E  4879 0000 2326          pea       @m68kde~2_51.L
000017A2  3E8C      
000017A4  4E92      2327          jsr       (A2)
000017A6  584F      2328          addq.w    #4,A7
                    2329   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017A8  42A7      2330          clr.l     -(A7)
000017AA  4E94      2331          jsr       (A4)
000017AC  584F      2332          addq.w    #4,A7
000017AE  23C0 0B00 2333          move.l    D0,_USP.L
000017B2  0128      
000017B4  600E      2334          bra.s     ChangeRegisters_43
                    2335   ChangeRegisters_42:
                    2336   ; }
                    2337   ; else {
                    2338   ; printf("\r\nIllegal Register....") ;
000017B6  4879 0000 2339          pea       @m68kde~2_52.L
000017BA  3E9A      
000017BC  4E92      2340          jsr       (A2)
000017BE  584F      2341          addq.w    #4,A7
                    2342   ; return ;
000017C0  6000 00BA 2343          bra       ChangeRegisters_6
                    2344   ChangeRegisters_43:
000017C4  6000 00B2 2345          bra       ChangeRegisters_51
                    2346   ChangeRegisters_40:
                    2347   ; }
                    2348   ; }
                    2349   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
000017C8  1013      2350          move.b    (A3),D0
000017CA  0C00 0073 2351          cmp.b     #115,D0
000017CE  6600 004E 2352          bne       ChangeRegisters_44
000017D2  0C02 0073 2353          cmp.b     #115,D2
000017D6  6600 0046 2354          bne       ChangeRegisters_44
                    2355   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
000017DA  2F00      2356          move.l    D0,-(A7)
000017DC  4E95      2357          jsr       (A5)
000017DE  2200      2358          move.l    D0,D1
000017E0  201F      2359          move.l    (A7)+,D0
000017E2  2F01      2360          move.l    D1,-(A7)
000017E4  4EB9 0000 2361          jsr       _tolower
000017E8  3054      
000017EA  584F      2362          addq.w    #4,A7
000017EC  0C80 0000 2363          cmp.l     #112,D0
000017F0  0070      
000017F2  6618      2364          bne.s     ChangeRegisters_46
                    2365   ; printf("\r\nSystem SP = ") ;
000017F4  4879 0000 2366          pea       @m68kde~2_53.L
000017F8  3EB2      
000017FA  4E92      2367          jsr       (A2)
000017FC  584F      2368          addq.w    #4,A7
                    2369   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000017FE  42A7      2370          clr.l     -(A7)
00001800  4E94      2371          jsr       (A4)
00001802  584F      2372          addq.w    #4,A7
00001804  23C0 0B00 2373          move.l    D0,_SSP.L
00001808  0124      
0000180A  600E      2374          bra.s     ChangeRegisters_47
                    2375   ChangeRegisters_46:
                    2376   ; }
                    2377   ; else {
                    2378   ; printf("\r\nIllegal Register....") ;
0000180C  4879 0000 2379          pea       @m68kde~2_52.L
00001810  3E9A      
00001812  4E92      2380          jsr       (A2)
00001814  584F      2381          addq.w    #4,A7
                    2382   ; return ;
00001816  6000 0064 2383          bra       ChangeRegisters_6
                    2384   ChangeRegisters_47:
0000181A  6000 005C 2385          bra       ChangeRegisters_51
                    2386   ChangeRegisters_44:
                    2387   ; }
                    2388   ; }
                    2389   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
0000181E  1013      2390          move.b    (A3),D0
00001820  0C00 0070 2391          cmp.b     #112,D0
00001824  6620      2392          bne.s     ChangeRegisters_48
00001826  0C02 0063 2393          cmp.b     #99,D2
0000182A  661A      2394          bne.s     ChangeRegisters_48
                    2395   ; printf("\r\nPC = ") ;
0000182C  4879 0000 2396          pea       @m68kde~2_54.L
00001830  3EC2      
00001832  4E92      2397          jsr       (A2)
00001834  584F      2398          addq.w    #4,A7
                    2399   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001836  42A7      2400          clr.l     -(A7)
00001838  4E94      2401          jsr       (A4)
0000183A  584F      2402          addq.w    #4,A7
0000183C  23C0 0B00 2403          move.l    D0,_PC.L
00001840  0120      
00001842  6000 0034 2404          bra       ChangeRegisters_51
                    2405   ChangeRegisters_48:
                    2406   ; }
                    2407   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001846  1013      2408          move.b    (A3),D0
00001848  0C00 0073 2409          cmp.b     #115,D0
0000184C  6620      2410          bne.s     ChangeRegisters_50
0000184E  0C02 0072 2411          cmp.b     #114,D2
00001852  661A      2412          bne.s     ChangeRegisters_50
                    2413   ; printf("\r\nSR = ") ;
00001854  4879 0000 2414          pea       @m68kde~2_55.L
00001858  3ECA      
0000185A  4E92      2415          jsr       (A2)
0000185C  584F      2416          addq.w    #4,A7
                    2417   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
0000185E  42A7      2418          clr.l     -(A7)
00001860  4EB8 0C58 2419          jsr       _Get4HexDigits
00001864  584F      2420          addq.w    #4,A7
00001866  33C0 0B00 2421          move.w    D0,_SR.L
0000186A  012C      
0000186C  600A      2422          bra.s     ChangeRegisters_51
                    2423   ChangeRegisters_50:
                    2424   ; }
                    2425   ; else
                    2426   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
0000186E  4879 0000 2427          pea       @m68kde~2_56.L
00001872  3ED2      
00001874  4E92      2428          jsr       (A2)
00001876  584F      2429          addq.w    #4,A7
                    2430   ChangeRegisters_51:
                    2431   ; DumpRegisters() ;
00001878  4EB8 10D6 2432          jsr       _DumpRegisters
                    2433   ChangeRegisters_6:
0000187C  4CDF 3C0C 2434          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001880  4E5E      2435          unlk      A6
00001882  4E75      2436          rts
                    2437   ; }
                    2438   ; void BreakPointDisplay(void)
                    2439   ; {
                    2440   _BreakPointDisplay:
00001884  48E7 3030 2441          movem.l   D2/D3/A2/A3,-(A7)
00001888  45F9 0000 2442          lea       _printf.L,A2
0000188C  30D4      
0000188E  47F9 0B00 2443          lea       _BreakPointAddress.L,A3
00001892  012E      
                    2444   ; int i, BreakPointsSet = 0 ;
00001894  4283      2445          clr.l     D3
                    2446   ; // any break points  set
                    2447   ; for(i = 0; i < 8; i++)  {
00001896  4282      2448          clr.l     D2
                    2449   BreakPointDisplay_1:
00001898  0C82 0000 2450          cmp.l     #8,D2
0000189C  0008      
0000189E  6C1C      2451          bge.s     BreakPointDisplay_3
                    2452   ; if(BreakPointSetOrCleared[i] == 1)
000018A0  2002      2453          move.l    D2,D0
000018A2  E588      2454          lsl.l     #2,D0
000018A4  41F9 0B00 2455          lea       _BreakPointSetOrCleared.L,A0
000018A8  015E      
000018AA  2030 0800 2456          move.l    0(A0,D0.L),D0
000018AE  0C80 0000 2457          cmp.l     #1,D0
000018B2  0001      
000018B4  6602      2458          bne.s     BreakPointDisplay_4
                    2459   ; BreakPointsSet = 1;
000018B6  7601      2460          moveq     #1,D3
                    2461   BreakPointDisplay_4:
000018B8  5282      2462          addq.l    #1,D2
000018BA  60DC      2463          bra       BreakPointDisplay_1
                    2464   BreakPointDisplay_3:
                    2465   ; }
                    2466   ; if(BreakPointsSet == 1) {
000018BC  0C83 0000 2467          cmp.l     #1,D3
000018C0  0001      
000018C2  6616      2468          bne.s     BreakPointDisplay_6
                    2469   ; printf("\r\n\r\nNum     Address      Instruction") ;
000018C4  4879 0000 2470          pea       @m68kde~2_57.L
000018C8  3F0E      
000018CA  4E92      2471          jsr       (A2)
000018CC  584F      2472          addq.w    #4,A7
                    2473   ; printf("\r\n---     ---------    -----------") ;
000018CE  4879 0000 2474          pea       @m68kde~2_58.L
000018D2  3F34      
000018D4  4E92      2475          jsr       (A2)
000018D6  584F      2476          addq.w    #4,A7
000018D8  600A      2477          bra.s     BreakPointDisplay_7
                    2478   BreakPointDisplay_6:
                    2479   ; }
                    2480   ; else
                    2481   ; printf("\r\nNo BreakPoints Set") ;
000018DA  4879 0000 2482          pea       @m68kde~2_59.L
000018DE  3F58      
000018E0  4E92      2483          jsr       (A2)
000018E2  584F      2484          addq.w    #4,A7
                    2485   BreakPointDisplay_7:
                    2486   ; for(i = 0; i < 8; i++)  {
000018E4  4282      2487          clr.l     D2
                    2488   BreakPointDisplay_8:
000018E6  0C82 0000 2489          cmp.l     #8,D2
000018EA  0008      
000018EC  6C00 005A 2490          bge       BreakPointDisplay_10
                    2491   ; // put opcode back, then put break point back
                    2492   ; if(BreakPointSetOrCleared[i] == 1)  {
000018F0  2002      2493          move.l    D2,D0
000018F2  E588      2494          lsl.l     #2,D0
000018F4  41F9 0B00 2495          lea       _BreakPointSetOrCleared.L,A0
000018F8  015E      
000018FA  2030 0800 2496          move.l    0(A0,D0.L),D0
000018FE  0C80 0000 2497          cmp.l     #1,D0
00001902  0001      
00001904  6600 003E 2498          bne       BreakPointDisplay_11
                    2499   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001908  2002      2500          move.l    D2,D0
0000190A  E388      2501          lsl.l     #1,D0
0000190C  41F9 0B00 2502          lea       _BreakPointInstruction.L,A0
00001910  014E      
00001912  2202      2503          move.l    D2,D1
00001914  E589      2504          lsl.l     #2,D1
00001916  2233 1800 2505          move.l    0(A3,D1.L),D1
0000191A  2241      2506          move.l    D1,A1
0000191C  32B0 0800 2507          move.w    0(A0,D0.L),(A1)
                    2508   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001920  2002      2509          move.l    D2,D0
00001922  E588      2510          lsl.l     #2,D0
00001924  2033 0800 2511          move.l    0(A3,D0.L),D0
00001928  2040      2512          move.l    D0,A0
0000192A  30BC 4E4E 2513          move.w    #20046,(A0)
                    2514   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
0000192E  2202      2515          move.l    D2,D1
00001930  E589      2516          lsl.l     #2,D1
00001932  2F33 1800 2517          move.l    0(A3,D1.L),-(A7)
00001936  2F02      2518          move.l    D2,-(A7)
00001938  4879 0000 2519          pea       @m68kde~2_60.L
0000193C  3F6E      
0000193E  4E92      2520          jsr       (A2)
00001940  DEFC 000C 2521          add.w     #12,A7
                    2522   BreakPointDisplay_11:
00001944  5282      2523          addq.l    #1,D2
00001946  609E      2524          bra       BreakPointDisplay_8
                    2525   BreakPointDisplay_10:
                    2526   ; }
                    2527   ; }
                    2528   ; printf("\r\n") ;
00001948  4879 0000 2529          pea       @m68kde~2_1.L
0000194C  39E6      
0000194E  4E92      2530          jsr       (A2)
00001950  584F      2531          addq.w    #4,A7
00001952  4CDF 0C0C 2532          movem.l   (A7)+,D2/D3/A2/A3
00001956  4E75      2533          rts
                    2534   ; }
                    2535   ; void WatchPointDisplay(void)
                    2536   ; {
                    2537   _WatchPointDisplay:
00001958  48E7 3020 2538          movem.l   D2/D3/A2,-(A7)
0000195C  45F9 0000 2539          lea       _printf.L,A2
00001960  30D4      
                    2540   ; int i ;
                    2541   ; int WatchPointsSet = 0 ;
00001962  4283      2542          clr.l     D3
                    2543   ; // any watchpoints set
                    2544   ; for(i = 0; i < 8; i++)  {
00001964  4282      2545          clr.l     D2
                    2546   WatchPointDisplay_1:
00001966  0C82 0000 2547          cmp.l     #8,D2
0000196A  0008      
0000196C  6C1C      2548          bge.s     WatchPointDisplay_3
                    2549   ; if(WatchPointSetOrCleared[i] == 1)
0000196E  2002      2550          move.l    D2,D0
00001970  E588      2551          lsl.l     #2,D0
00001972  41F9 0B00 2552          lea       _WatchPointSetOrCleared.L,A0
00001976  01A2      
00001978  2030 0800 2553          move.l    0(A0,D0.L),D0
0000197C  0C80 0000 2554          cmp.l     #1,D0
00001980  0001      
00001982  6602      2555          bne.s     WatchPointDisplay_4
                    2556   ; WatchPointsSet = 1;
00001984  7601      2557          moveq     #1,D3
                    2558   WatchPointDisplay_4:
00001986  5282      2559          addq.l    #1,D2
00001988  60DC      2560          bra       WatchPointDisplay_1
                    2561   WatchPointDisplay_3:
                    2562   ; }
                    2563   ; if(WatchPointsSet == 1) {
0000198A  0C83 0000 2564          cmp.l     #1,D3
0000198E  0001      
00001990  6616      2565          bne.s     WatchPointDisplay_6
                    2566   ; printf("\r\nNum     Address") ;
00001992  4879 0000 2567          pea       @m68kde~2_61.L
00001996  3F7E      
00001998  4E92      2568          jsr       (A2)
0000199A  584F      2569          addq.w    #4,A7
                    2570   ; printf("\r\n---     ---------") ;
0000199C  4879 0000 2571          pea       @m68kde~2_62.L
000019A0  3F90      
000019A2  4E92      2572          jsr       (A2)
000019A4  584F      2573          addq.w    #4,A7
000019A6  600A      2574          bra.s     WatchPointDisplay_7
                    2575   WatchPointDisplay_6:
                    2576   ; }
                    2577   ; else
                    2578   ; printf("\r\nNo WatchPoints Set") ;
000019A8  4879 0000 2579          pea       @m68kde~2_63.L
000019AC  3FA4      
000019AE  4E92      2580          jsr       (A2)
000019B0  584F      2581          addq.w    #4,A7
                    2582   WatchPointDisplay_7:
                    2583   ; for(i = 0; i < 8; i++)  {
000019B2  4282      2584          clr.l     D2
                    2585   WatchPointDisplay_8:
000019B4  0C82 0000 2586          cmp.l     #8,D2
000019B8  0008      
000019BA  6C00 0038 2587          bge       WatchPointDisplay_10
                    2588   ; if(WatchPointSetOrCleared[i] == 1)
000019BE  2002      2589          move.l    D2,D0
000019C0  E588      2590          lsl.l     #2,D0
000019C2  41F9 0B00 2591          lea       _WatchPointSetOrCleared.L,A0
000019C6  01A2      
000019C8  2030 0800 2592          move.l    0(A0,D0.L),D0
000019CC  0C80 0000 2593          cmp.l     #1,D0
000019D0  0001      
000019D2  661C      2594          bne.s     WatchPointDisplay_11
                    2595   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
000019D4  2202      2596          move.l    D2,D1
000019D6  E589      2597          lsl.l     #2,D1
000019D8  41F9 0B00 2598          lea       _WatchPointAddress.L,A0
000019DC  0182      
000019DE  2F30 1800 2599          move.l    0(A0,D1.L),-(A7)
000019E2  2F02      2600          move.l    D2,-(A7)
000019E4  4879 0000 2601          pea       @m68kde~2_60.L
000019E8  3F6E      
000019EA  4E92      2602          jsr       (A2)
000019EC  DEFC 000C 2603          add.w     #12,A7
                    2604   WatchPointDisplay_11:
000019F0  5282      2605          addq.l    #1,D2
000019F2  60C0      2606          bra       WatchPointDisplay_8
                    2607   WatchPointDisplay_10:
                    2608   ; }
                    2609   ; printf("\r\n") ;
000019F4  4879 0000 2610          pea       @m68kde~2_1.L
000019F8  39E6      
000019FA  4E92      2611          jsr       (A2)
000019FC  584F      2612          addq.w    #4,A7
000019FE  4CDF 040C 2613          movem.l   (A7)+,D2/D3/A2
00001A02  4E75      2614          rts
                    2615   ; }
                    2616   ; void BreakPointClear(void)
                    2617   ; {
                    2618   _BreakPointClear:
00001A04  4E56 FFFC 2619          link      A6,#-4
00001A08  48E7 2020 2620          movem.l   D2/A2,-(A7)
00001A0C  45F9 0000 2621          lea       _printf.L,A2
00001A10  30D4      
                    2622   ; unsigned int i ;
                    2623   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2624   ; BreakPointDisplay() ;
00001A12  4EB8 1884 2625          jsr       _BreakPointDisplay
                    2626   ; printf("\r\nEnter Break Point Number: ") ;
00001A16  4879 0000 2627          pea       @m68kde~2_64.L
00001A1A  3FBA      
00001A1C  4E92      2628          jsr       (A2)
00001A1E  584F      2629          addq.w    #4,A7
                    2630   ; i = xtod(_getch()) ;           // get break pointer number
00001A20  2F00      2631          move.l    D0,-(A7)
00001A22  4EB8 0B68 2632          jsr       __getch
00001A26  2200      2633          move.l    D0,D1
00001A28  201F      2634          move.l    (A7)+,D0
00001A2A  2F01      2635          move.l    D1,-(A7)
00001A2C  4EB8 0BD2 2636          jsr       _xtod
00001A30  584F      2637          addq.w    #4,A7
00001A32  C0BC 0000 2638          and.l     #255,D0
00001A36  00FF      
00001A38  2400      2639          move.l    D0,D2
                    2640   ; if((i < 0) || (i > 7))   {
00001A3A  0C82 0000 2641          cmp.l     #0,D2
00001A3E  0000      
00001A40  6508      2642          blo.s     BreakPointClear_3
00001A42  0C82 0000 2643          cmp.l     #7,D2
00001A46  0007      
00001A48  630E      2644          bls.s     BreakPointClear_1
                    2645   BreakPointClear_3:
                    2646   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001A4A  4879 0000 2647          pea       @m68kde~2_65.L
00001A4E  3FD8      
00001A50  4E92      2648          jsr       (A2)
00001A52  584F      2649          addq.w    #4,A7
                    2650   ; return ;
00001A54  6000 0080 2651          bra       BreakPointClear_4
                    2652   BreakPointClear_1:
                    2653   ; }
                    2654   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001A58  2002      2655          move.l    D2,D0
00001A5A  E588      2656          lsl.l     #2,D0
00001A5C  41F9 0B00 2657          lea       _BreakPointSetOrCleared.L,A0
00001A60  015E      
00001A62  2030 0800 2658          move.l    0(A0,D0.L),D0
00001A66  0C80 0000 2659          cmp.l     #1,D0
00001A6A  0001      
00001A6C  6600 005A 2660          bne       BreakPointClear_5
                    2661   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001A70  2002      2662          move.l    D2,D0
00001A72  E588      2663          lsl.l     #2,D0
00001A74  41F9 0B00 2664          lea       _BreakPointAddress.L,A0
00001A78  012E      
00001A7A  2D70 0800 2665          move.l    0(A0,D0.L),-4(A6)
00001A7E  FFFC      
                    2666   ; BreakPointAddress[i] = 0 ;
00001A80  2002      2667          move.l    D2,D0
00001A82  E588      2668          lsl.l     #2,D0
00001A84  41F9 0B00 2669          lea       _BreakPointAddress.L,A0
00001A88  012E      
00001A8A  42B0 0800 2670          clr.l     0(A0,D0.L)
                    2671   ; BreakPointSetOrCleared[i] = 0 ;
00001A8E  2002      2672          move.l    D2,D0
00001A90  E588      2673          lsl.l     #2,D0
00001A92  41F9 0B00 2674          lea       _BreakPointSetOrCleared.L,A0
00001A96  015E      
00001A98  42B0 0800 2675          clr.l     0(A0,D0.L)
                    2676   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001A9C  2002      2677          move.l    D2,D0
00001A9E  E388      2678          lsl.l     #1,D0
00001AA0  41F9 0B00 2679          lea       _BreakPointInstruction.L,A0
00001AA4  014E      
00001AA6  226E FFFC 2680          move.l    -4(A6),A1
00001AAA  32B0 0800 2681          move.w    0(A0,D0.L),(A1)
                    2682   ; BreakPointInstruction[i] = 0 ;
00001AAE  2002      2683          move.l    D2,D0
00001AB0  E388      2684          lsl.l     #1,D0
00001AB2  41F9 0B00 2685          lea       _BreakPointInstruction.L,A0
00001AB6  014E      
00001AB8  4270 0800 2686          clr.w     0(A0,D0.L)
                    2687   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001ABC  4879 0000 2688          pea       @m68kde~2_66.L
00001AC0  3FF4      
00001AC2  4E92      2689          jsr       (A2)
00001AC4  584F      2690          addq.w    #4,A7
00001AC6  600A      2691          bra.s     BreakPointClear_6
                    2692   BreakPointClear_5:
                    2693   ; }
                    2694   ; else
                    2695   ; printf("\r\nBreak Point wasn't Set.....") ;
00001AC8  4879 0000 2696          pea       @m68kde~2_67.L
00001ACC  4012      
00001ACE  4E92      2697          jsr       (A2)
00001AD0  584F      2698          addq.w    #4,A7
                    2699   BreakPointClear_6:
                    2700   ; BreakPointDisplay() ;
00001AD2  4EB8 1884 2701          jsr       _BreakPointDisplay
                    2702   ; return ;
                    2703   BreakPointClear_4:
00001AD6  4CDF 0404 2704          movem.l   (A7)+,D2/A2
00001ADA  4E5E      2705          unlk      A6
00001ADC  4E75      2706          rts
                    2707   ; }
                    2708   ; void WatchPointClear(void)
                    2709   ; {
                    2710   _WatchPointClear:
00001ADE  48E7 2020 2711          movem.l   D2/A2,-(A7)
00001AE2  45F9 0000 2712          lea       _printf.L,A2
00001AE6  30D4      
                    2713   ; unsigned int i ;
                    2714   ; WatchPointDisplay() ;
00001AE8  4EB8 1958 2715          jsr       _WatchPointDisplay
                    2716   ; printf("\r\nEnter Watch Point Number: ") ;
00001AEC  4879 0000 2717          pea       @m68kde~2_68.L
00001AF0  4030      
00001AF2  4E92      2718          jsr       (A2)
00001AF4  584F      2719          addq.w    #4,A7
                    2720   ; i = xtod(_getch()) ;           // get watch pointer number
00001AF6  2F00      2721          move.l    D0,-(A7)
00001AF8  4EB8 0B68 2722          jsr       __getch
00001AFC  2200      2723          move.l    D0,D1
00001AFE  201F      2724          move.l    (A7)+,D0
00001B00  2F01      2725          move.l    D1,-(A7)
00001B02  4EB8 0BD2 2726          jsr       _xtod
00001B06  584F      2727          addq.w    #4,A7
00001B08  C0BC 0000 2728          and.l     #255,D0
00001B0C  00FF      
00001B0E  2400      2729          move.l    D0,D2
                    2730   ; if((i < 0) || (i > 7))   {
00001B10  0C82 0000 2731          cmp.l     #0,D2
00001B14  0000      
00001B16  6508      2732          blo.s     WatchPointClear_3
00001B18  0C82 0000 2733          cmp.l     #7,D2
00001B1C  0007      
00001B1E  630E      2734          bls.s     WatchPointClear_1
                    2735   WatchPointClear_3:
                    2736   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001B20  4879 0000 2737          pea       @m68kde~2_65.L
00001B24  3FD8      
00001B26  4E92      2738          jsr       (A2)
00001B28  584F      2739          addq.w    #4,A7
                    2740   ; return ;
00001B2A  6000 004E 2741          bra       WatchPointClear_4
                    2742   WatchPointClear_1:
                    2743   ; }
                    2744   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001B2E  2002      2745          move.l    D2,D0
00001B30  E588      2746          lsl.l     #2,D0
00001B32  41F9 0B00 2747          lea       _WatchPointSetOrCleared.L,A0
00001B36  01A2      
00001B38  2030 0800 2748          move.l    0(A0,D0.L),D0
00001B3C  0C80 0000 2749          cmp.l     #1,D0
00001B40  0001      
00001B42  6628      2750          bne.s     WatchPointClear_5
                    2751   ; WatchPointAddress[i] = 0 ;
00001B44  2002      2752          move.l    D2,D0
00001B46  E588      2753          lsl.l     #2,D0
00001B48  41F9 0B00 2754          lea       _WatchPointAddress.L,A0
00001B4C  0182      
00001B4E  42B0 0800 2755          clr.l     0(A0,D0.L)
                    2756   ; WatchPointSetOrCleared[i] = 0 ;
00001B52  2002      2757          move.l    D2,D0
00001B54  E588      2758          lsl.l     #2,D0
00001B56  41F9 0B00 2759          lea       _WatchPointSetOrCleared.L,A0
00001B5A  01A2      
00001B5C  42B0 0800 2760          clr.l     0(A0,D0.L)
                    2761   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001B60  4879 0000 2762          pea       @m68kde~2_69.L
00001B64  404E      
00001B66  4E92      2763          jsr       (A2)
00001B68  584F      2764          addq.w    #4,A7
00001B6A  600A      2765          bra.s     WatchPointClear_6
                    2766   WatchPointClear_5:
                    2767   ; }
                    2768   ; else
                    2769   ; printf("\r\nWatch Point Was not Set.....") ;
00001B6C  4879 0000 2770          pea       @m68kde~2_70.L
00001B70  406C      
00001B72  4E92      2771          jsr       (A2)
00001B74  584F      2772          addq.w    #4,A7
                    2773   WatchPointClear_6:
                    2774   ; WatchPointDisplay() ;
00001B76  4EB8 1958 2775          jsr       _WatchPointDisplay
                    2776   ; return ;
                    2777   WatchPointClear_4:
00001B7A  4CDF 0404 2778          movem.l   (A7)+,D2/A2
00001B7E  4E75      2779          rts
                    2780   ; }
                    2781   ; void DisableBreakPoints(void)
                    2782   ; {
                    2783   _DisableBreakPoints:
00001B80  4E56 FFFC 2784          link      A6,#-4
00001B84  2F02      2785          move.l    D2,-(A7)
                    2786   ; int i ;
                    2787   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2788   ; for(i = 0; i < 8; i++)  {
00001B86  4282      2789          clr.l     D2
                    2790   DisableBreakPoints_1:
00001B88  0C82 0000 2791          cmp.l     #8,D2
00001B8C  0008      
00001B8E  6C00 003E 2792          bge       DisableBreakPoints_3
                    2793   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001B92  2002      2794          move.l    D2,D0
00001B94  E588      2795          lsl.l     #2,D0
00001B96  41F9 0B00 2796          lea       _BreakPointSetOrCleared.L,A0
00001B9A  015E      
00001B9C  2030 0800 2797          move.l    0(A0,D0.L),D0
00001BA0  0C80 0000 2798          cmp.l     #1,D0
00001BA4  0001      
00001BA6  6622      2799          bne.s     DisableBreakPoints_4
                    2800   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BA8  2002      2801          move.l    D2,D0
00001BAA  E588      2802          lsl.l     #2,D0
00001BAC  41F9 0B00 2803          lea       _BreakPointAddress.L,A0
00001BB0  012E      
00001BB2  2D70 0800 2804          move.l    0(A0,D0.L),-4(A6)
00001BB6  FFFC      
                    2805   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001BB8  2002      2806          move.l    D2,D0
00001BBA  E388      2807          lsl.l     #1,D0
00001BBC  41F9 0B00 2808          lea       _BreakPointInstruction.L,A0
00001BC0  014E      
00001BC2  226E FFFC 2809          move.l    -4(A6),A1
00001BC6  32B0 0800 2810          move.w    0(A0,D0.L),(A1)
                    2811   DisableBreakPoints_4:
00001BCA  5282      2812          addq.l    #1,D2
00001BCC  60BA      2813          bra       DisableBreakPoints_1
                    2814   DisableBreakPoints_3:
00001BCE  241F      2815          move.l    (A7)+,D2
00001BD0  4E5E      2816          unlk      A6
00001BD2  4E75      2817          rts
                    2818   ; }
                    2819   ; }
                    2820   ; }
                    2821   ; void EnableBreakPoints(void)
                    2822   ; {
                    2823   _EnableBreakPoints:
00001BD4  4E56 FFFC 2824          link      A6,#-4
00001BD8  2F02      2825          move.l    D2,-(A7)
                    2826   ; int i ;
                    2827   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2828   ; for(i = 0; i < 8; i++)  {
00001BDA  4282      2829          clr.l     D2
                    2830   EnableBreakPoints_1:
00001BDC  0C82 0000 2831          cmp.l     #8,D2
00001BE0  0008      
00001BE2  6C32      2832          bge.s     EnableBreakPoints_3
                    2833   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001BE4  2002      2834          move.l    D2,D0
00001BE6  E588      2835          lsl.l     #2,D0
00001BE8  41F9 0B00 2836          lea       _BreakPointSetOrCleared.L,A0
00001BEC  015E      
00001BEE  2030 0800 2837          move.l    0(A0,D0.L),D0
00001BF2  0C80 0000 2838          cmp.l     #1,D0
00001BF6  0001      
00001BF8  6618      2839          bne.s     EnableBreakPoints_4
                    2840   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001BFA  2002      2841          move.l    D2,D0
00001BFC  E588      2842          lsl.l     #2,D0
00001BFE  41F9 0B00 2843          lea       _BreakPointAddress.L,A0
00001C02  012E      
00001C04  2D70 0800 2844          move.l    0(A0,D0.L),-4(A6)
00001C08  FFFC      
                    2845   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001C0A  206E FFFC 2846          move.l    -4(A6),A0
00001C0E  30BC 4E4E 2847          move.w    #20046,(A0)
                    2848   EnableBreakPoints_4:
00001C12  5282      2849          addq.l    #1,D2
00001C14  60C6      2850          bra       EnableBreakPoints_1
                    2851   EnableBreakPoints_3:
00001C16  241F      2852          move.l    (A7)+,D2
00001C18  4E5E      2853          unlk      A6
00001C1A  4E75      2854          rts
                    2855   ; }
                    2856   ; }
                    2857   ; }
                    2858   ; void KillAllBreakPoints(void)
                    2859   ; {
                    2860   _KillAllBreakPoints:
00001C1C  4E56 FFFC 2861          link      A6,#-4
00001C20  2F02      2862          move.l    D2,-(A7)
                    2863   ; int i ;
                    2864   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2865   ; for(i = 0; i < 8; i++)  {
00001C22  4282      2866          clr.l     D2
                    2867   KillAllBreakPoints_1:
00001C24  0C82 0000 2868          cmp.l     #8,D2
00001C28  0008      
00001C2A  6C00 0052 2869          bge       KillAllBreakPoints_3
                    2870   ; // clear BP
                    2871   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001C2E  2002      2872          move.l    D2,D0
00001C30  E588      2873          lsl.l     #2,D0
00001C32  41F9 0B00 2874          lea       _BreakPointAddress.L,A0
00001C36  012E      
00001C38  2D70 0800 2875          move.l    0(A0,D0.L),-4(A6)
00001C3C  FFFC      
                    2876   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001C3E  2002      2877          move.l    D2,D0
00001C40  E388      2878          lsl.l     #1,D0
00001C42  41F9 0B00 2879          lea       _BreakPointInstruction.L,A0
00001C46  014E      
00001C48  226E FFFC 2880          move.l    -4(A6),A1
00001C4C  32B0 0800 2881          move.w    0(A0,D0.L),(A1)
                    2882   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C50  2002      2883          move.l    D2,D0
00001C52  E588      2884          lsl.l     #2,D0
00001C54  41F9 0B00 2885          lea       _BreakPointAddress.L,A0
00001C58  012E      
00001C5A  42B0 0800 2886          clr.l     0(A0,D0.L)
                    2887   ; BreakPointInstruction[i] = 0 ;
00001C5E  2002      2888          move.l    D2,D0
00001C60  E388      2889          lsl.l     #1,D0
00001C62  41F9 0B00 2890          lea       _BreakPointInstruction.L,A0
00001C66  014E      
00001C68  4270 0800 2891          clr.w     0(A0,D0.L)
                    2892   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C6C  2002      2893          move.l    D2,D0
00001C6E  E588      2894          lsl.l     #2,D0
00001C70  41F9 0B00 2895          lea       _BreakPointSetOrCleared.L,A0
00001C74  015E      
00001C76  42B0 0800 2896          clr.l     0(A0,D0.L)
00001C7A  5282      2897          addq.l    #1,D2
00001C7C  60A6      2898          bra       KillAllBreakPoints_1
                    2899   KillAllBreakPoints_3:
00001C7E  241F      2900          move.l    (A7)+,D2
00001C80  4E5E      2901          unlk      A6
00001C82  4E75      2902          rts
                    2903   ; }
                    2904   ; //BreakPointDisplay() ;       // display the break points
                    2905   ; }
                    2906   ; void KillAllWatchPoints(void)
                    2907   ; {
                    2908   _KillAllWatchPoints:
00001C84  2F02      2909          move.l    D2,-(A7)
                    2910   ; int i ;
                    2911   ; for(i = 0; i < 8; i++)  {
00001C86  4282      2912          clr.l     D2
                    2913   KillAllWatchPoints_1:
00001C88  0C82 0000 2914          cmp.l     #8,D2
00001C8C  0008      
00001C8E  6C20      2915          bge.s     KillAllWatchPoints_3
                    2916   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001C90  2002      2917          move.l    D2,D0
00001C92  E588      2918          lsl.l     #2,D0
00001C94  41F9 0B00 2919          lea       _WatchPointAddress.L,A0
00001C98  0182      
00001C9A  42B0 0800 2920          clr.l     0(A0,D0.L)
                    2921   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001C9E  2002      2922          move.l    D2,D0
00001CA0  E588      2923          lsl.l     #2,D0
00001CA2  41F9 0B00 2924          lea       _WatchPointSetOrCleared.L,A0
00001CA6  01A2      
00001CA8  42B0 0800 2925          clr.l     0(A0,D0.L)
00001CAC  5282      2926          addq.l    #1,D2
00001CAE  60D8      2927          bra       KillAllWatchPoints_1
                    2928   KillAllWatchPoints_3:
00001CB0  241F      2929          move.l    (A7)+,D2
00001CB2  4E75      2930          rts
                    2931   ; }
                    2932   ; //WatchPointDisplay() ;       // display the break points
                    2933   ; }
                    2934   ; void SetBreakPoint(void)
                    2935   ; {
                    2936   _SetBreakPoint:
00001CB4  4E56 FFFC 2937          link      A6,#-4
00001CB8  48E7 3830 2938          movem.l   D2/D3/D4/A2/A3,-(A7)
00001CBC  45F9 0000 2939          lea       _printf.L,A2
00001CC0  30D4      
00001CC2  47F9 0B00 2940          lea       _BreakPointSetOrCleared.L,A3
00001CC6  015E      
                    2941   ; int i ;
                    2942   ; int BPNumber;
                    2943   ; int BPAddress;
                    2944   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2945   ; // see if any free break points
                    2946   ; for(i = 0; i < 8; i ++) {
00001CC8  4282      2947          clr.l     D2
                    2948   SetBreakPoint_1:
00001CCA  0C82 0000 2949          cmp.l     #8,D2
00001CCE  0008      
00001CD0  6C10      2950          bge.s     SetBreakPoint_3
                    2951   ; if( BreakPointSetOrCleared[i] == 0)
00001CD2  2002      2952          move.l    D2,D0
00001CD4  E588      2953          lsl.l     #2,D0
00001CD6  2033 0800 2954          move.l    0(A3,D0.L),D0
00001CDA  6602      2955          bne.s     SetBreakPoint_4
                    2956   ; break ;         // if spare BP found allow user to set it
00001CDC  6004      2957          bra.s     SetBreakPoint_3
                    2958   SetBreakPoint_4:
00001CDE  5282      2959          addq.l    #1,D2
00001CE0  60E8      2960          bra       SetBreakPoint_1
                    2961   SetBreakPoint_3:
                    2962   ; }
                    2963   ; if(i == 8) {
00001CE2  0C82 0000 2964          cmp.l     #8,D2
00001CE6  0008      
00001CE8  660E      2965          bne.s     SetBreakPoint_6
                    2966   ; printf("\r\nNo FREE Break Points.....") ;
00001CEA  4879 0000 2967          pea       @m68kde~2_71.L
00001CEE  408C      
00001CF0  4E92      2968          jsr       (A2)
00001CF2  584F      2969          addq.w    #4,A7
                    2970   ; return ;
00001CF4  6000 00D6 2971          bra       SetBreakPoint_15
                    2972   SetBreakPoint_6:
                    2973   ; }
                    2974   ; printf("\r\nBreak Point Address: ") ;
00001CF8  4879 0000 2975          pea       @m68kde~2_72.L
00001CFC  40A8      
00001CFE  4E92      2976          jsr       (A2)
00001D00  584F      2977          addq.w    #4,A7
                    2978   ; BPAddress = Get8HexDigits(0) ;
00001D02  42A7      2979          clr.l     -(A7)
00001D04  4EB8 0CA4 2980          jsr       _Get8HexDigits
00001D08  584F      2981          addq.w    #4,A7
00001D0A  2600      2982          move.l    D0,D3
                    2983   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001D0C  2803      2984          move.l    D3,D4
                    2985   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001D0E  2003      2986          move.l    D3,D0
00001D10  C0BC 0000 2987          and.l     #1,D0
00001D14  0001      
00001D16  0C80 0000 2988          cmp.l     #1,D0
00001D1A  0001      
00001D1C  660E      2989          bne.s     SetBreakPoint_9
                    2990   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001D1E  4879 0000 2991          pea       @m68kde~2_73.L
00001D22  40C0      
00001D24  4E92      2992          jsr       (A2)
00001D26  584F      2993          addq.w    #4,A7
                    2994   ; return ;
00001D28  6000 00A2 2995          bra       SetBreakPoint_15
                    2996   SetBreakPoint_9:
                    2997   ; }
                    2998   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001D2C  0C83 0000 2999          cmp.l     #32768,D3
00001D30  8000      
00001D32  640E      3000          bhs.s     SetBreakPoint_11
                    3001   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00001D34  4879 0000 3002          pea       @m68kde~2_74.L
00001D38  40F6      
00001D3A  4E92      3003          jsr       (A2)
00001D3C  584F      3004          addq.w    #4,A7
                    3005   ; return ;
00001D3E  6000 008C 3006          bra       SetBreakPoint_15
                    3007   SetBreakPoint_11:
                    3008   ; }
                    3009   ; // search for first free bp or existing same BP
                    3010   ; for(i = 0; i < 8; i++)  {
00001D42  4282      3011          clr.l     D2
                    3012   SetBreakPoint_13:
00001D44  0C82 0000 3013          cmp.l     #8,D2
00001D48  0008      
00001D4A  6C00 0080 3014          bge       SetBreakPoint_15
                    3015   ; if(BreakPointAddress[i] == BPAddress)   {
00001D4E  2002      3016          move.l    D2,D0
00001D50  E588      3017          lsl.l     #2,D0
00001D52  41F9 0B00 3018          lea       _BreakPointAddress.L,A0
00001D56  012E      
00001D58  B6B0 0800 3019          cmp.l     0(A0,D0.L),D3
00001D5C  6610      3020          bne.s     SetBreakPoint_16
                    3021   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00001D5E  2F03      3022          move.l    D3,-(A7)
00001D60  4879 0000 3023          pea       @m68kde~2_75.L
00001D64  413E      
00001D66  4E92      3024          jsr       (A2)
00001D68  504F      3025          addq.w    #8,A7
                    3026   ; return ;
00001D6A  6000 0060 3027          bra       SetBreakPoint_15
                    3028   SetBreakPoint_16:
                    3029   ; }
                    3030   ; if(BreakPointSetOrCleared[i] == 0) {
00001D6E  2002      3031          move.l    D2,D0
00001D70  E588      3032          lsl.l     #2,D0
00001D72  2033 0800 3033          move.l    0(A3,D0.L),D0
00001D76  6600 004E 3034          bne       SetBreakPoint_18
                    3035   ; // set BP here
                    3036   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
00001D7A  2002      3037          move.l    D2,D0
00001D7C  E588      3038          lsl.l     #2,D0
00001D7E  27BC 0000 3039          move.l    #1,0(A3,D0.L)
00001D82  0001 0800 
                    3040   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00001D86  2044      3041          move.l    D4,A0
00001D88  2002      3042          move.l    D2,D0
00001D8A  E388      3043          lsl.l     #1,D0
00001D8C  43F9 0B00 3044          lea       _BreakPointInstruction.L,A1
00001D90  014E      
00001D92  3390 0800 3045          move.w    (A0),0(A1,D0.L)
                    3046   ; printf("\r\nBreak Point Set at Address: [$%08x]", ProgramBreakPointAddress) ;
00001D96  2F04      3047          move.l    D4,-(A7)
00001D98  4879 0000 3048          pea       @m68kde~2_76.L
00001D9C  4176      
00001D9E  4E92      3049          jsr       (A2)
00001DA0  504F      3050          addq.w    #8,A7
                    3051   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
00001DA2  2044      3052          move.l    D4,A0
00001DA4  30BC 4E4E 3053          move.w    #20046,(A0)
                    3054   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00001DA8  2002      3055          move.l    D2,D0
00001DAA  E588      3056          lsl.l     #2,D0
00001DAC  41F9 0B00 3057          lea       _BreakPointAddress.L,A0
00001DB0  012E      
00001DB2  2183 0800 3058          move.l    D3,0(A0,D0.L)
                    3059   ; printf("\r\n") ;
00001DB6  4879 0000 3060          pea       @m68kde~2_1.L
00001DBA  39E6      
00001DBC  4E92      3061          jsr       (A2)
00001DBE  584F      3062          addq.w    #4,A7
                    3063   ; BreakPointDisplay() ;       // display the break points
00001DC0  4EB8 1884 3064          jsr       _BreakPointDisplay
                    3065   ; return ;
00001DC4  6006      3066          bra.s     SetBreakPoint_15
                    3067   SetBreakPoint_18:
00001DC6  5282      3068          addq.l    #1,D2
00001DC8  6000 FF7A 3069          bra       SetBreakPoint_13
                    3070   SetBreakPoint_15:
00001DCC  4CDF 0C1C 3071          movem.l   (A7)+,D2/D3/D4/A2/A3
00001DD0  4E5E      3072          unlk      A6
00001DD2  4E75      3073          rts
                    3074   ; }
                    3075   ; }
                    3076   ; }
                    3077   ; void SetWatchPoint(void)
                    3078   ; {
                    3079   _SetWatchPoint:
00001DD4  4E56 FFF8 3080          link      A6,#-8
00001DD8  48E7 3030 3081          movem.l   D2/D3/A2/A3,-(A7)
00001DDC  45F9 0000 3082          lea       _printf.L,A2
00001DE0  30D4      
00001DE2  47F9 0B00 3083          lea       _WatchPointSetOrCleared.L,A3
00001DE6  01A2      
                    3084   ; int i ;
                    3085   ; int WPNumber;
                    3086   ; int WPAddress;
                    3087   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3088   ; // see if any free break points
                    3089   ; for(i = 0; i < 8; i ++) {
00001DE8  4282      3090          clr.l     D2
                    3091   SetWatchPoint_1:
00001DEA  0C82 0000 3092          cmp.l     #8,D2
00001DEE  0008      
00001DF0  6C10      3093          bge.s     SetWatchPoint_3
                    3094   ; if( WatchPointSetOrCleared[i] == 0)
00001DF2  2002      3095          move.l    D2,D0
00001DF4  E588      3096          lsl.l     #2,D0
00001DF6  2033 0800 3097          move.l    0(A3,D0.L),D0
00001DFA  6602      3098          bne.s     SetWatchPoint_4
                    3099   ; break ;         // if spare WP found allow user to set it
00001DFC  6004      3100          bra.s     SetWatchPoint_3
                    3101   SetWatchPoint_4:
00001DFE  5282      3102          addq.l    #1,D2
00001E00  60E8      3103          bra       SetWatchPoint_1
                    3104   SetWatchPoint_3:
                    3105   ; }
                    3106   ; if(i == 8) {
00001E02  0C82 0000 3107          cmp.l     #8,D2
00001E06  0008      
00001E08  660E      3108          bne.s     SetWatchPoint_6
                    3109   ; printf("\r\nNo FREE Watch Points.....") ;
00001E0A  4879 0000 3110          pea       @m68kde~2_77.L
00001E0E  419C      
00001E10  4E92      3111          jsr       (A2)
00001E12  584F      3112          addq.w    #4,A7
                    3113   ; return ;
00001E14  6000 008C 3114          bra       SetWatchPoint_11
                    3115   SetWatchPoint_6:
                    3116   ; }
                    3117   ; printf("\r\nWatch Point Address: ") ;
00001E18  4879 0000 3118          pea       @m68kde~2_78.L
00001E1C  41B8      
00001E1E  4E92      3119          jsr       (A2)
00001E20  584F      3120          addq.w    #4,A7
                    3121   ; WPAddress = Get8HexDigits(0) ;
00001E22  42A7      3122          clr.l     -(A7)
00001E24  4EB8 0CA4 3123          jsr       _Get8HexDigits
00001E28  584F      3124          addq.w    #4,A7
00001E2A  2600      3125          move.l    D0,D3
                    3126   ; // search for first free wp or existing same wp
                    3127   ; for(i = 0; i < 8; i++)  {
00001E2C  4282      3128          clr.l     D2
                    3129   SetWatchPoint_9:
00001E2E  0C82 0000 3130          cmp.l     #8,D2
00001E32  0008      
00001E34  6C00 006C 3131          bge       SetWatchPoint_11
                    3132   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00001E38  2002      3133          move.l    D2,D0
00001E3A  E588      3134          lsl.l     #2,D0
00001E3C  41F9 0B00 3135          lea       _WatchPointAddress.L,A0
00001E40  0182      
00001E42  B6B0 0800 3136          cmp.l     0(A0,D0.L),D3
00001E46  6614      3137          bne.s     SetWatchPoint_12
00001E48  4A83      3138          tst.l     D3
00001E4A  6710      3139          beq.s     SetWatchPoint_12
                    3140   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00001E4C  2F03      3141          move.l    D3,-(A7)
00001E4E  4879 0000 3142          pea       @m68kde~2_79.L
00001E52  41D0      
00001E54  4E92      3143          jsr       (A2)
00001E56  504F      3144          addq.w    #8,A7
                    3145   ; return ;
00001E58  6000 0048 3146          bra       SetWatchPoint_11
                    3147   SetWatchPoint_12:
                    3148   ; }
                    3149   ; if(WatchPointSetOrCleared[i] == 0) {
00001E5C  2002      3150          move.l    D2,D0
00001E5E  E588      3151          lsl.l     #2,D0
00001E60  2033 0800 3152          move.l    0(A3,D0.L),D0
00001E64  6600 0038 3153          bne       SetWatchPoint_14
                    3154   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00001E68  2002      3155          move.l    D2,D0
00001E6A  E588      3156          lsl.l     #2,D0
00001E6C  27BC 0000 3157          move.l    #1,0(A3,D0.L)
00001E70  0001 0800 
                    3158   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
00001E74  2F03      3159          move.l    D3,-(A7)
00001E76  4879 0000 3160          pea       @m68kde~2_80.L
00001E7A  4206      
00001E7C  4E92      3161          jsr       (A2)
00001E7E  504F      3162          addq.w    #8,A7
                    3163   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00001E80  2002      3164          move.l    D2,D0
00001E82  E588      3165          lsl.l     #2,D0
00001E84  41F9 0B00 3166          lea       _WatchPointAddress.L,A0
00001E88  0182      
00001E8A  2183 0800 3167          move.l    D3,0(A0,D0.L)
                    3168   ; printf("\r\n") ;
00001E8E  4879 0000 3169          pea       @m68kde~2_1.L
00001E92  39E6      
00001E94  4E92      3170          jsr       (A2)
00001E96  584F      3171          addq.w    #4,A7
                    3172   ; WatchPointDisplay() ;       // display the break points
00001E98  4EB8 1958 3173          jsr       _WatchPointDisplay
                    3174   ; return ;
00001E9C  6004      3175          bra.s     SetWatchPoint_11
                    3176   SetWatchPoint_14:
00001E9E  5282      3177          addq.l    #1,D2
00001EA0  608C      3178          bra       SetWatchPoint_9
                    3179   SetWatchPoint_11:
00001EA2  4CDF 0C0C 3180          movem.l   (A7)+,D2/D3/A2/A3
00001EA6  4E5E      3181          unlk      A6
00001EA8  4E75      3182          rts
                    3183   ; }
                    3184   ; }
                    3185   ; }
                    3186   ; void HandleBreakPoint(void)
                    3187   ; {
                    3188   _HandleBreakPoint:
00001EAA  4E56 FFFC 3189          link      A6,#-4
00001EAE  48E7 0038 3190          movem.l   A2/A3/A4,-(A7)
00001EB2  45F9 0B00 3191          lea       _i.L,A2
00001EB6  00C4      
00001EB8  47F9 0000 3192          lea       _printf.L,A3
00001EBC  30D4      
00001EBE  49F9 0B00 3193          lea       _PC.L,A4
00001EC2  0120      
                    3194   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3195   ; // now we have to put the break point back to run the instruction
                    3196   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3197   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
00001EC4  5594      3198          subq.l    #2,(A4)
                    3199   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
00001EC6  4879 0000 3200          pea       @m68kde~2_81.L
00001ECA  422C      
00001ECC  4E93      3201          jsr       (A3)
00001ECE  584F      3202          addq.w    #4,A7
                    3203   ; printf("\r\nSingle Step : [ON]") ;
00001ED0  4879 0000 3204          pea       @m68kde~2_82.L
00001ED4  4240      
00001ED6  4E93      3205          jsr       (A3)
00001ED8  584F      3206          addq.w    #4,A7
                    3207   ; printf("\r\nBreakPoints : [Enabled]") ;
00001EDA  4879 0000 3208          pea       @m68kde~2_83.L
00001EDE  4256      
00001EE0  4E93      3209          jsr       (A3)
00001EE2  584F      3210          addq.w    #4,A7
                    3211   ; // now clear the break point (put original instruction back)
                    3212   ; ProgramBreakPointAddress = PC ;
00001EE4  2D54 FFFC 3213          move.l    (A4),-4(A6)
                    3214   ; for(i = 0; i < 8; i ++) {
00001EE8  4292      3215          clr.l     (A2)
                    3216   HandleBreakPoint_1:
00001EEA  2012      3217          move.l    (A2),D0
00001EEC  0C80 0000 3218          cmp.l     #8,D0
00001EF0  0008      
00001EF2  6400 0056 3219          bhs       HandleBreakPoint_3
                    3220   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
00001EF6  2012      3221          move.l    (A2),D0
00001EF8  E588      3222          lsl.l     #2,D0
00001EFA  41F9 0B00 3223          lea       _BreakPointAddress.L,A0
00001EFE  012E      
00001F00  2230 0800 3224          move.l    0(A0,D0.L),D1
00001F04  B294      3225          cmp.l     (A4),D1
00001F06  6600 003E 3226          bne       HandleBreakPoint_4
                    3227   ; BreakPointAddress[i] = 0 ;
00001F0A  2012      3228          move.l    (A2),D0
00001F0C  E588      3229          lsl.l     #2,D0
00001F0E  41F9 0B00 3230          lea       _BreakPointAddress.L,A0
00001F12  012E      
00001F14  42B0 0800 3231          clr.l     0(A0,D0.L)
                    3232   ; BreakPointSetOrCleared[i] = 0 ;
00001F18  2012      3233          move.l    (A2),D0
00001F1A  E588      3234          lsl.l     #2,D0
00001F1C  41F9 0B00 3235          lea       _BreakPointSetOrCleared.L,A0
00001F20  015E      
00001F22  42B0 0800 3236          clr.l     0(A0,D0.L)
                    3237   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001F26  2012      3238          move.l    (A2),D0
00001F28  E388      3239          lsl.l     #1,D0
00001F2A  41F9 0B00 3240          lea       _BreakPointInstruction.L,A0
00001F2E  014E      
00001F30  226E FFFC 3241          move.l    -4(A6),A1
00001F34  32B0 0800 3242          move.w    0(A0,D0.L),(A1)
                    3243   ; BreakPointInstruction[i] = 0 ;
00001F38  2012      3244          move.l    (A2),D0
00001F3A  E388      3245          lsl.l     #1,D0
00001F3C  41F9 0B00 3246          lea       _BreakPointInstruction.L,A0
00001F40  014E      
00001F42  4270 0800 3247          clr.w     0(A0,D0.L)
                    3248   HandleBreakPoint_4:
00001F46  5292      3249          addq.l    #1,(A2)
00001F48  60A0      3250          bra       HandleBreakPoint_1
                    3251   HandleBreakPoint_3:
                    3252   ; }
                    3253   ; }
                    3254   ; DumpRegisters() ;
00001F4A  4EB8 10D6 3255          jsr       _DumpRegisters
                    3256   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001F4E  4879 0000 3257          pea       @m68kde~2_45.L
00001F52  3DD2      
00001F54  4E93      3258          jsr       (A3)
00001F56  584F      3259          addq.w    #4,A7
                    3260   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00001F58  4879 0000 3261          pea       @m68kde~2_84.L
00001F5C  4270      
00001F5E  4E93      3262          jsr       (A3)
00001F60  584F      3263          addq.w    #4,A7
                    3264   ; menu() ;
00001F62  4EB9 0000 3265          jsr       _menu
00001F66  216E      
00001F68  4CDF 1C00 3266          movem.l   (A7)+,A2/A3/A4
00001F6C  4E5E      3267          unlk      A6
00001F6E  4E75      3268          rts
                    3269   ; }
                    3270   ; void UnknownCommand()
                    3271   ; {
                    3272   _UnknownCommand:
                    3273   ; printf("\r\nUnknown Command.....\r\n") ;
00001F70  4879 0000 3274          pea       @m68kde~2_85.L
00001F74  4298      
00001F76  4EB9 0000 3275          jsr       _printf
00001F7A  30D4      
00001F7C  584F      3276          addq.w    #4,A7
                    3277   ; Help() ;
00001F7E  4EB9 0000 3278          jsr       _Help
00001F82  2094      
00001F84  4E75      3279          rts
                    3280   ; }
                    3281   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3282   ; void CallDebugMonitor(void)
                    3283   ; {
                    3284   _CallDebugMonitor:
                    3285   ; printf("\r\nProgram Ended (TRAP #15)....") ;
00001F86  4879 0000 3286          pea       @m68kde~2_86.L
00001F8A  42B2      
00001F8C  4EB9 0000 3287          jsr       _printf
00001F90  30D4      
00001F92  584F      3288          addq.w    #4,A7
                    3289   ; menu();
00001F94  4EB9 0000 3290          jsr       _menu
00001F98  216E      
00001F9A  4E75      3291          rts
                    3292   ; }
                    3293   ; void Breakpoint(void)
                    3294   ; {
                    3295   _Breakpoint:
00001F9C  2F02      3296          move.l    D2,-(A7)
                    3297   ; char c;
                    3298   ; c = toupper(_getch());
00001F9E  2F00      3299          move.l    D0,-(A7)
00001FA0  4EB8 0B68 3300          jsr       __getch
00001FA4  2200      3301          move.l    D0,D1
00001FA6  201F      3302          move.l    (A7)+,D0
00001FA8  2F01      3303          move.l    D1,-(A7)
00001FAA  4EB9 0000 3304          jsr       _toupper
00001FAE  30B8      
00001FB0  584F      3305          addq.w    #4,A7
00001FB2  1400      3306          move.b    D0,D2
                    3307   ; if( c == (char)('D'))                                      // BreakPoint Display
00001FB4  0C02 0044 3308          cmp.b     #68,D2
00001FB8  6608      3309          bne.s     Breakpoint_1
                    3310   ; BreakPointDisplay() ;
00001FBA  4EB8 1884 3311          jsr       _BreakPointDisplay
00001FBE  6000 0054 3312          bra       Breakpoint_10
                    3313   Breakpoint_1:
                    3314   ; else if(c == (char)('K')) {                                 // breakpoint Kill
00001FC2  0C02 004B 3315          cmp.b     #75,D2
00001FC6  6630      3316          bne.s     Breakpoint_3
                    3317   ; printf("\r\nKill All Break Points...(y/n)?") ;
00001FC8  4879 0000 3318          pea       @m68kde~2_87.L
00001FCC  42D2      
00001FCE  4EB9 0000 3319          jsr       _printf
00001FD2  30D4      
00001FD4  584F      3320          addq.w    #4,A7
                    3321   ; c = toupper(_getch());
00001FD6  2F00      3322          move.l    D0,-(A7)
00001FD8  4EB8 0B68 3323          jsr       __getch
00001FDC  2200      3324          move.l    D0,D1
00001FDE  201F      3325          move.l    (A7)+,D0
00001FE0  2F01      3326          move.l    D1,-(A7)
00001FE2  4EB9 0000 3327          jsr       _toupper
00001FE6  30B8      
00001FE8  584F      3328          addq.w    #4,A7
00001FEA  1400      3329          move.b    D0,D2
                    3330   ; if(c == (char)('Y'))
00001FEC  0C02 0059 3331          cmp.b     #89,D2
00001FF0  6604      3332          bne.s     Breakpoint_5
                    3333   ; KillAllBreakPoints() ;
00001FF2  4EB8 1C1C 3334          jsr       _KillAllBreakPoints
                    3335   Breakpoint_5:
00001FF6  601C      3336          bra.s     Breakpoint_10
                    3337   Breakpoint_3:
                    3338   ; }
                    3339   ; else if(c == (char)('S')) {
00001FF8  0C02 0053 3340          cmp.b     #83,D2
00001FFC  6606      3341          bne.s     Breakpoint_7
                    3342   ; SetBreakPoint() ;
00001FFE  4EB8 1CB4 3343          jsr       _SetBreakPoint
00002002  6010      3344          bra.s     Breakpoint_10
                    3345   Breakpoint_7:
                    3346   ; }
                    3347   ; else if(c == (char)('C')) {
00002004  0C02 0043 3348          cmp.b     #67,D2
00002008  6606      3349          bne.s     Breakpoint_9
                    3350   ; BreakPointClear() ;
0000200A  4EB8 1A04 3351          jsr       _BreakPointClear
0000200E  6004      3352          bra.s     Breakpoint_10
                    3353   Breakpoint_9:
                    3354   ; }
                    3355   ; else
                    3356   ; UnknownCommand() ;
00002010  4EB8 1F70 3357          jsr       _UnknownCommand
                    3358   Breakpoint_10:
00002014  241F      3359          move.l    (A7)+,D2
00002016  4E75      3360          rts
                    3361   ; }
                    3362   ; void Watchpoint(void)
                    3363   ; {
                    3364   _Watchpoint:
00002018  2F02      3365          move.l    D2,-(A7)
                    3366   ; char c;
                    3367   ; c = toupper(_getch());
0000201A  2F00      3368          move.l    D0,-(A7)
0000201C  4EB8 0B68 3369          jsr       __getch
00002020  2200      3370          move.l    D0,D1
00002022  201F      3371          move.l    (A7)+,D0
00002024  2F01      3372          move.l    D1,-(A7)
00002026  4EB9 0000 3373          jsr       _toupper
0000202A  30B8      
0000202C  584F      3374          addq.w    #4,A7
0000202E  1400      3375          move.b    D0,D2
                    3376   ; if( c == (char)('D'))                                      // WatchPoint Display
00002030  0C02 0044 3377          cmp.b     #68,D2
00002034  6608      3378          bne.s     Watchpoint_1
                    3379   ; WatchPointDisplay() ;
00002036  4EB8 1958 3380          jsr       _WatchPointDisplay
0000203A  6000 0054 3381          bra       Watchpoint_10
                    3382   Watchpoint_1:
                    3383   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
0000203E  0C02 004B 3384          cmp.b     #75,D2
00002042  6630      3385          bne.s     Watchpoint_3
                    3386   ; printf("\r\nKill All Watch Points...(y/n)?") ;
00002044  4879 0000 3387          pea       @m68kde~2_88.L
00002048  42F4      
0000204A  4EB9 0000 3388          jsr       _printf
0000204E  30D4      
00002050  584F      3389          addq.w    #4,A7
                    3390   ; c = toupper(_getch());
00002052  2F00      3391          move.l    D0,-(A7)
00002054  4EB8 0B68 3392          jsr       __getch
00002058  2200      3393          move.l    D0,D1
0000205A  201F      3394          move.l    (A7)+,D0
0000205C  2F01      3395          move.l    D1,-(A7)
0000205E  4EB9 0000 3396          jsr       _toupper
00002062  30B8      
00002064  584F      3397          addq.w    #4,A7
00002066  1400      3398          move.b    D0,D2
                    3399   ; if(c == (char)('Y'))
00002068  0C02 0059 3400          cmp.b     #89,D2
0000206C  6604      3401          bne.s     Watchpoint_5
                    3402   ; KillAllWatchPoints() ;
0000206E  4EB8 1C84 3403          jsr       _KillAllWatchPoints
                    3404   Watchpoint_5:
00002072  601C      3405          bra.s     Watchpoint_10
                    3406   Watchpoint_3:
                    3407   ; }
                    3408   ; else if(c == (char)('S')) {
00002074  0C02 0053 3409          cmp.b     #83,D2
00002078  6606      3410          bne.s     Watchpoint_7
                    3411   ; SetWatchPoint() ;
0000207A  4EB8 1DD4 3412          jsr       _SetWatchPoint
0000207E  6010      3413          bra.s     Watchpoint_10
                    3414   Watchpoint_7:
                    3415   ; }
                    3416   ; else if(c == (char)('C')) {
00002080  0C02 0043 3417          cmp.b     #67,D2
00002084  6606      3418          bne.s     Watchpoint_9
                    3419   ; WatchPointClear() ;
00002086  4EB8 1ADE 3420          jsr       _WatchPointClear
0000208A  6004      3421          bra.s     Watchpoint_10
                    3422   Watchpoint_9:
                    3423   ; }
                    3424   ; else
                    3425   ; UnknownCommand() ;
0000208C  4EB8 1F70 3426          jsr       _UnknownCommand
                    3427   Watchpoint_10:
00002090  241F      3428          move.l    (A7)+,D2
00002092  4E75      3429          rts
                    3430   ; }
                    3431   ; void Help(void)
                    3432   ; {
                    3433   _Help:
00002094  48E7 2020 3434          movem.l   D2/A2,-(A7)
00002098  45F9 0000 3435          lea       _printf.L,A2
0000209C  30D4      
                    3436   ; char *banner = "\r\n----------------------------------------------------------------" ;
0000209E  41F9 0000 3437          lea       @m68kde~2_89.L,A0
000020A2  4316      
000020A4  2408      3438          move.l    A0,D2
                    3439   ; printf(banner) ;
000020A6  2F02      3440          move.l    D2,-(A7)
000020A8  4E92      3441          jsr       (A2)
000020AA  584F      3442          addq.w    #4,A7
                    3443   ; printf("\r\n  Debugger Command Summary") ;
000020AC  4879 0000 3444          pea       @m68kde~2_90.L
000020B0  435A      
000020B2  4E92      3445          jsr       (A2)
000020B4  584F      3446          addq.w    #4,A7
                    3447   ; printf(banner) ;
000020B6  2F02      3448          move.l    D2,-(A7)
000020B8  4E92      3449          jsr       (A2)
000020BA  584F      3450          addq.w    #4,A7
                    3451   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000020BC  4879 0000 3452          pea       @m68kde~2_91.L
000020C0  4378      
000020C2  4E92      3453          jsr       (A2)
000020C4  584F      3454          addq.w    #4,A7
                    3455   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000020C6  4879 0000 3456          pea       @m68kde~2_92.L
000020CA  43BC      
000020CC  4E92      3457          jsr       (A2)
000020CE  584F      3458          addq.w    #4,A7
                    3459   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000020D0  4879 0000 3460          pea       @m68kde~2_93.L
000020D4  43F4      
000020D6  4E92      3461          jsr       (A2)
000020D8  584F      3462          addq.w    #4,A7
                    3463   ; printf("\r\n  D            - Dump Memory Contents to Screen") ;
000020DA  4879 0000 3464          pea       @m68kde~2_94.L
000020DE  442E      
000020E0  4E92      3465          jsr       (A2)
000020E2  584F      3466          addq.w    #4,A7
                    3467   ; printf("\r\n  E            - Enter String into Memory") ;
000020E4  4879 0000 3468          pea       @m68kde~2_95.L
000020E8  4460      
000020EA  4E92      3469          jsr       (A2)
000020EC  584F      3470          addq.w    #4,A7
                    3471   ; printf("\r\n  F            - Fill Memory with Data") ;
000020EE  4879 0000 3472          pea       @m68kde~2_96.L
000020F2  448C      
000020F4  4E92      3473          jsr       (A2)
000020F6  584F      3474          addq.w    #4,A7
                    3475   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
000020F8  2F39 0B00 3476          move.l    _PC.L,-(A7)
000020FC  0120      
000020FE  4879 0000 3477          pea       @m68kde~2_97.L
00002102  44B6      
00002104  4E92      3478          jsr       (A2)
00002106  504F      3479          addq.w    #8,A7
                    3480   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
00002108  4879 0000 3481          pea       @m68kde~2_98.L
0000210C  44F0      
0000210E  4E92      3482          jsr       (A2)
00002110  584F      3483          addq.w    #4,A7
                    3484   ; printf("\r\n  M            - Memory Examine and Change");
00002112  4879 0000 3485          pea       @m68kde~2_99.L
00002116  4528      
00002118  4E92      3486          jsr       (A2)
0000211A  584F      3487          addq.w    #4,A7
                    3488   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000211C  4879 0000 3489          pea       @m68kde~2_100.L
00002120  4556      
00002122  4E92      3490          jsr       (A2)
00002124  584F      3491          addq.w    #4,A7
                    3492   ; printf("\r\n  R            - Display 68000 Registers") ;
00002126  4879 0000 3493          pea       @m68kde~2_101.L
0000212A  4590      
0000212C  4E92      3494          jsr       (A2)
0000212E  584F      3495          addq.w    #4,A7
                    3496   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002130  4879 0000 3497          pea       @m68kde~2_102.L
00002134  45BC      
00002136  4E92      3498          jsr       (A2)
00002138  584F      3499          addq.w    #4,A7
                    3500   ; printf("\r\n  TM           - Test Memory") ;
0000213A  4879 0000 3501          pea       @m68kde~2_103.L
0000213E  45EE      
00002140  4E92      3502          jsr       (A2)
00002142  584F      3503          addq.w    #4,A7
                    3504   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002144  4879 0000 3505          pea       @m68kde~2_104.L
00002148  460E      
0000214A  4E92      3506          jsr       (A2)
0000214C  584F      3507          addq.w    #4,A7
                    3508   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
0000214E  4879 0000 3509          pea       @m68kde~2_105.L
00002152  4636      
00002154  4E92      3510          jsr       (A2)
00002156  584F      3511          addq.w    #4,A7
                    3512   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
00002158  4879 0000 3513          pea       @m68kde~2_106.L
0000215C  466C      
0000215E  4E92      3514          jsr       (A2)
00002160  584F      3515          addq.w    #4,A7
                    3516   ; printf(banner) ;
00002162  2F02      3517          move.l    D2,-(A7)
00002164  4E92      3518          jsr       (A2)
00002166  584F      3519          addq.w    #4,A7
00002168  4CDF 0404 3520          movem.l   (A7)+,D2/A2
0000216C  4E75      3521          rts
                    3522   ; }
                    3523   ; void menu(void)
                    3524   ; {
                    3525   _menu:
0000216E  48E7 303C 3526          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
00002172  45F9 0000 3527          lea       _printf.L,A2
00002176  30D4      
00002178  47F9 0B00 3528          lea       _Trace.L,A3
0000217C  00D8      
0000217E  49F9 0B00 3529          lea       _x.L,A4
00002182  00C8      
00002184  4BF9 0B00 3530          lea       _SR.L,A5
00002188  012C      
                    3531   ; char c,c1 ;
                    3532   ; while(1)    {
                    3533   menu_1:
                    3534   ; FlushKeyboard() ;               // dump unread characters from keyboard
0000218A  4EB8 0BA6 3535          jsr       _FlushKeyboard
                    3536   ; printf("\r\n#") ;
0000218E  4879 0000 3537          pea       @m68kde~2_107.L
00002192  46A4      
00002194  4E92      3538          jsr       (A2)
00002196  584F      3539          addq.w    #4,A7
                    3540   ; c = toupper(_getch());
00002198  2F00      3541          move.l    D0,-(A7)
0000219A  4EB8 0B68 3542          jsr       __getch
0000219E  2200      3543          move.l    D0,D1
000021A0  201F      3544          move.l    (A7)+,D0
000021A2  2F01      3545          move.l    D1,-(A7)
000021A4  4EB9 0000 3546          jsr       _toupper
000021A8  30B8      
000021AA  584F      3547          addq.w    #4,A7
000021AC  1400      3548          move.b    D0,D2
                    3549   ; if( c == (char)('L'))                  // load s record file
000021AE  0C02 004C 3550          cmp.b     #76,D2
000021B2  6608      3551          bne.s     menu_4
                    3552   ; Load_SRecordFile() ;
000021B4  4EB8 0E36 3553          jsr       _Load_SRecordFile
000021B8  6000 021E 3554          bra       menu_46
                    3555   menu_4:
                    3556   ; else if( c == (char)('D'))             // dump memory
000021BC  0C02 0044 3557          cmp.b     #68,D2
000021C0  6608      3558          bne.s     menu_6
                    3559   ; DumpMemory() ;
000021C2  4EB8 0CCC 3560          jsr       _DumpMemory
000021C6  6000 0210 3561          bra       menu_46
                    3562   menu_6:
                    3563   ; else if( c == (char)('E'))             // Enter String into memory
000021CA  0C02 0045 3564          cmp.b     #69,D2
000021CE  660A      3565          bne.s     menu_8
                    3566   ; EnterString() ;
000021D0  4EB9 0000 3567          jsr       _EnterString
000021D4  2520      
000021D6  6000 0200 3568          bra       menu_46
                    3569   menu_8:
                    3570   ; else if( c == (char)('F'))             // fill memory
000021DA  0C02 0046 3571          cmp.b     #70,D2
000021DE  6608      3572          bne.s     menu_10
                    3573   ; FillMemory() ;
000021E0  4EB8 0DBC 3574          jsr       _FillMemory
000021E4  6000 01F2 3575          bra       menu_46
                    3576   menu_10:
                    3577   ; else if( c == (char)('G'))  {           // go user program
000021E8  0C02 0047 3578          cmp.b     #71,D2
000021EC  6626      3579          bne.s     menu_12
                    3580   ; printf("\r\nProgram Running.....") ;
000021EE  4879 0000 3581          pea       @m68kde~2_108.L
000021F2  46A8      
000021F4  4E92      3582          jsr       (A2)
000021F6  584F      3583          addq.w    #4,A7
                    3584   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000021F8  4879 0000 3585          pea       @m68kde~2_109.L
000021FC  46C0      
000021FE  4E92      3586          jsr       (A2)
00002200  584F      3587          addq.w    #4,A7
                    3588   ; GoFlag = 1 ;
00002202  23FC 0000 3589          move.l    #1,_GoFlag.L
00002206  0001 0B00 
0000220A  00DC      
                    3590   ; go() ;
0000220C  4EB8 08B8 3591          jsr       _go
00002210  6000 01C6 3592          bra       menu_46
                    3593   menu_12:
                    3594   ; }
                    3595   ; else if( c == (char)('M'))           // memory examine and modify
00002214  0C02 004D 3596          cmp.b     #77,D2
00002218  6608      3597          bne.s     menu_14
                    3598   ; MemoryChange() ;
0000221A  4EB8 0FC4 3599          jsr       _MemoryChange
0000221E  6000 01B8 3600          bra       menu_46
                    3601   menu_14:
                    3602   ; else if( c == (char)('P'))            // Program Flash Chip
00002222  0C02 0050 3603          cmp.b     #80,D2
00002226  6608      3604          bne.s     menu_16
                    3605   ; ProgramFlashChip() ;
00002228  4EB8 10C4 3606          jsr       _ProgramFlashChip
0000222C  6000 01AA 3607          bra       menu_46
                    3608   menu_16:
                    3609   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002230  0C02 0043 3610          cmp.b     #67,D2
00002234  6608      3611          bne.s     menu_18
                    3612   ; LoadFromFlashChip();
00002236  4EB8 10C6 3613          jsr       _LoadFromFlashChip
0000223A  6000 019C 3614          bra       menu_46
                    3615   menu_18:
                    3616   ; else if( c == (char)('R'))             // dump registers
0000223E  0C02 0052 3617          cmp.b     #82,D2
00002242  6608      3618          bne.s     menu_20
                    3619   ; DumpRegisters() ;
00002244  4EB8 10D6 3620          jsr       _DumpRegisters
00002248  6000 018E 3621          bra       menu_46
                    3622   menu_20:
                    3623   ; else if( c == (char)('.'))           // change registers
0000224C  0C02 002E 3624          cmp.b     #46,D2
00002250  6608      3625          bne.s     menu_22
                    3626   ; ChangeRegisters() ;
00002252  4EB8 15C8 3627          jsr       _ChangeRegisters
00002256  6000 0180 3628          bra       menu_46
                    3629   menu_22:
                    3630   ; else if( c == (char)('B'))              // breakpoint command
0000225A  0C02 0042 3631          cmp.b     #66,D2
0000225E  6608      3632          bne.s     menu_24
                    3633   ; Breakpoint() ;
00002260  4EB8 1F9C 3634          jsr       _Breakpoint
00002264  6000 0172 3635          bra       menu_46
                    3636   menu_24:
                    3637   ; else if( c == (char)('T'))  {          // Test command
00002268  0C02 0054 3638          cmp.b     #84,D2
0000226C  6600 0046 3639          bne       menu_26
                    3640   ; c1 = toupper(_getch()) ;
00002270  2F00      3641          move.l    D0,-(A7)
00002272  4EB8 0B68 3642          jsr       __getch
00002276  2200      3643          move.l    D0,D1
00002278  201F      3644          move.l    (A7)+,D0
0000227A  2F01      3645          move.l    D1,-(A7)
0000227C  4EB9 0000 3646          jsr       _toupper
00002280  30B8      
00002282  584F      3647          addq.w    #4,A7
00002284  1600      3648          move.b    D0,D3
                    3649   ; if(c1 == (char)('M'))                    // memory test
00002286  0C03 004D 3650          cmp.b     #77,D3
0000228A  6608      3651          bne.s     menu_28
                    3652   ; MemoryTest() ;
0000228C  4EB9 0000 3653          jsr       _MemoryTest
00002290  2570      
00002292  601C      3654          bra.s     menu_33
                    3655   menu_28:
                    3656   ; else if( c1 == (char)('S'))              // Switch Test command
00002294  0C03 0053 3657          cmp.b     #83,D3
00002298  6606      3658          bne.s     menu_30
                    3659   ; SwitchTest() ;
0000229A  4EB8 0AA4 3660          jsr       _SwitchTest
0000229E  6010      3661          bra.s     menu_33
                    3662   menu_30:
                    3663   ; else if( c1 == (char)('D'))              // display Test command
000022A0  0C03 0044 3664          cmp.b     #68,D3
000022A4  6606      3665          bne.s     menu_32
                    3666   ; TestLEDS() ;
000022A6  4EB8 0A50 3667          jsr       _TestLEDS
000022AA  6004      3668          bra.s     menu_33
                    3669   menu_32:
                    3670   ; else
                    3671   ; UnknownCommand() ;
000022AC  4EB8 1F70 3672          jsr       _UnknownCommand
                    3673   menu_33:
000022B0  6000 0126 3674          bra       menu_46
                    3675   menu_26:
                    3676   ; }
                    3677   ; else if( c == (char)(' ')) {             // Next instruction command
000022B4  0C02 0020 3678          cmp.b     #32,D2
000022B8  6636      3679          bne.s     menu_34
                    3680   ; DisableBreakPoints() ;
000022BA  4EB8 1B80 3681          jsr       _DisableBreakPoints
                    3682   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000022BE  2013      3683          move.l    (A3),D0
000022C0  0C80 0000 3684          cmp.l     #1,D0
000022C4  0001      
000022C6  661A      3685          bne.s     menu_36
000022C8  2039 0B00 3686          move.l    _GoFlag.L,D0
000022CC  00DC      
000022CE  0C80 0000 3687          cmp.l     #1,D0
000022D2  0001      
000022D4  660C      3688          bne.s     menu_36
                    3689   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
000022D6  13FC 0001 3690          move.b    #1,4194314
000022DA  0040 000A 
                    3691   ; return ;
000022DE  6000 00FC 3692          bra       menu_38
                    3693   menu_36:
                    3694   ; }
                    3695   ; else
                    3696   ; printf("\r\nError: Press 'G' first to start program") ;
000022E2  4879 0000 3697          pea       @m68kde~2_110.L
000022E6  46EE      
000022E8  4E92      3698          jsr       (A2)
000022EA  584F      3699          addq.w    #4,A7
000022EC  6000 00EA 3700          bra       menu_46
                    3701   menu_34:
                    3702   ; }
                    3703   ; else if( c == (char)('S')) {             // single step
000022F0  0C02 0053 3704          cmp.b     #83,D2
000022F4  6600 008C 3705          bne       menu_39
                    3706   ; if(Trace == 0) {
000022F8  2013      3707          move.l    (A3),D0
000022FA  6600 0050 3708          bne       menu_41
                    3709   ; DisableBreakPoints() ;
000022FE  4EB8 1B80 3710          jsr       _DisableBreakPoints
                    3711   ; printf("\r\nSingle Step  :[ON]") ;
00002302  4879 0000 3712          pea       @m68kde~2_111.L
00002306  4718      
00002308  4E92      3713          jsr       (A2)
0000230A  584F      3714          addq.w    #4,A7
                    3715   ; printf("\r\nBreak Points :[Disabled]") ;
0000230C  4879 0000 3716          pea       @m68kde~2_44.L
00002310  3DB6      
00002312  4E92      3717          jsr       (A2)
00002314  584F      3718          addq.w    #4,A7
                    3719   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002316  0055 8000 3720          or.w      #32768,(A5)
                    3721   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000231A  2F39 0B00 3722          move.l    _PC.L,-(A7)
0000231E  0120      
00002320  4879 0000 3723          pea       @m68kde~2_112.L
00002324  472E      
00002326  4E92      3724          jsr       (A2)
00002328  504F      3725          addq.w    #8,A7
                    3726   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000232A  4879 0000 3727          pea       @m68kde~2_113.L
0000232E  4762      
00002330  4E92      3728          jsr       (A2)
00002332  584F      3729          addq.w    #4,A7
                    3730   ; DumpRegisters() ;
00002334  4EB8 10D6 3731          jsr       _DumpRegisters
                    3732   ; Trace = 1;
00002338  26BC 0000 3733          move.l    #1,(A3)
0000233C  0001      
                    3734   ; TraceException = 1;
0000233E  13FC 0001 3735          move.b    #1,4194314
00002342  0040 000A 
                    3736   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002346  28B8 0074 3737          move.l    116,(A4)
0000234A  6032      3738          bra.s     menu_42
                    3739   menu_41:
                    3740   ; }
                    3741   ; else {
                    3742   ; Trace = 0 ;
0000234C  4293      3743          clr.l     (A3)
                    3744   ; TraceException = 0 ;
0000234E  4239 0040 3745          clr.b     4194314
00002352  000A      
                    3746   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002354  28B8 0074 3747          move.l    116,(A4)
                    3748   ; EnableBreakPoints() ;
00002358  4EB8 1BD4 3749          jsr       _EnableBreakPoints
                    3750   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000235C  0255 7FFF 3751          and.w     #32767,(A5)
                    3752   ; printf("\r\nSingle Step : [OFF]") ;
00002360  4879 0000 3753          pea       @m68kde~2_114.L
00002364  4786      
00002366  4E92      3754          jsr       (A2)
00002368  584F      3755          addq.w    #4,A7
                    3756   ; printf("\r\nBreak Points :[Enabled]") ;
0000236A  4879 0000 3757          pea       @m68kde~2_115.L
0000236E  479C      
00002370  4E92      3758          jsr       (A2)
00002372  584F      3759          addq.w    #4,A7
                    3760   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
00002374  4879 0000 3761          pea       @m68kde~2_116.L
00002378  47B6      
0000237A  4E92      3762          jsr       (A2)
0000237C  584F      3763          addq.w    #4,A7
                    3764   menu_42:
0000237E  6000 0058 3765          bra       menu_46
                    3766   menu_39:
                    3767   ; }
                    3768   ; }
                    3769   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
00002382  0C02 001B 3770          cmp.b     #27,D2
00002386  6600 0040 3771          bne       menu_43
                    3772   ; Trace = 0;
0000238A  4293      3773          clr.l     (A3)
                    3774   ; TraceException = 0;
0000238C  4239 0040 3775          clr.b     4194314
00002390  000A      
                    3776   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
00002392  28B8 0074 3777          move.l    116,(A4)
                    3778   ; EnableBreakPoints() ;
00002396  4EB8 1BD4 3779          jsr       _EnableBreakPoints
                    3780   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000239A  0255 7FFF 3781          and.w     #32767,(A5)
                    3782   ; printf("\r\nSingle Step  :[OFF]") ;
0000239E  4879 0000 3783          pea       @m68kde~2_117.L
000023A2  47E0      
000023A4  4E92      3784          jsr       (A2)
000023A6  584F      3785          addq.w    #4,A7
                    3786   ; printf("\r\nBreak Points :[Enabled]");
000023A8  4879 0000 3787          pea       @m68kde~2_115.L
000023AC  479C      
000023AE  4E92      3788          jsr       (A2)
000023B0  584F      3789          addq.w    #4,A7
                    3790   ; printf("\r\nProgram Running.....") ;
000023B2  4879 0000 3791          pea       @m68kde~2_108.L
000023B6  46A8      
000023B8  4E92      3792          jsr       (A2)
000023BA  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000023BC  4879 0000 3795          pea       @m68kde~2_109.L
000023C0  46C0      
000023C2  4E92      3796          jsr       (A2)
000023C4  584F      3797          addq.w    #4,A7
                    3798   ; return ;
000023C6  6014      3799          bra.s     menu_38
                    3800   menu_43:
                    3801   ; }
                    3802   ; else if( c == (char)('W'))              // Watchpoint command
000023C8  0C02 0057 3803          cmp.b     #87,D2
000023CC  6606      3804          bne.s     menu_45
                    3805   ; Watchpoint() ;
000023CE  4EB8 2018 3806          jsr       _Watchpoint
000023D2  6004      3807          bra.s     menu_46
                    3808   menu_45:
                    3809   ; else
                    3810   ; UnknownCommand() ;
000023D4  4EB8 1F70 3811          jsr       _UnknownCommand
                    3812   menu_46:
000023D8  6000 FDB0 3813          bra       menu_1
                    3814   menu_38:
000023DC  4CDF 3C0C 3815          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
000023E0  4E75      3816          rts
                    3817   ; }
                    3818   ; }
                    3819   ; void PrintErrorMessageandAbort(char *string) {
                    3820   _PrintErrorMessageandAbort:
000023E2  4E56 0000 3821          link      A6,#0
                    3822   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
000023E6  4879 0000 3823          pea       @m68kde~2_118.L
000023EA  47F6      
000023EC  4EB9 0000 3824          jsr       _printf
000023F0  30D4      
000023F2  584F      3825          addq.w    #4,A7
                    3826   ; printf("%s\r\n", string) ;
000023F4  2F2E 0008 3827          move.l    8(A6),-(A7)
000023F8  4879 0000 3828          pea       @m68kde~2_119.L
000023FC  4812      
000023FE  4EB9 0000 3829          jsr       _printf
00002402  30D4      
00002404  504F      3830          addq.w    #8,A7
                    3831   ; menu() ;
00002406  4EB8 216E 3832          jsr       _menu
0000240A  4E5E      3833          unlk      A6
0000240C  4E75      3834          rts
                    3835   ; }
                    3836   ; void IRQMessage(int level) {
                    3837   _IRQMessage:
0000240E  4E56 0000 3838          link      A6,#0
                    3839   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002412  4879 0000 3840          pea       @m68kde~2_120.L
00002416  4818      
00002418  4EB9 0000 3841          jsr       _printf
0000241C  30D4      
0000241E  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002420  2F2E 0008 3844          move.l    8(A6),-(A7)
00002424  4879 0000 3845          pea       @m68kde~2_121.L
00002428  4830      
0000242A  4EB9 0000 3846          jsr       _printf
0000242E  30D4      
00002430  504F      3847          addq.w    #8,A7
                    3848   ; menu() ;
00002432  4EB8 216E 3849          jsr       _menu
00002436  4E5E      3850          unlk      A6
00002438  4E75      3851          rts
                    3852   ; }
                    3853   ; void UnhandledIRQ1(void) {
                    3854   _UnhandledIRQ1:
                    3855   ; IRQMessage(1);
0000243A  4878 0001 3856          pea       1
0000243E  4EB8 240E 3857          jsr       _IRQMessage
00002442  584F      3858          addq.w    #4,A7
00002444  4E75      3859          rts
                    3860   ; }
                    3861   ; void UnhandledIRQ2(void) {
                    3862   _UnhandledIRQ2:
                    3863   ; IRQMessage(2);
00002446  4878 0002 3864          pea       2
0000244A  4EB8 240E 3865          jsr       _IRQMessage
0000244E  584F      3866          addq.w    #4,A7
00002450  4E75      3867          rts
                    3868   ; }
                    3869   ; void UnhandledIRQ3(void){
                    3870   _UnhandledIRQ3:
                    3871   ; IRQMessage(3);
00002452  4878 0003 3872          pea       3
00002456  4EB8 240E 3873          jsr       _IRQMessage
0000245A  584F      3874          addq.w    #4,A7
0000245C  4E75      3875          rts
                    3876   ; }
                    3877   ; void UnhandledIRQ4(void) {
                    3878   _UnhandledIRQ4:
                    3879   ; IRQMessage(4);
0000245E  4878 0004 3880          pea       4
00002462  4EB8 240E 3881          jsr       _IRQMessage
00002466  584F      3882          addq.w    #4,A7
00002468  4E75      3883          rts
                    3884   ; }
                    3885   ; void UnhandledIRQ5(void) {
                    3886   _UnhandledIRQ5:
                    3887   ; IRQMessage(5);
0000246A  4878 0005 3888          pea       5
0000246E  4EB8 240E 3889          jsr       _IRQMessage
00002472  584F      3890          addq.w    #4,A7
00002474  4E75      3891          rts
                    3892   ; }
                    3893   ; void UnhandledIRQ6(void) {
                    3894   _UnhandledIRQ6:
                    3895   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
00002476  4879 0000 3896          pea       @m68kde~2_122.L
0000247A  4854      
0000247C  4EB8 23E2 3897          jsr       _PrintErrorMessageandAbort
00002480  584F      3898          addq.w    #4,A7
                    3899   ; menu() ;
00002482  4EB8 216E 3900          jsr       _menu
00002486  4E75      3901          rts
                    3902   ; }
                    3903   ; void UnhandledIRQ7(void) {
                    3904   _UnhandledIRQ7:
                    3905   ; IRQMessage(7);
00002488  4878 0007 3906          pea       7
0000248C  4EB8 240E 3907          jsr       _IRQMessage
00002490  584F      3908          addq.w    #4,A7
00002492  4E75      3909          rts
                    3910   ; }
                    3911   ; void UnhandledTrap(void) {
                    3912   _UnhandledTrap:
                    3913   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
00002494  4879 0000 3914          pea       @m68kde~2_123.L
00002498  4894      
0000249A  4EB8 23E2 3915          jsr       _PrintErrorMessageandAbort
0000249E  584F      3916          addq.w    #4,A7
000024A0  4E75      3917          rts
                    3918   ; }
                    3919   ; void BusError() {
                    3920   _BusError:
                    3921   ; PrintErrorMessageandAbort("BUS Error!") ;
000024A2  4879 0000 3922          pea       @m68kde~2_124.L
000024A6  48AA      
000024A8  4EB8 23E2 3923          jsr       _PrintErrorMessageandAbort
000024AC  584F      3924          addq.w    #4,A7
000024AE  4E75      3925          rts
                    3926   ; }
                    3927   ; void AddressError() {
                    3928   _AddressError:
                    3929   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000024B0  4879 0000 3930          pea       @m68kde~2_125.L
000024B4  48B6      
000024B6  4EB8 23E2 3931          jsr       _PrintErrorMessageandAbort
000024BA  584F      3932          addq.w    #4,A7
000024BC  4E75      3933          rts
                    3934   ; }
                    3935   ; void IllegalInstruction() {
                    3936   _IllegalInstruction:
                    3937   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000024BE  4879 0000 3938          pea       @m68kde~2_126.L
000024C2  48C6      
000024C4  4EB8 23E2 3939          jsr       _PrintErrorMessageandAbort
000024C8  584F      3940          addq.w    #4,A7
000024CA  4E75      3941          rts
                    3942   ; }
                    3943   ; void Dividebyzero() {
                    3944   _Dividebyzero:
                    3945   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000024CC  4879 0000 3946          pea       @m68kde~2_127.L
000024D0  48DA      
000024D2  4EB8 23E2 3947          jsr       _PrintErrorMessageandAbort
000024D6  584F      3948          addq.w    #4,A7
000024D8  4E75      3949          rts
                    3950   ; }
                    3951   ; void Check() {
                    3952   _Check:
                    3953   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
000024DA  4879 0000 3954          pea       @m68kde~2_128.L
000024DE  48EA      
000024E0  4EB8 23E2 3955          jsr       _PrintErrorMessageandAbort
000024E4  584F      3956          addq.w    #4,A7
000024E6  4E75      3957          rts
                    3958   ; }
                    3959   ; void Trapv() {
                    3960   _Trapv:
                    3961   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
000024E8  4879 0000 3962          pea       @m68kde~2_129.L
000024EC  48FC      
000024EE  4EB8 23E2 3963          jsr       _PrintErrorMessageandAbort
000024F2  584F      3964          addq.w    #4,A7
000024F4  4E75      3965          rts
                    3966   ; }
                    3967   ; void PrivError() {
                    3968   _PrivError:
                    3969   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
000024F6  4879 0000 3970          pea       @m68kde~2_130.L
000024FA  490E      
000024FC  4EB8 23E2 3971          jsr       _PrintErrorMessageandAbort
00002500  584F      3972          addq.w    #4,A7
00002502  4E75      3973          rts
                    3974   ; }
                    3975   ; void UnitIRQ() {
                    3976   _UnitIRQ:
                    3977   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002504  4879 0000 3978          pea       @m68kde~2_131.L
00002508  4922      
0000250A  4EB8 23E2 3979          jsr       _PrintErrorMessageandAbort
0000250E  584F      3980          addq.w    #4,A7
00002510  4E75      3981          rts
                    3982   ; }
                    3983   ; void Spurious() {
                    3984   _Spurious:
                    3985   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002512  4879 0000 3986          pea       @m68kde~2_132.L
00002516  4934      
00002518  4EB8 23E2 3987          jsr       _PrintErrorMessageandAbort
0000251C  584F      3988          addq.w    #4,A7
0000251E  4E75      3989          rts
                    3990   ; }
                    3991   ; void EnterString(void)
                    3992   ; {
                    3993   _EnterString:
00002520  4E56 FFFC 3994          link      A6,#-4
00002524  2F02      3995          move.l    D2,-(A7)
                    3996   ; unsigned char *Start;
                    3997   ; unsigned char c;
                    3998   ; printf("\r\nStart Address in Memory: ") ;
00002526  4879 0000 3999          pea       @m68kde~2_133.L
0000252A  4942      
0000252C  4EB9 0000 4000          jsr       _printf
00002530  30D4      
00002532  584F      4001          addq.w    #4,A7
                    4002   ; Start = Get8HexDigits(0) ;
00002534  42A7      4003          clr.l     -(A7)
00002536  4EB8 0CA4 4004          jsr       _Get8HexDigits
0000253A  584F      4005          addq.w    #4,A7
0000253C  2400      4006          move.l    D0,D2
                    4007   ; printf("\r\nEnter String (ESC to end) :") ;
0000253E  4879 0000 4008          pea       @m68kde~2_134.L
00002542  495E      
00002544  4EB9 0000 4009          jsr       _printf
00002548  30D4      
0000254A  584F      4010          addq.w    #4,A7
                    4011   ; while((c = getchar()) != 0x1b)
                    4012   EnterString_1:
0000254C  4EB9 0000 4013          jsr       _getch
00002550  301C      
00002552  1D40 FFFF 4014          move.b    D0,-1(A6)
00002556  0C00 001B 4015          cmp.b     #27,D0
0000255A  670A      4016          beq.s     EnterString_3
                    4017   ; *Start++ = c ;
0000255C  2042      4018          move.l    D2,A0
0000255E  5282      4019          addq.l    #1,D2
00002560  10AE FFFF 4020          move.b    -1(A6),(A0)
00002564  60E6      4021          bra       EnterString_1
                    4022   EnterString_3:
                    4023   ; *Start = 0x00;  // terminate with a null
00002566  2042      4024          move.l    D2,A0
00002568  4210      4025          clr.b     (A0)
0000256A  241F      4026          move.l    (A7)+,D2
0000256C  4E5E      4027          unlk      A6
0000256E  4E75      4028          rts
                    4029   ; }
                    4030   ; void MemoryTest(void)
                    4031   ; {
                    4032   _MemoryTest:
00002570  4E56 FFE8 4033          link      A6,#-24
00002574  48E7 3F3C 4034          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00002578  45F9 0000 4035          lea       _printf.L,A2
0000257C  30D4      
0000257E  4BF9 0000 4036          lea       _getch.L,A5
00002582  301C      
                    4037   ; unsigned char * RamWriter;
                    4038   ; unsigned char * start_address;
                    4039   ; unsigned char * end_address;
                    4040   ; unsigned int test_type;
                    4041   ; unsigned int user_data = 0;
00002584  4283      4042          clr.l     D3
                    4043   ; unsigned char * current_address;
                    4044   ; unsigned char *  intermediate_address;
                    4045   ; int address_increment;
                    4046   ; unsigned int read_write_test;
                    4047   ; int mem_error_flag;
                    4048   ; int valid_start_address_flag = 0;
00002586  42AE FFF0 4049          clr.l     -16(A6)
                    4050   ; int valid_end_address_flag = 0;
0000258A  42AE FFF4 4051          clr.l     -12(A6)
                    4052   ; int valid_user_data_flag = 0;
0000258E  42AE FFF8 4053          clr.l     -8(A6)
                    4054   ; int memory_type;
                    4055   ; //-----------------------Common Section-----------------------
                    4056   ; printf("\r\nWhich Memory do you want to test? Enter 0 for DRAM or 1 for SRAM");
00002592  4879 0000 4057          pea       @m68kde~2_135.L
00002596  497C      
00002598  4E92      4058          jsr       (A2)
0000259A  584F      4059          addq.w    #4,A7
                    4060   ; memory_type = getchar() - '0';
0000259C  4E95      4061          jsr       (A5)
0000259E  0480 0000 4062          sub.l     #48,D0
000025A2  0030      
000025A4  2D40 FFFC 4063          move.l    D0,-4(A6)
                    4064   ; printf("\r\nWhich test do you want to perform? Enter '0' for Read or '1' for Write: "); //prompt user for read or write test
000025A8  4879 0000 4065          pea       @m68kde~2_136.L
000025AC  49C0      
000025AE  4E92      4066          jsr       (A2)
000025B0  584F      4067          addq.w    #4,A7
                    4068   ; read_write_test = getchar() - '0';
000025B2  4E95      4069          jsr       (A5)
000025B4  0480 0000 4070          sub.l     #48,D0
000025B8  0030      
000025BA  2840      4071          move.l    D0,A4
                    4072   ; while(read_write_test < 0 | read_write_test > 1){
                    4073   MemoryTest_1:
000025BC  200C      4074          move.l    A4,D0
000025BE  0C80 0000 4075          cmp.l     #0,D0
000025C2  0000      
000025C4  6404      4076          bhs.s     MemoryTest_4
000025C6  7001      4077          moveq     #1,D0
000025C8  6002      4078          bra.s     MemoryTest_5
                    4079   MemoryTest_4:
000025CA  4280      4080          clr.l     D0
                    4081   MemoryTest_5:
000025CC  220C      4082          move.l    A4,D1
000025CE  0C81 0000 4083          cmp.l     #1,D1
000025D2  0001      
000025D4  6304      4084          bls.s     MemoryTest_6
000025D6  7201      4085          moveq     #1,D1
000025D8  6002      4086          bra.s     MemoryTest_7
                    4087   MemoryTest_6:
000025DA  4281      4088          clr.l     D1
                    4089   MemoryTest_7:
000025DC  8081      4090          or.l      D1,D0
000025DE  6720      4091          beq.s     MemoryTest_3
                    4092   ; printf("\r\nError: Invalid Input"); //prompt user for read or write test
000025E0  4879 0000 4093          pea       @m68kde~2_137.L
000025E4  4A0C      
000025E6  4E92      4094          jsr       (A2)
000025E8  584F      4095          addq.w    #4,A7
                    4096   ; printf("\r\nWhich test do you want to perform? Enter '0' for Read or '1' for Write: "); //prompt user for read or write test
000025EA  4879 0000 4097          pea       @m68kde~2_136.L
000025EE  49C0      
000025F0  4E92      4098          jsr       (A2)
000025F2  584F      4099          addq.w    #4,A7
                    4100   ; read_write_test = getchar() - '0';
000025F4  4E95      4101          jsr       (A5)
000025F6  0480 0000 4102          sub.l     #48,D0
000025FA  0030      
000025FC  2840      4103          move.l    D0,A4
000025FE  60BC      4104          bra       MemoryTest_1
                    4105   MemoryTest_3:
                    4106   ; }
                    4107   ; printf("\r\nSpecify the memory test type. Input '0' for Bytes, '1' for Word, and '2' for Long Word: "); //prompt user for test type
00002600  4879 0000 4108          pea       @m68kde~2_138.L
00002604  4A24      
00002606  4E92      4109          jsr       (A2)
00002608  584F      4110          addq.w    #4,A7
                    4111   ; test_type = getchar() - '0';
0000260A  4E95      4112          jsr       (A5)
0000260C  0480 0000 4113          sub.l     #48,D0
00002610  0030      
00002612  2800      4114          move.l    D0,D4
                    4115   ; while (test_type < 0 | test_type > 2) // check for valid input
                    4116   MemoryTest_8:
00002614  0C84 0000 4117          cmp.l     #0,D4
00002618  0000      
0000261A  6404      4118          bhs.s     MemoryTest_11
0000261C  7001      4119          moveq     #1,D0
0000261E  6002      4120          bra.s     MemoryTest_12
                    4121   MemoryTest_11:
00002620  4280      4122          clr.l     D0
                    4123   MemoryTest_12:
00002622  0C84 0000 4124          cmp.l     #2,D4
00002626  0002      
00002628  6304      4125          bls.s     MemoryTest_13
0000262A  7201      4126          moveq     #1,D1
0000262C  6002      4127          bra.s     MemoryTest_14
                    4128   MemoryTest_13:
0000262E  4281      4129          clr.l     D1
                    4130   MemoryTest_14:
00002630  8081      4131          or.l      D1,D0
00002632  6720      4132          beq.s     MemoryTest_10
                    4133   ; {
                    4134   ; printf("\r\nError: Invalid Input!");
00002634  4879 0000 4135          pea       @m68kde~2_139.L
00002638  4A80      
0000263A  4E92      4136          jsr       (A2)
0000263C  584F      4137          addq.w    #4,A7
                    4138   ; printf("\r\nSpecify the memory test type. Input '0' for Bytes, '1' for Word, and '2' for Long Word: ");
0000263E  4879 0000 4139          pea       @m68kde~2_138.L
00002642  4A24      
00002644  4E92      4140          jsr       (A2)
00002646  584F      4141          addq.w    #4,A7
                    4142   ; test_type = getchar() - '0';
00002648  4E95      4143          jsr       (A5)
0000264A  0480 0000 4144          sub.l     #48,D0
0000264E  0030      
00002650  2800      4145          move.l    D0,D4
00002652  60C0      4146          bra       MemoryTest_8
                    4147   MemoryTest_10:
                    4148   ; }
                    4149   ; //***************Get Addresses***************
                    4150   ; while(!valid_start_address_flag){
                    4151   MemoryTest_15:
00002654  4AAE FFF0 4152          tst.l     -16(A6)
00002658  6600 00A0 4153          bne       MemoryTest_17
                    4154   ; printf("\r\nProvide a start address for your data: "); //SRAM
0000265C  4879 0000 4155          pea       @m68kde~2_140.L
00002660  4A98      
00002662  4E92      4156          jsr       (A2)
00002664  584F      4157          addq.w    #4,A7
                    4158   ; start_address = Get8HexDigits(0);
00002666  42A7      4159          clr.l     -(A7)
00002668  4EB8 0CA4 4160          jsr       _Get8HexDigits
0000266C  584F      4161          addq.w    #4,A7
0000266E  2A00      4162          move.l    D0,D5
                    4163   ; if(start_address < 0xF0000000 || start_address > 0xF003FFFF) //protect data leak into other memories
00002670  0C85 F000 4164          cmp.l     #-268435456,D5
00002674  0000      
00002676  6508      4165          blo.s     MemoryTest_20
00002678  0C85 F003 4166          cmp.l     #-268173313,D5
0000267C  FFFF      
0000267E  631A      4167          bls.s     MemoryTest_21
                    4168   MemoryTest_20:
                    4169   ; {
                    4170   ; if(memory_type == 1){
00002680  202E FFFC 4171          move.l    -4(A6),D0
00002684  0C80 0000 4172          cmp.l     #1,D0
00002688  0001      
0000268A  660E      4173          bne.s     MemoryTest_21
                    4174   ; printf("\r\nError: Invalid address! Start address for SRAM cannot be less than F0000000 or greater than 0xF003FFFF");
0000268C  4879 0000 4175          pea       @m68kde~2_141.L
00002690  4AC2      
00002692  4E92      4176          jsr       (A2)
00002694  584F      4177          addq.w    #4,A7
                    4178   ; continue;
00002696  6000 005E 4179          bra       MemoryTest_29
                    4180   MemoryTest_21:
                    4181   ; }
                    4182   ; }
                    4183   ; if(start_address < 0x09000000 || start_address > 0x097FFFFF) //DRAM
0000269A  0C85 0900 4184          cmp.l     #150994944,D5
0000269E  0000      
000026A0  6508      4185          blo.s     MemoryTest_25
000026A2  0C85 097F 4186          cmp.l     #159383551,D5
000026A6  FFFF      
000026A8  6314      4187          bls.s     MemoryTest_26
                    4188   MemoryTest_25:
                    4189   ; {
                    4190   ; if(memory_type == 0){
000026AA  202E FFFC 4191          move.l    -4(A6),D0
000026AE  660E      4192          bne.s     MemoryTest_26
                    4193   ; printf("\r\nError: Invalid address! Start address for DRAM cannot be less than 09000000 or greater than 097FFFFF");
000026B0  4879 0000 4194          pea       @m68kde~2_142.L
000026B4  4B2C      
000026B6  4E92      4195          jsr       (A2)
000026B8  584F      4196          addq.w    #4,A7
                    4197   ; continue;
000026BA  6000 003A 4198          bra       MemoryTest_29
                    4199   MemoryTest_26:
                    4200   ; }
                    4201   ; }
                    4202   ; if (test_type != 0) // check that we're aligned properly for start address for word and long word
000026BE  4A84      4203          tst.l     D4
000026C0  672C      4204          beq.s     MemoryTest_28
                    4205   ; {
                    4206   ; if ((unsigned int)start_address % 2) // odd number address
000026C2  2F05      4207          move.l    D5,-(A7)
000026C4  4878 0002 4208          pea       2
000026C8  4EB9 0000 4209          jsr       ULDIV
000026CC  2F12      
000026CE  202F 0004 4210          move.l    4(A7),D0
000026D2  504F      4211          addq.w    #8,A7
000026D4  4A80      4212          tst.l     D0
000026D6  670C      4213          beq.s     MemoryTest_30
                    4214   ; {
                    4215   ; printf("\r\nOdd address is not allowed for word or long word!");
000026D8  4879 0000 4216          pea       @m68kde~2_143.L
000026DC  4B94      
000026DE  4E92      4217          jsr       (A2)
000026E0  584F      4218          addq.w    #4,A7
                    4219   ; continue;
000026E2  6012      4220          bra.s     MemoryTest_29
                    4221   MemoryTest_30:
                    4222   ; }
                    4223   ; else{
                    4224   ; valid_start_address_flag = 1;
000026E4  2D7C 0000 4225          move.l    #1,-16(A6)
000026E8  0001 FFF0 
000026EC  6008      4226          bra.s     MemoryTest_29
                    4227   MemoryTest_28:
                    4228   ; }
                    4229   ; }
                    4230   ; else{
                    4231   ; valid_start_address_flag = 1;
000026EE  2D7C 0000 4232          move.l    #1,-16(A6)
000026F2  0001 FFF0 
                    4233   MemoryTest_29:
000026F6  6000 FF5C 4234          bra       MemoryTest_15
                    4235   MemoryTest_17:
                    4236   ; }
                    4237   ; }
                    4238   ; printf("\r\nYou have entered %x for the start address", start_address);
000026FA  2F05      4239          move.l    D5,-(A7)
000026FC  4879 0000 4240          pea       @m68kde~2_144.L
00002700  4BC8      
00002702  4E92      4241          jsr       (A2)
00002704  504F      4242          addq.w    #8,A7
                    4243   ; while(!valid_end_address_flag){
                    4244   MemoryTest_32:
00002706  4AAE FFF4 4245          tst.l     -12(A6)
0000270A  6600 00F0 4246          bne       MemoryTest_34
                    4247   ; printf("\r\nProvide an end address for your data: "); //protect data leak into other memories
0000270E  4879 0000 4248          pea       @m68kde~2_145.L
00002712  4BF4      
00002714  4E92      4249          jsr       (A2)
00002716  584F      4250          addq.w    #4,A7
                    4251   ; end_address = Get8HexDigits(0); //protect data leak into other memories
00002718  42A7      4252          clr.l     -(A7)
0000271A  4EB8 0CA4 4253          jsr       _Get8HexDigits
0000271E  584F      4254          addq.w    #4,A7
00002720  2C00      4255          move.l    D0,D6
                    4256   ; if(end_address <= start_address || end_address > 0xF0040000)
00002722  BC85      4257          cmp.l     D5,D6
00002724  6308      4258          bls.s     MemoryTest_37
00002726  0C86 F004 4259          cmp.l     #-268173312,D6
0000272A  0000      
0000272C  631A      4260          bls.s     MemoryTest_38
                    4261   MemoryTest_37:
                    4262   ; {
                    4263   ; if(memory_type == 1)
0000272E  202E FFFC 4264          move.l    -4(A6),D0
00002732  0C80 0000 4265          cmp.l     #1,D0
00002736  0001      
00002738  660E      4266          bne.s     MemoryTest_38
                    4267   ; {
                    4268   ; printf("\r\nError: Invalid address! End address for SRAM should not be less than or equal to start address or greater than F003FFFF");
0000273A  4879 0000 4269          pea       @m68kde~2_146.L
0000273E  4C1E      
00002740  4E92      4270          jsr       (A2)
00002742  584F      4271          addq.w    #4,A7
                    4272   ; continue;
00002744  6000 00B2 4273          bra       MemoryTest_52
                    4274   MemoryTest_38:
                    4275   ; }
                    4276   ; }
                    4277   ; if(end_address <= start_address || end_address > 0x09800000)
00002748  BC85      4278          cmp.l     D5,D6
0000274A  6308      4279          bls.s     MemoryTest_42
0000274C  0C86 0980 4280          cmp.l     #159383552,D6
00002750  0000      
00002752  6314      4281          bls.s     MemoryTest_43
                    4282   MemoryTest_42:
                    4283   ; {
                    4284   ; if(memory_type == 0)
00002754  202E FFFC 4285          move.l    -4(A6),D0
00002758  660E      4286          bne.s     MemoryTest_43
                    4287   ; {
                    4288   ; printf("\r\nError: Invalid address! End address for DRAM should not be less than or equal to start address or greater than 097FFFFF");
0000275A  4879 0000 4289          pea       @m68kde~2_147.L
0000275E  4C98      
00002760  4E92      4290          jsr       (A2)
00002762  584F      4291          addq.w    #4,A7
                    4292   ; continue;
00002764  6000 0092 4293          bra       MemoryTest_52
                    4294   MemoryTest_43:
                    4295   ; }
                    4296   ; }
                    4297   ; if(test_type == 0){
00002768  4A84      4298          tst.l     D4
0000276A  660C      4299          bne.s     MemoryTest_45
                    4300   ; valid_end_address_flag = 1;
0000276C  2D7C 0000 4301          move.l    #1,-12(A6)
00002770  0001 FFF4 
00002774  6000 0082 4302          bra       MemoryTest_52
                    4303   MemoryTest_45:
                    4304   ; }
                    4305   ; else{
                    4306   ; if((unsigned int)end_address % 2) // check for odd number address
00002778  2F06      4307          move.l    D6,-(A7)
0000277A  4878 0002 4308          pea       2
0000277E  4EB9 0000 4309          jsr       ULDIV
00002782  2F12      
00002784  202F 0004 4310          move.l    4(A7),D0
00002788  504F      4311          addq.w    #8,A7
0000278A  4A80      4312          tst.l     D0
0000278C  670E      4313          beq.s     MemoryTest_47
                    4314   ; {
                    4315   ; printf("\r\nOdd address is not allowed for word or long word!");
0000278E  4879 0000 4316          pea       @m68kde~2_143.L
00002792  4B94      
00002794  4E92      4317          jsr       (A2)
00002796  584F      4318          addq.w    #4,A7
                    4319   ; continue;
00002798  6000 005E 4320          bra       MemoryTest_52
                    4321   MemoryTest_47:
                    4322   ; }
                    4323   ; if(!((end_address - start_address) < 2) && test_type == 1){ //check if selections can fit data
0000279C  2006      4324          move.l    D6,D0
0000279E  9085      4325          sub.l     D5,D0
000027A0  0C80 0000 4326          cmp.l     #2,D0
000027A4  0002      
000027A6  6D14      4327          blt.s     MemoryTest_49
000027A8  0C84 0000 4328          cmp.l     #1,D4
000027AC  0001      
000027AE  660C      4329          bne.s     MemoryTest_49
                    4330   ; valid_end_address_flag = 1;
000027B0  2D7C 0000 4331          move.l    #1,-12(A6)
000027B4  0001 FFF4 
000027B8  6000 003E 4332          bra       MemoryTest_52
                    4333   MemoryTest_49:
                    4334   ; }
                    4335   ; else if(!((end_address - start_address) < 4) && test_type == 2){ //check if selections can fit data
000027BC  2006      4336          move.l    D6,D0
000027BE  9085      4337          sub.l     D5,D0
000027C0  0C80 0000 4338          cmp.l     #4,D0
000027C4  0004      
000027C6  6D12      4339          blt.s     MemoryTest_51
000027C8  0C84 0000 4340          cmp.l     #2,D4
000027CC  0002      
000027CE  660A      4341          bne.s     MemoryTest_51
                    4342   ; valid_end_address_flag = 1;
000027D0  2D7C 0000 4343          move.l    #1,-12(A6)
000027D4  0001 FFF4 
000027D8  601E      4344          bra.s     MemoryTest_52
                    4345   MemoryTest_51:
                    4346   ; }
                    4347   ; else{
                    4348   ; if(read_write_test){ //check if write operation can be performed
000027DA  200C      4349          move.l    A4,D0
000027DC  670C      4350          beq.s     MemoryTest_53
                    4351   ; printf("\r\nError: Data cannot be fitted in given address range");
000027DE  4879 0000 4352          pea       @m68kde~2_148.L
000027E2  4D12      
000027E4  4E92      4353          jsr       (A2)
000027E6  584F      4354          addq.w    #4,A7
000027E8  600A      4355          bra.s     MemoryTest_54
                    4356   MemoryTest_53:
                    4357   ; }
                    4358   ; else{ //check if read operation can be performed
                    4359   ; printf("\r\nError: Not enough address range to read the data");
000027EA  4879 0000 4360          pea       @m68kde~2_149.L
000027EE  4D48      
000027F0  4E92      4361          jsr       (A2)
000027F2  584F      4362          addq.w    #4,A7
                    4363   MemoryTest_54:
                    4364   ; }
                    4365   ; continue;
000027F4  6000 0002 4366          bra       MemoryTest_52
                    4367   MemoryTest_52:
000027F8  6000 FF0C 4368          bra       MemoryTest_32
                    4369   MemoryTest_34:
                    4370   ; }
                    4371   ; }
                    4372   ; }
                    4373   ; switch (test_type) { // check if byte, word, or long word
000027FC  0C84 0000 4374          cmp.l     #1,D4
00002800  0001      
00002802  6718      4375          beq.s     MemoryTest_58
00002804  6206      4376          bhi.s     MemoryTest_61
00002806  4A84      4377          tst.l     D4
00002808  670C      4378          beq.s     MemoryTest_57
0000280A  601C      4379          bra.s     MemoryTest_55
                    4380   MemoryTest_61:
0000280C  0C84 0000 4381          cmp.l     #2,D4
00002810  0002      
00002812  670E      4382          beq.s     MemoryTest_59
00002814  6012      4383          bra.s     MemoryTest_55
                    4384   MemoryTest_57:
                    4385   ; case 0:
                    4386   ; address_increment = 1; // byte
00002816  367C 0001 4387          move.w    #1,A3
                    4388   ; break;
0000281A  601A      4389          bra.s     MemoryTest_56
                    4390   MemoryTest_58:
                    4391   ; case 1:
                    4392   ; address_increment = 2; // word
0000281C  367C 0002 4393          move.w    #2,A3
                    4394   ; break;
00002820  6014      4395          bra.s     MemoryTest_56
                    4396   MemoryTest_59:
                    4397   ; case 2:
                    4398   ; address_increment = 4; // long word
00002822  367C 0004 4399          move.w    #4,A3
                    4400   ; break;
00002826  600E      4401          bra.s     MemoryTest_56
                    4402   MemoryTest_55:
                    4403   ; default:
                    4404   ; printf("\r\nWe are not supposed to get here! Default is increment by 1 byte.");
00002828  4879 0000 4405          pea       @m68kde~2_150.L
0000282C  4D7C      
0000282E  4E92      4406          jsr       (A2)
00002830  584F      4407          addq.w    #4,A7
                    4408   ; address_increment = 1; // should never get here: fall-through case: byte
00002832  367C 0001 4409          move.w    #1,A3
                    4410   MemoryTest_56:
                    4411   ; }
                    4412   ; //-----------------------Read Section-----------------------
                    4413   ; if(!read_write_test){
00002836  200C      4414          move.l    A4,D0
00002838  6600 00C8 4415          bne       MemoryTest_62
                    4416   ; for(current_address = start_address; current_address < end_address; current_address += address_increment){
0000283C  2405      4417          move.l    D5,D2
                    4418   MemoryTest_64:
0000283E  B486      4419          cmp.l     D6,D2
00002840  6400 00B2 4420          bhs       MemoryTest_66
                    4421   ; if(test_type == 0){ //read a byte
00002844  4A84      4422          tst.l     D4
00002846  661E      4423          bne.s     MemoryTest_67
                    4424   ; printf("\r\nData at location %x: %02x", current_address, *current_address);
00002848  2042      4425          move.l    D2,A0
0000284A  1210      4426          move.b    (A0),D1
0000284C  C2BC 0000 4427          and.l     #255,D1
00002850  00FF      
00002852  2F01      4428          move.l    D1,-(A7)
00002854  2F02      4429          move.l    D2,-(A7)
00002856  4879 0000 4430          pea       @m68kde~2_151.L
0000285A  4DC0      
0000285C  4E92      4431          jsr       (A2)
0000285E  DEFC 000C 4432          add.w     #12,A7
00002862  6000 008A 4433          bra       MemoryTest_70
                    4434   MemoryTest_67:
                    4435   ; }
                    4436   ; else if(test_type == 1){//read a word
00002866  0C84 0000 4437          cmp.l     #1,D4
0000286A  0001      
0000286C  662C      4438          bne.s     MemoryTest_69
                    4439   ; printf("\r\nWord at location %x: %02x%02x", current_address, *current_address, *(current_address+1));
0000286E  2042      4440          move.l    D2,A0
00002870  1228 0001 4441          move.b    1(A0),D1
00002874  C2BC 0000 4442          and.l     #255,D1
00002878  00FF      
0000287A  2F01      4443          move.l    D1,-(A7)
0000287C  2042      4444          move.l    D2,A0
0000287E  1210      4445          move.b    (A0),D1
00002880  C2BC 0000 4446          and.l     #255,D1
00002884  00FF      
00002886  2F01      4447          move.l    D1,-(A7)
00002888  2F02      4448          move.l    D2,-(A7)
0000288A  4879 0000 4449          pea       @m68kde~2_152.L
0000288E  4DDC      
00002890  4E92      4450          jsr       (A2)
00002892  DEFC 0010 4451          add.w     #16,A7
00002896  6000 0056 4452          bra       MemoryTest_70
                    4453   MemoryTest_69:
                    4454   ; }
                    4455   ; else{//read a long word
                    4456   ; if( (end_address - current_address) < 3){
0000289A  2006      4457          move.l    D6,D0
0000289C  9082      4458          sub.l     D2,D0
0000289E  0C80 0000 4459          cmp.l     #3,D0
000028A2  0003      
000028A4  6C04      4460          bge.s     MemoryTest_71
                    4461   ; break;
000028A6  6000 004C 4462          bra       MemoryTest_66
                    4463   MemoryTest_71:
                    4464   ; }
                    4465   ; printf("\r\nLong word at location %x: %02x%02x%02x%02x", current_address, *current_address, *(current_address+1), *(current_address+2), *(current_address+3));
000028AA  2042      4466          move.l    D2,A0
000028AC  1228 0003 4467          move.b    3(A0),D1
000028B0  C2BC 0000 4468          and.l     #255,D1
000028B4  00FF      
000028B6  2F01      4469          move.l    D1,-(A7)
000028B8  2042      4470          move.l    D2,A0
000028BA  1228 0002 4471          move.b    2(A0),D1
000028BE  C2BC 0000 4472          and.l     #255,D1
000028C2  00FF      
000028C4  2F01      4473          move.l    D1,-(A7)
000028C6  2042      4474          move.l    D2,A0
000028C8  1228 0001 4475          move.b    1(A0),D1
000028CC  C2BC 0000 4476          and.l     #255,D1
000028D0  00FF      
000028D2  2F01      4477          move.l    D1,-(A7)
000028D4  2042      4478          move.l    D2,A0
000028D6  1210      4479          move.b    (A0),D1
000028D8  C2BC 0000 4480          and.l     #255,D1
000028DC  00FF      
000028DE  2F01      4481          move.l    D1,-(A7)
000028E0  2F02      4482          move.l    D2,-(A7)
000028E2  4879 0000 4483          pea       @m68kde~2_153.L
000028E6  4DFC      
000028E8  4E92      4484          jsr       (A2)
000028EA  DEFC 0018 4485          add.w     #24,A7
                    4486   MemoryTest_70:
000028EE  D48B      4487          add.l     A3,D2
000028F0  6000 FF4C 4488          bra       MemoryTest_64
                    4489   MemoryTest_66:
                    4490   ; }
                    4491   ; }
                    4492   ; printf("\r\nFinished reading");
000028F4  4879 0000 4493          pea       @m68kde~2_154.L
000028F8  4E2A      
000028FA  4E92      4494          jsr       (A2)
000028FC  584F      4495          addq.w    #4,A7
000028FE  6000 034A 4496          bra       MemoryTest_107
                    4497   MemoryTest_62:
                    4498   ; }
                    4499   ; //-----------------------Write Section-----------------------
                    4500   ; else{
                    4501   ; // 1 Byte
                    4502   ; while(!valid_user_data_flag){
                    4503   MemoryTest_73:
00002902  4AAE FFF8 4504          tst.l     -8(A6)
00002906  6600 006A 4505          bne       MemoryTest_75
                    4506   ; if(test_type == 0){ // acquire byte user data
0000290A  4A84      4507          tst.l     D4
0000290C  6620      4508          bne.s     MemoryTest_76
                    4509   ; printf("\r\nEnter the data in format XX: ");
0000290E  4879 0000 4510          pea       @m68kde~2_155.L
00002912  4E3E      
00002914  4E92      4511          jsr       (A2)
00002916  584F      4512          addq.w    #4,A7
                    4513   ; user_data = Get2HexDigits(0);
00002918  42A7      4514          clr.l     -(A7)
0000291A  4EB8 0C04 4515          jsr       _Get2HexDigits
0000291E  584F      4516          addq.w    #4,A7
00002920  2600      4517          move.l    D0,D3
                    4518   ; valid_user_data_flag = 1;
00002922  2D7C 0000 4519          move.l    #1,-8(A6)
00002926  0001 FFF8 
0000292A  6000 0044 4520          bra       MemoryTest_79
                    4521   MemoryTest_76:
                    4522   ; }
                    4523   ; else if(test_type == 1){ // acquire word user data
0000292E  0C84 0000 4524          cmp.l     #1,D4
00002932  0001      
00002934  661E      4525          bne.s     MemoryTest_78
                    4526   ; printf("\r\nEnter the data in format XXXX: ");
00002936  4879 0000 4527          pea       @m68kde~2_156.L
0000293A  4E5E      
0000293C  4E92      4528          jsr       (A2)
0000293E  584F      4529          addq.w    #4,A7
                    4530   ; user_data = Get4HexDigits(0);
00002940  42A7      4531          clr.l     -(A7)
00002942  4EB8 0C58 4532          jsr       _Get4HexDigits
00002946  584F      4533          addq.w    #4,A7
00002948  2600      4534          move.l    D0,D3
                    4535   ; valid_user_data_flag = 1;
0000294A  2D7C 0000 4536          move.l    #1,-8(A6)
0000294E  0001 FFF8 
00002952  601C      4537          bra.s     MemoryTest_79
                    4538   MemoryTest_78:
                    4539   ; }
                    4540   ; else{ // acquire long word user data
                    4541   ; printf("\r\nEnter the data in format XXXXXXXX: ");
00002954  4879 0000 4542          pea       @m68kde~2_157.L
00002958  4E80      
0000295A  4E92      4543          jsr       (A2)
0000295C  584F      4544          addq.w    #4,A7
                    4545   ; user_data = Get8HexDigits(0);
0000295E  42A7      4546          clr.l     -(A7)
00002960  4EB8 0CA4 4547          jsr       _Get8HexDigits
00002964  584F      4548          addq.w    #4,A7
00002966  2600      4549          move.l    D0,D3
                    4550   ; valid_user_data_flag = 1;
00002968  2D7C 0000 4551          move.l    #1,-8(A6)
0000296C  0001 FFF8 
                    4552   MemoryTest_79:
00002970  6090      4553          bra       MemoryTest_73
                    4554   MemoryTest_75:
                    4555   ; }
                    4556   ; }
                    4557   ; // word XX_XX --> upper 8 bits ((0xFFFF & input) >> 8), shift address by 1, then lower 8 bits (0x00FF & input)
                    4558   ; // long word --> upper 8, shift by 1, next 8, shift by 1, next 8, shift by 1, write least significant 8, then done.
                    4559   ; mem_error_flag = 0;
00002972  7E00      4560          moveq     #0,D7
                    4561   ; for(current_address = start_address; current_address < end_address; current_address += address_increment){
00002974  2405      4562          move.l    D5,D2
                    4563   MemoryTest_80:
00002976  B486      4564          cmp.l     D6,D2
00002978  6400 02C0 4565          bhs       MemoryTest_82
                    4566   ; if((current_address - start_address)%10000 == 0){
0000297C  2002      4567          move.l    D2,D0
0000297E  9085      4568          sub.l     D5,D0
00002980  2F00      4569          move.l    D0,-(A7)
00002982  4878 2710 4570          pea       10000
00002986  4EB9 0000 4571          jsr       LDIV
0000298A  2F24      
0000298C  202F 0004 4572          move.l    4(A7),D0
00002990  504F      4573          addq.w    #8,A7
00002992  4A80      4574          tst.l     D0
00002994  6610      4575          bne.s     MemoryTest_83
                    4576   ; printf("\r\nWriting %x at location %x", user_data, current_address); // Reports the progress every 10k (0x2800) locations
00002996  2F02      4577          move.l    D2,-(A7)
00002998  2F03      4578          move.l    D3,-(A7)
0000299A  4879 0000 4579          pea       @m68kde~2_158.L
0000299E  4EA6      
000029A0  4E92      4580          jsr       (A2)
000029A2  DEFC 000C 4581          add.w     #12,A7
                    4582   MemoryTest_83:
                    4583   ; }
                    4584   ; if(test_type == 0){
000029A6  4A84      4585          tst.l     D4
000029A8  662C      4586          bne.s     MemoryTest_85
                    4587   ; *(current_address) = user_data;
000029AA  2042      4588          move.l    D2,A0
000029AC  1083      4589          move.b    D3,(A0)
                    4590   ; if (*(current_address) != user_data) //read the data and confirm if it is written correctly
000029AE  2042      4591          move.l    D2,A0
000029B0  1010      4592          move.b    (A0),D0
000029B2  C0BC 0000 4593          and.l     #255,D0
000029B6  00FF      
000029B8  B083      4594          cmp.l     D3,D0
000029BA  6716      4595          beq.s     MemoryTest_87
                    4596   ; {
                    4597   ; printf("\r\nError writing %x to address %x", user_data, current_address);
000029BC  2F02      4598          move.l    D2,-(A7)
000029BE  2F03      4599          move.l    D3,-(A7)
000029C0  4879 0000 4600          pea       @m68kde~2_159.L
000029C4  4EC2      
000029C6  4E92      4601          jsr       (A2)
000029C8  DEFC 000C 4602          add.w     #12,A7
                    4603   ; mem_error_flag = 1;
000029CC  7E01      4604          moveq     #1,D7
                    4605   ; break;
000029CE  6000 026A 4606          bra       MemoryTest_82
                    4607   MemoryTest_87:
000029D2  6000 0260 4608          bra       MemoryTest_105
                    4609   MemoryTest_85:
                    4610   ; }
                    4611   ; }
                    4612   ; else if(test_type == 1){
000029D6  0C84 0000 4613          cmp.l     #1,D4
000029DA  0001      
000029DC  6600 00A0 4614          bne       MemoryTest_89
                    4615   ; *(current_address) = (0xFF00 & user_data) >> 8;
000029E0  303C FF00 4616          move.w    #65280,D0
000029E4  C0BC 0000 4617          and.l     #65535,D0
000029E8  FFFF      
000029EA  C083      4618          and.l     D3,D0
000029EC  E088      4619          lsr.l     #8,D0
000029EE  2042      4620          move.l    D2,A0
000029F0  1080      4621          move.b    D0,(A0)
                    4622   ; if (*(current_address) != ((0xFF00 & user_data) >> 8)) //read the data and confirm if it is written correctly
000029F2  2042      4623          move.l    D2,A0
000029F4  1010      4624          move.b    (A0),D0
000029F6  C0BC 0000 4625          and.l     #255,D0
000029FA  00FF      
000029FC  323C FF00 4626          move.w    #65280,D1
00002A00  C2BC 0000 4627          and.l     #65535,D1
00002A04  FFFF      
00002A06  C283      4628          and.l     D3,D1
00002A08  E089      4629          lsr.l     #8,D1
00002A0A  B081      4630          cmp.l     D1,D0
00002A0C  6724      4631          beq.s     MemoryTest_91
                    4632   ; {
                    4633   ; printf("\r\nError writing %x to address %x", (0xFF00 & user_data) >> 8, current_address);
00002A0E  2F02      4634          move.l    D2,-(A7)
00002A10  323C FF00 4635          move.w    #65280,D1
00002A14  C2BC 0000 4636          and.l     #65535,D1
00002A18  FFFF      
00002A1A  C283      4637          and.l     D3,D1
00002A1C  E089      4638          lsr.l     #8,D1
00002A1E  2F01      4639          move.l    D1,-(A7)
00002A20  4879 0000 4640          pea       @m68kde~2_159.L
00002A24  4EC2      
00002A26  4E92      4641          jsr       (A2)
00002A28  DEFC 000C 4642          add.w     #12,A7
                    4643   ; mem_error_flag = 1;
00002A2C  7E01      4644          moveq     #1,D7
                    4645   ; break;
00002A2E  6000 020A 4646          bra       MemoryTest_82
                    4647   MemoryTest_91:
                    4648   ; }
                    4649   ; *(current_address + 1) = (0x00FF & user_data);
00002A32  303C 00FF 4650          move.w    #255,D0
00002A36  48C0      4651          ext.l     D0
00002A38  C083      4652          and.l     D3,D0
00002A3A  2042      4653          move.l    D2,A0
00002A3C  1140 0001 4654          move.b    D0,1(A0)
                    4655   ; if (*(current_address + 1) != (0x00FF & user_data)) //read the data and confirm if it is written correctly
00002A40  2042      4656          move.l    D2,A0
00002A42  1028 0001 4657          move.b    1(A0),D0
00002A46  C0BC 0000 4658          and.l     #255,D0
00002A4A  00FF      
00002A4C  323C 00FF 4659          move.w    #255,D1
00002A50  48C1      4660          ext.l     D1
00002A52  C283      4661          and.l     D3,D1
00002A54  B081      4662          cmp.l     D1,D0
00002A56  6722      4663          beq.s     MemoryTest_93
                    4664   ; {
                    4665   ; printf("\r\nError writing %x to address %x", (0x00FF & user_data), (current_address+1));
00002A58  2202      4666          move.l    D2,D1
00002A5A  5281      4667          addq.l    #1,D1
00002A5C  2F01      4668          move.l    D1,-(A7)
00002A5E  323C 00FF 4669          move.w    #255,D1
00002A62  48C1      4670          ext.l     D1
00002A64  C283      4671          and.l     D3,D1
00002A66  2F01      4672          move.l    D1,-(A7)
00002A68  4879 0000 4673          pea       @m68kde~2_159.L
00002A6C  4EC2      
00002A6E  4E92      4674          jsr       (A2)
00002A70  DEFC 000C 4675          add.w     #12,A7
                    4676   ; mem_error_flag = 1;
00002A74  7E01      4677          moveq     #1,D7
                    4678   ; break;
00002A76  6000 01C2 4679          bra       MemoryTest_82
                    4680   MemoryTest_93:
00002A7A  6000 01B8 4681          bra       MemoryTest_105
                    4682   MemoryTest_89:
                    4683   ; }
                    4684   ; }
                    4685   ; else if(test_type == 2)
00002A7E  0C84 0000 4686          cmp.l     #2,D4
00002A82  0002      
00002A84  6600 01AE 4687          bne       MemoryTest_105
                    4688   ; {
                    4689   ; if( (end_address - current_address) < 3){ //  to ensure we do not go past end address
00002A88  2006      4690          move.l    D6,D0
00002A8A  9082      4691          sub.l     D2,D0
00002A8C  0C80 0000 4692          cmp.l     #3,D0
00002A90  0003      
00002A92  6C00 005A 4693          bge       MemoryTest_97
                    4694   ; *(current_address) = (0xFF000000 & user_data) >> 24;
00002A96  203C FF00 4695          move.l    #-16777216,D0
00002A9A  0000      
00002A9C  C083      4696          and.l     D3,D0
00002A9E  E088      4697          lsr.l     #8,D0
00002AA0  E088      4698          lsr.l     #8,D0
00002AA2  E088      4699          lsr.l     #8,D0
00002AA4  2042      4700          move.l    D2,A0
00002AA6  1080      4701          move.b    D0,(A0)
                    4702   ; *(current_address + 1) = (0x00FF0000 & user_data) >> 16;
00002AA8  203C 00FF 4703          move.l    #16711680,D0
00002AAC  0000      
00002AAE  C083      4704          and.l     D3,D0
00002AB0  E088      4705          lsr.l     #8,D0
00002AB2  E088      4706          lsr.l     #8,D0
00002AB4  2042      4707          move.l    D2,A0
00002AB6  1140 0001 4708          move.b    D0,1(A0)
                    4709   ; printf("\r\nError: End address limit reached");
00002ABA  4879 0000 4710          pea       @m68kde~2_160.L
00002ABE  4EE4      
00002AC0  4E92      4711          jsr       (A2)
00002AC2  584F      4712          addq.w    #4,A7
                    4713   ; printf("\r\nCannot write %x and %x",(0x0000FF00 & user_data) >> 8, (0x000000FF) & user_data);
00002AC4  323C 00FF 4714          move.w    #255,D1
00002AC8  48C1      4715          ext.l     D1
00002ACA  C283      4716          and.l     D3,D1
00002ACC  2F01      4717          move.l    D1,-(A7)
00002ACE  323C FF00 4718          move.w    #65280,D1
00002AD2  C2BC 0000 4719          and.l     #65535,D1
00002AD6  FFFF      
00002AD8  C283      4720          and.l     D3,D1
00002ADA  E089      4721          lsr.l     #8,D1
00002ADC  2F01      4722          move.l    D1,-(A7)
00002ADE  4879 0000 4723          pea       @m68kde~2_161.L
00002AE2  4F08      
00002AE4  4E92      4724          jsr       (A2)
00002AE6  DEFC 000C 4725          add.w     #12,A7
                    4726   ; break;
00002AEA  6000 014E 4727          bra       MemoryTest_82
                    4728   MemoryTest_97:
                    4729   ; }
                    4730   ; *(current_address) = (0xFF000000 & user_data) >> 24;
00002AEE  203C FF00 4731          move.l    #-16777216,D0
00002AF2  0000      
00002AF4  C083      4732          and.l     D3,D0
00002AF6  E088      4733          lsr.l     #8,D0
00002AF8  E088      4734          lsr.l     #8,D0
00002AFA  E088      4735          lsr.l     #8,D0
00002AFC  2042      4736          move.l    D2,A0
00002AFE  1080      4737          move.b    D0,(A0)
                    4738   ; if (*(current_address) != ((0xFF000000 & user_data) >> 24)) //read the data and confirm if it is written correctly
00002B00  2042      4739          move.l    D2,A0
00002B02  1010      4740          move.b    (A0),D0
00002B04  C0BC 0000 4741          and.l     #255,D0
00002B08  00FF      
00002B0A  223C FF00 4742          move.l    #-16777216,D1
00002B0E  0000      
00002B10  C283      4743          and.l     D3,D1
00002B12  E089      4744          lsr.l     #8,D1
00002B14  E089      4745          lsr.l     #8,D1
00002B16  E089      4746          lsr.l     #8,D1
00002B18  B081      4747          cmp.l     D1,D0
00002B1A  6724      4748          beq.s     MemoryTest_99
                    4749   ; {
                    4750   ; printf("\r\nError writing %x to address %x", (0xFF000000 & user_data) >> 24, current_address);
00002B1C  2F02      4751          move.l    D2,-(A7)
00002B1E  223C FF00 4752          move.l    #-16777216,D1
00002B22  0000      
00002B24  C283      4753          and.l     D3,D1
00002B26  E089      4754          lsr.l     #8,D1
00002B28  E089      4755          lsr.l     #8,D1
00002B2A  E089      4756          lsr.l     #8,D1
00002B2C  2F01      4757          move.l    D1,-(A7)
00002B2E  4879 0000 4758          pea       @m68kde~2_159.L
00002B32  4EC2      
00002B34  4E92      4759          jsr       (A2)
00002B36  DEFC 000C 4760          add.w     #12,A7
                    4761   ; mem_error_flag = 1;
00002B3A  7E01      4762          moveq     #1,D7
                    4763   ; break;
00002B3C  6000 00FC 4764          bra       MemoryTest_82
                    4765   MemoryTest_99:
                    4766   ; }
                    4767   ; *(current_address + 1) = (0x00FF0000 & user_data) >> 16;
00002B40  203C 00FF 4768          move.l    #16711680,D0
00002B44  0000      
00002B46  C083      4769          and.l     D3,D0
00002B48  E088      4770          lsr.l     #8,D0
00002B4A  E088      4771          lsr.l     #8,D0
00002B4C  2042      4772          move.l    D2,A0
00002B4E  1140 0001 4773          move.b    D0,1(A0)
                    4774   ; if (*(current_address + 1) != ((0x00FF0000 & user_data) >> 16)) //read the data and confirm if it is written correctly
00002B52  2042      4775          move.l    D2,A0
00002B54  1028 0001 4776          move.b    1(A0),D0
00002B58  C0BC 0000 4777          and.l     #255,D0
00002B5C  00FF      
00002B5E  223C 00FF 4778          move.l    #16711680,D1
00002B62  0000      
00002B64  C283      4779          and.l     D3,D1
00002B66  E089      4780          lsr.l     #8,D1
00002B68  E089      4781          lsr.l     #8,D1
00002B6A  B081      4782          cmp.l     D1,D0
00002B6C  6726      4783          beq.s     MemoryTest_101
                    4784   ; {
                    4785   ; printf("\r\nError writing %x to address %x", (0x00FF0000 & user_data) >> 16, (current_address+1));
00002B6E  2202      4786          move.l    D2,D1
00002B70  5281      4787          addq.l    #1,D1
00002B72  2F01      4788          move.l    D1,-(A7)
00002B74  223C 00FF 4789          move.l    #16711680,D1
00002B78  0000      
00002B7A  C283      4790          and.l     D3,D1
00002B7C  E089      4791          lsr.l     #8,D1
00002B7E  E089      4792          lsr.l     #8,D1
00002B80  2F01      4793          move.l    D1,-(A7)
00002B82  4879 0000 4794          pea       @m68kde~2_159.L
00002B86  4EC2      
00002B88  4E92      4795          jsr       (A2)
00002B8A  DEFC 000C 4796          add.w     #12,A7
                    4797   ; mem_error_flag = 1;
00002B8E  7E01      4798          moveq     #1,D7
                    4799   ; break;
00002B90  6000 00A8 4800          bra       MemoryTest_82
                    4801   MemoryTest_101:
                    4802   ; }
                    4803   ; *(current_address + 2) = (0x0000FF00 & user_data) >> 8;
00002B94  303C FF00 4804          move.w    #65280,D0
00002B98  C0BC 0000 4805          and.l     #65535,D0
00002B9C  FFFF      
00002B9E  C083      4806          and.l     D3,D0
00002BA0  E088      4807          lsr.l     #8,D0
00002BA2  2042      4808          move.l    D2,A0
00002BA4  1140 0002 4809          move.b    D0,2(A0)
                    4810   ; if (*(current_address + 2) != ((0x0000FF00 & user_data) >> 8)) //read the data and confirm if it is written correctly
00002BA8  2042      4811          move.l    D2,A0
00002BAA  1028 0002 4812          move.b    2(A0),D0
00002BAE  C0BC 0000 4813          and.l     #255,D0
00002BB2  00FF      
00002BB4  323C FF00 4814          move.w    #65280,D1
00002BB8  C2BC 0000 4815          and.l     #65535,D1
00002BBC  FFFF      
00002BBE  C283      4816          and.l     D3,D1
00002BC0  E089      4817          lsr.l     #8,D1
00002BC2  B081      4818          cmp.l     D1,D0
00002BC4  6728      4819          beq.s     MemoryTest_103
                    4820   ; {
                    4821   ; printf("\r\nError writing %x to address %x", (0x0000FF00 & user_data) >> 8, (current_address+2));
00002BC6  2202      4822          move.l    D2,D1
00002BC8  5481      4823          addq.l    #2,D1
00002BCA  2F01      4824          move.l    D1,-(A7)
00002BCC  323C FF00 4825          move.w    #65280,D1
00002BD0  C2BC 0000 4826          and.l     #65535,D1
00002BD4  FFFF      
00002BD6  C283      4827          and.l     D3,D1
00002BD8  E089      4828          lsr.l     #8,D1
00002BDA  2F01      4829          move.l    D1,-(A7)
00002BDC  4879 0000 4830          pea       @m68kde~2_159.L
00002BE0  4EC2      
00002BE2  4E92      4831          jsr       (A2)
00002BE4  DEFC 000C 4832          add.w     #12,A7
                    4833   ; mem_error_flag = 1;
00002BE8  7E01      4834          moveq     #1,D7
                    4835   ; break;
00002BEA  6000 004E 4836          bra       MemoryTest_82
                    4837   MemoryTest_103:
                    4838   ; }
                    4839   ; *(current_address + 3) = (0x000000FF) & user_data;
00002BEE  303C 00FF 4840          move.w    #255,D0
00002BF2  48C0      4841          ext.l     D0
00002BF4  C083      4842          and.l     D3,D0
00002BF6  2042      4843          move.l    D2,A0
00002BF8  1140 0003 4844          move.b    D0,3(A0)
                    4845   ; if (*(current_address + 3) != ((0x000000FF) & user_data)) //read the data and confirm if it is written correctly
00002BFC  2042      4846          move.l    D2,A0
00002BFE  1028 0003 4847          move.b    3(A0),D0
00002C02  C0BC 0000 4848          and.l     #255,D0
00002C06  00FF      
00002C08  323C 00FF 4849          move.w    #255,D1
00002C0C  48C1      4850          ext.l     D1
00002C0E  C283      4851          and.l     D3,D1
00002C10  B081      4852          cmp.l     D1,D0
00002C12  6720      4853          beq.s     MemoryTest_105
                    4854   ; {
                    4855   ; printf("\r\nError writing %x to address %x", (0x000000FF) & user_data, (current_address+3));
00002C14  2202      4856          move.l    D2,D1
00002C16  5681      4857          addq.l    #3,D1
00002C18  2F01      4858          move.l    D1,-(A7)
00002C1A  323C 00FF 4859          move.w    #255,D1
00002C1E  48C1      4860          ext.l     D1
00002C20  C283      4861          and.l     D3,D1
00002C22  2F01      4862          move.l    D1,-(A7)
00002C24  4879 0000 4863          pea       @m68kde~2_159.L
00002C28  4EC2      
00002C2A  4E92      4864          jsr       (A2)
00002C2C  DEFC 000C 4865          add.w     #12,A7
                    4866   ; mem_error_flag = 1;
00002C30  7E01      4867          moveq     #1,D7
                    4868   ; break;
00002C32  6006      4869          bra.s     MemoryTest_82
                    4870   MemoryTest_105:
00002C34  D48B      4871          add.l     A3,D2
00002C36  6000 FD3E 4872          bra       MemoryTest_80
                    4873   MemoryTest_82:
                    4874   ; }
                    4875   ; }
                    4876   ; }
                    4877   ; if(mem_error_flag == 0){
00002C3A  4A87      4878          tst.l     D7
00002C3C  660C      4879          bne.s     MemoryTest_107
                    4880   ; printf("\r\nWriting finished at %08x", end_address);
00002C3E  2F06      4881          move.l    D6,-(A7)
00002C40  4879 0000 4882          pea       @m68kde~2_162.L
00002C44  4F22      
00002C46  4E92      4883          jsr       (A2)
00002C48  504F      4884          addq.w    #8,A7
                    4885   MemoryTest_107:
00002C4A  4CDF 3CFC 4886          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00002C4E  4E5E      4887          unlk      A6
00002C50  4E75      4888          rts
                    4889   ; }
                    4890   ; }
                    4891   ; }
                    4892   ; void main(void)
                    4893   ; {
                    4894   _main:
00002C52  4E56 FFF4 4895          link      A6,#-12
00002C56  48E7 3030 4896          movem.l   D2/D3/A2/A3,-(A7)
00002C5A  45F8 0A30 4897          lea       _InstallExceptionHandler.L,A2
00002C5E  47F9 0000 4898          lea       _printf.L,A3
00002C62  30D4      
                    4899   ; char c ;
                    4900   ; int i, j ;
                    4901   ; char *BugMessage = "Student's Names: Jinil Patel and Saif Abdelazim";
00002C64  41F9 0000 4902          lea       @m68kde~2_163.L,A0
00002C68  4F3E      
00002C6A  2608      4903          move.l    A0,D3
                    4904   ; char *CopyrightMessage = "Student #: 38240727 and  62639422";
00002C6C  41F9 0000 4905          lea       @m68kde~2_164.L,A0
00002C70  4F6E      
00002C72  2D48 FFFC 4906          move.l    A0,-4(A6)
                    4907   ; KillAllBreakPoints() ;
00002C76  4EB8 1C1C 4908          jsr       _KillAllBreakPoints
                    4909   ; i = x = y = z = PortA_Count = 0;
00002C7A  42B9 0B00 4910          clr.l     _PortA_Count.L
00002C7E  00D4      
00002C80  42B9 0B00 4911          clr.l     _z.L
00002C84  00D0      
00002C86  42B9 0B00 4912          clr.l     _y.L
00002C8A  00CC      
00002C8C  42B9 0B00 4913          clr.l     _x.L
00002C90  00C8      
00002C92  4282      4914          clr.l     D2
                    4915   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002C94  42B9 0B00 4916          clr.l     _GoFlag.L
00002C98  00DC      
00002C9A  42B9 0B00 4917          clr.l     _Trace.L
00002C9E  00D8      
                    4918   ; Echo = 1 ;
00002CA0  23FC 0000 4919          move.l    #1,_Echo.L
00002CA4  0001 0B00 
00002CA8  00E0      
                    4920   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002CAA  42B9 0B00 4921          clr.l     _d7.L
00002CAE  0100      
00002CB0  42B9 0B00 4922          clr.l     _d6.L
00002CB4  00FC      
00002CB6  42B9 0B00 4923          clr.l     _d5.L
00002CBA  00F8      
00002CBC  42B9 0B00 4924          clr.l     _d4.L
00002CC0  00F4      
00002CC2  42B9 0B00 4925          clr.l     _d3.L
00002CC6  00F0      
00002CC8  42B9 0B00 4926          clr.l     _d2.L
00002CCC  00EC      
00002CCE  42B9 0B00 4927          clr.l     _d1.L
00002CD2  00E8      
00002CD4  42B9 0B00 4928          clr.l     _d0.L
00002CD8  00E4      
                    4929   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002CDA  42B9 0B00 4930          clr.l     _a6.L
00002CDE  011C      
00002CE0  42B9 0B00 4931          clr.l     _a5.L
00002CE4  0118      
00002CE6  42B9 0B00 4932          clr.l     _a4.L
00002CEA  0114      
00002CEC  42B9 0B00 4933          clr.l     _a3.L
00002CF0  0110      
00002CF2  42B9 0B00 4934          clr.l     _a2.L
00002CF6  010C      
00002CF8  42B9 0B00 4935          clr.l     _a1.L
00002CFC  0108      
00002CFE  42B9 0B00 4936          clr.l     _a0.L
00002D02  0104      
                    4937   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002D04  23FC 0800 4938          move.l    #134217728,_PC.L
00002D08  0000 0B00 
00002D0C  0120      
00002D0E  23FC 0C00 4939          move.l    #201326592,_SSP.L
00002D12  0000 0B00 
00002D16  0124      
00002D18  23FC 0C00 4940          move.l    #201326592,_USP.L
00002D1C  0000 0B00 
00002D20  0128      
                    4941   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002D22  33FC 2000 4942          move.w    #8192,_SR.L
00002D26  0B00 012C 
                    4943   ; // Initialise Breakpoint variables
                    4944   ; for(i = 0; i < 8; i++)  {
00002D2A  4282      4945          clr.l     D2
                    4946   main_1:
00002D2C  0C82 0000 4947          cmp.l     #8,D2
00002D30  0008      
00002D32  6C00 004C 4948          bge       main_3
                    4949   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002D36  2002      4950          move.l    D2,D0
00002D38  E588      4951          lsl.l     #2,D0
00002D3A  41F9 0B00 4952          lea       _BreakPointAddress.L,A0
00002D3E  012E      
00002D40  42B0 0800 4953          clr.l     0(A0,D0.L)
                    4954   ; WatchPointAddress[i] = 0 ;
00002D44  2002      4955          move.l    D2,D0
00002D46  E588      4956          lsl.l     #2,D0
00002D48  41F9 0B00 4957          lea       _WatchPointAddress.L,A0
00002D4C  0182      
00002D4E  42B0 0800 4958          clr.l     0(A0,D0.L)
                    4959   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002D52  2002      4960          move.l    D2,D0
00002D54  E388      4961          lsl.l     #1,D0
00002D56  41F9 0B00 4962          lea       _BreakPointInstruction.L,A0
00002D5A  014E      
00002D5C  4270 0800 4963          clr.w     0(A0,D0.L)
                    4964   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002D60  2002      4965          move.l    D2,D0
00002D62  E588      4966          lsl.l     #2,D0
00002D64  41F9 0B00 4967          lea       _BreakPointSetOrCleared.L,A0
00002D68  015E      
00002D6A  42B0 0800 4968          clr.l     0(A0,D0.L)
                    4969   ; WatchPointSetOrCleared[i] = 0;
00002D6E  2002      4970          move.l    D2,D0
00002D70  E588      4971          lsl.l     #2,D0
00002D72  41F9 0B00 4972          lea       _WatchPointSetOrCleared.L,A0
00002D76  01A2      
00002D78  42B0 0800 4973          clr.l     0(A0,D0.L)
00002D7C  5282      4974          addq.l    #1,D2
00002D7E  60AC      4975          bra       main_1
                    4976   main_3:
                    4977   ; }
                    4978   ; Init_RS232() ;     // initialise the RS232 port
00002D80  4EB8 0B12 4979          jsr       _Init_RS232
                    4980   ; Init_LCD() ;
00002D84  4EB8 095E 4981          jsr       _Init_LCD
                    4982   ; for( i = 32; i < 48; i++)
00002D88  7420      4983          moveq     #32,D2
                    4984   main_4:
00002D8A  0C82 0000 4985          cmp.l     #48,D2
00002D8E  0030      
00002D90  6C0E      4986          bge.s     main_6
                    4987   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002D92  2F02      4988          move.l    D2,-(A7)
00002D94  4878 2494 4989          pea       _UnhandledTrap.L
00002D98  4E92      4990          jsr       (A2)
00002D9A  504F      4991          addq.w    #8,A7
00002D9C  5282      4992          addq.l    #1,D2
00002D9E  60EA      4993          bra       main_4
                    4994   main_6:
                    4995   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002DA0  4878 002F 4996          pea       47
00002DA4  4878 216E 4997          pea       _menu.L
00002DA8  4E92      4998          jsr       (A2)
00002DAA  504F      4999          addq.w    #8,A7
                    5000   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002DAC  4878 0019 5001          pea       25
00002DB0  4878 243A 5002          pea       _UnhandledIRQ1.L
00002DB4  4E92      5003          jsr       (A2)
00002DB6  504F      5004          addq.w    #8,A7
                    5005   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002DB8  4878 001A 5006          pea       26
00002DBC  4878 2446 5007          pea       _UnhandledIRQ2.L
00002DC0  4E92      5008          jsr       (A2)
00002DC2  504F      5009          addq.w    #8,A7
                    5010   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002DC4  4878 001B 5011          pea       27
00002DC8  4878 2452 5012          pea       _UnhandledIRQ3.L
00002DCC  4E92      5013          jsr       (A2)
00002DCE  504F      5014          addq.w    #8,A7
                    5015   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002DD0  4878 001C 5016          pea       28
00002DD4  4878 245E 5017          pea       _UnhandledIRQ4.L
00002DD8  4E92      5018          jsr       (A2)
00002DDA  504F      5019          addq.w    #8,A7
                    5020   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002DDC  4878 001D 5021          pea       29
00002DE0  4878 246A 5022          pea       _UnhandledIRQ5.L
00002DE4  4E92      5023          jsr       (A2)
00002DE6  504F      5024          addq.w    #8,A7
                    5025   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002DE8  4878 001E 5026          pea       30
00002DEC  4878 2476 5027          pea       _UnhandledIRQ6.L
00002DF0  4E92      5028          jsr       (A2)
00002DF2  504F      5029          addq.w    #8,A7
                    5030   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002DF4  4878 001F 5031          pea       31
00002DF8  4878 2488 5032          pea       _UnhandledIRQ7.L
00002DFC  4E92      5033          jsr       (A2)
00002DFE  504F      5034          addq.w    #8,A7
                    5035   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002E00  4878 002E 5036          pea       46
00002E04  4878 1EAA 5037          pea       _HandleBreakPoint.L
00002E08  4E92      5038          jsr       (A2)
00002E0A  504F      5039          addq.w    #8,A7
                    5040   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002E0C  4878 001D 5041          pea       29
00002E10  4878 158A 5042          pea       _DumpRegistersandPause.L
00002E14  4E92      5043          jsr       (A2)
00002E16  504F      5044          addq.w    #8,A7
                    5045   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002E18  4878 0002 5046          pea       2
00002E1C  4878 24A2 5047          pea       _BusError.L
00002E20  4E92      5048          jsr       (A2)
00002E22  504F      5049          addq.w    #8,A7
                    5050   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002E24  4878 0003 5051          pea       3
00002E28  4878 24B0 5052          pea       _AddressError.L
00002E2C  4E92      5053          jsr       (A2)
00002E2E  504F      5054          addq.w    #8,A7
                    5055   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002E30  4878 0004 5056          pea       4
00002E34  4878 24BE 5057          pea       _IllegalInstruction.L
00002E38  4E92      5058          jsr       (A2)
00002E3A  504F      5059          addq.w    #8,A7
                    5060   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002E3C  4878 0005 5061          pea       5
00002E40  4878 24CC 5062          pea       _Dividebyzero.L
00002E44  4E92      5063          jsr       (A2)
00002E46  504F      5064          addq.w    #8,A7
                    5065   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002E48  4878 0006 5066          pea       6
00002E4C  4878 24DA 5067          pea       _Check.L
00002E50  4E92      5068          jsr       (A2)
00002E52  504F      5069          addq.w    #8,A7
                    5070   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002E54  4878 0007 5071          pea       7
00002E58  4878 24E8 5072          pea       _Trapv.L
00002E5C  4E92      5073          jsr       (A2)
00002E5E  504F      5074          addq.w    #8,A7
                    5075   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002E60  4878 0008 5076          pea       8
00002E64  4878 24F6 5077          pea       _PrivError.L
00002E68  4E92      5078          jsr       (A2)
00002E6A  504F      5079          addq.w    #8,A7
                    5080   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002E6C  4878 000F 5081          pea       15
00002E70  4878 2504 5082          pea       _UnitIRQ.L
00002E74  4E92      5083          jsr       (A2)
00002E76  504F      5084          addq.w    #8,A7
                    5085   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002E78  4878 0018 5086          pea       24
00002E7C  4878 24DA 5087          pea       _Check.L
00002E80  4E92      5088          jsr       (A2)
00002E82  504F      5089          addq.w    #8,A7
                    5090   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002E84  4EB8 0BA6 5091          jsr       _FlushKeyboard
                    5092   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002E88  4239 0040 5093          clr.b     4194314
00002E8C  000A      
                    5094   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5095   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5096   main_7:
00002E8E  1039 0040 5097          move.b    4194306,D0
00002E92  0002      
00002E94  C03C 0002 5098          and.b     #2,D0
00002E98  0C00 0002 5099          cmp.b     #2,D0
00002E9C  662A      5100          bne.s     main_9
                    5101   ; LoadFromFlashChip();
00002E9E  4EB8 10C6 5102          jsr       _LoadFromFlashChip
                    5103   ; printf("\r\nRunning.....") ;
00002EA2  4879 0000 5104          pea       @m68kde~2_165.L
00002EA6  4F90      
00002EA8  4E93      5105          jsr       (A3)
00002EAA  584F      5106          addq.w    #4,A7
                    5107   ; Oline1("Running.....") ;
00002EAC  4879 0000 5108          pea       @m68kde~2_166.L
00002EB0  4FA0      
00002EB2  4EB8 0A02 5109          jsr       _Oline1
00002EB6  584F      5110          addq.w    #4,A7
                    5111   ; GoFlag = 1;
00002EB8  23FC 0000 5112          move.l    #1,_GoFlag.L
00002EBC  0001 0B00 
00002EC0  00DC      
                    5113   ; go() ;
00002EC2  4EB8 08B8 5114          jsr       _go
00002EC6  60C6      5115          bra       main_7
                    5116   main_9:
                    5117   ; }
                    5118   ; // otherwise start the debug monitor
                    5119   ; Oline0(BugMessage) ;
00002EC8  2F03      5120          move.l    D3,-(A7)
00002ECA  4EB8 09D4 5121          jsr       _Oline0
00002ECE  584F      5122          addq.w    #4,A7
                    5123   ; Oline1("By: PJ Davies") ;
00002ED0  4879 0000 5124          pea       @m68kde~2_167.L
00002ED4  4FAE      
00002ED6  4EB8 0A02 5125          jsr       _Oline1
00002EDA  584F      5126          addq.w    #4,A7
                    5127   ; printf("\r\n%s", BugMessage) ;
00002EDC  2F03      5128          move.l    D3,-(A7)
00002EDE  4879 0000 5129          pea       @m68kde~2_168.L
00002EE2  4FBC      
00002EE4  4E93      5130          jsr       (A3)
00002EE6  504F      5131          addq.w    #8,A7
                    5132   ; printf("\r\n%s", CopyrightMessage) ;
00002EE8  2F2E FFFC 5133          move.l    -4(A6),-(A7)
00002EEC  4879 0000 5134          pea       @m68kde~2_168.L
00002EF0  4FBC      
00002EF2  4E93      5135          jsr       (A3)
00002EF4  504F      5136          addq.w    #8,A7
                    5137   ; menu();
00002EF6  4EB8 216E 5138          jsr       _menu
00002EFA  4CDF 0C0C 5139          movem.l   (A7)+,D2/D3/A2/A3
00002EFE  4E5E      5140          unlk      A6
00002F00  4E75      5141          rts
                    5142   ; }
                    5143   _strcpy:
00002F02  206F 0004 5144          move.l    (4,A7),A0
00002F06  226F 0008 5145          move.l    (8,A7),A1
00002F0A  2008      5146          move.l    A0,D0
                    5147   strcpy_1:
00002F0C  10D9      5148          move.b    (A1)+,(A0)+
00002F0E  66FC      5149          bne.s     strcpy_1
00002F10  4E75      5150          rts
                    5151   ULDIV:
00002F12  4E56 0000 5152          link    A6,#0
00002F16  48E7 C000 5153          movem.l D0/D1,-(A7)
00002F1A  222E 0008 5154          move.l  8(A6),D1
00002F1E  202E 000C 5155          move.l  12(A6),D0
00002F22  6036      5156          bra.s   ldiv_3
                    5157   LDIV:
00002F24  4E56 0000 5158          link    A6,#0
00002F28  48E7 C000 5159          movem.l D0/D1,-(A7)
00002F2C  222E 0008 5160          move.l  8(A6),D1
00002F30  202E 000C 5161          move.l  12(A6),D0
00002F34  4A80      5162          tst.l   D0
00002F36  6A0E      5163          bpl.s   ldiv_1
00002F38  4480      5164          neg.l   D0
00002F3A  4A81      5165          tst.l   D1
00002F3C  6A14      5166          bpl.s   ldiv_2
00002F3E  4481      5167          neg.l   D1
00002F40  612A      5168          bsr.s   dodiv
00002F42  4481      5169          neg.l   D1
00002F44  6016      5170          bra.s   ldiv_4
                    5171   ldiv_1:
00002F46  4A81      5172          tst.l   D1
00002F48  6A10      5173          bpl.s   ldiv_3
00002F4A  4481      5174          neg.l   D1
00002F4C  611E      5175          bsr.s   dodiv
00002F4E  4480      5176          neg.l   D0
00002F50  600A      5177          bra.s   ldiv_4
                    5178   ldiv_2:
00002F52  6118      5179          bsr.s   dodiv
00002F54  4480      5180          neg.l   D0
00002F56  4481      5181          neg.l   D1
00002F58  6002      5182          bra.s   ldiv_4
                    5183   ldiv_3:
00002F5A  6110      5184          bsr.s   dodiv
                    5185   ldiv_4:
00002F5C  2D40 0008 5186          move.l  D0,8(A6)
00002F60  2D41 000C 5187          move.l  D1,12(A6)
00002F64  4CDF 0003 5188          movem.l (A7)+,D0/D1
00002F68  4E5E      5189          unlk    A6
00002F6A  4E75      5190          rts
                    5191   dodiv:
00002F6C  0C81 0000 5192          cmpi.l  #$FFFF,D1
00002F70  FFFF      
00002F72  6236      5193          bhi.s   dodiv_2
00002F74  0C80 0000 5194          cmpi.l  #$FFFF,D0
00002F78  FFFF      
00002F7A  6210      5195          bhi.s   dodiv_1
00002F7C  80C1      5196          divu    D1,D0
00002F7E  2200      5197          move.l  D0,D1
00002F80  4241      5198          clr.w   D1
00002F82  4841      5199          swap    D1
00002F84  0280 0000 5200          andi.l  #$FFFF,D0
00002F88  FFFF      
00002F8A  4E75      5201          rts
                    5202   dodiv_1:
00002F8C  48A7 A000 5203          movem.w D0/D2,-(A7)
00002F90  4240      5204          clr.w   D0
00002F92  4840      5205          swap    D0
00002F94  80C1      5206          divu    D1,D0
00002F96  3400      5207          move.w  D0,D2
00002F98  301F      5208          move.w  (A7)+,D0
00002F9A  80C1      5209          divu    D1,D0
00002F9C  4840      5210          swap    D0
00002F9E  4281      5211          clr.l   D1
00002FA0  3200      5212          move.w  D0,D1
00002FA2  3002      5213          move.w  D2,D0
00002FA4  4840      5214          swap    D0
00002FA6  341F      5215          move.w  (A7)+,D2
00002FA8  4E75      5216          rts
                    5217   dodiv_2:
00002FAA  48E7 3800 5218          movem.l D2/D3/D4,-(A7)
00002FAE  2401      5219          move.l  D1,D2
00002FB0  4242      5220          clr.w   D2
00002FB2  4842      5221          swap    D2
00002FB4  5282      5222          addq.l  #1,D2
00002FB6  2600      5223          move.l  D0,D3
00002FB8  2801      5224          move.l  D1,D4
00002FBA  2202      5225          move.l  D2,D1
00002FBC  61CE      5226          bsr.s   dodiv_1
00002FBE  2204      5227          move.l  D4,D1
00002FC0  82C2      5228          divu    D2,D1
00002FC2  80C1      5229          divu    D1,D0
00002FC4  0280 0000 5230          andi.l  #$FFFF,D0
00002FC8  FFFF      
                    5231   dodiv_3:
00002FCA  2204      5232          move.l  D4,D1
00002FCC  2404      5233          move.l  D4,D2
00002FCE  4842      5234          swap    D2
00002FD0  C2C0      5235          mulu    D0,D1
00002FD2  C4C0      5236          mulu    D0,D2
00002FD4  4842      5237          swap    D2
00002FD6  D282      5238          add.l   D2,D1
00002FD8  9283      5239          sub.l   D3,D1
00002FDA  620A      5240          bhi.s   dodiv_4
00002FDC  4481      5241          neg.l   D1
00002FDE  B881      5242          cmp.l   D1,D4
00002FE0  6208      5243          bhi.s   dodiv_5
00002FE2  5280      5244          addq.l  #1,D0
00002FE4  60E4      5245          bra.s   dodiv_3
                    5246   dodiv_4:
00002FE6  5380      5247          subq.l  #1,D0
00002FE8  60E0      5248          bra.s   dodiv_3
                    5249   dodiv_5:
00002FEA  4CDF 001C 5250          movem.l (A7)+,D2/D3/D4
00002FEE  4E75      5251          rts
                    5252   _putch:
00002FF0  4E56 0000 5253          link      A6,#0
00002FF4  2F02      5254          move.l    D2,-(A7)
00002FF6  242E 0008 5255          move.l    8(A6),D2
00002FFA  0C82 0000 5256          cmp.l     #10,D2
00002FFE  000A      
00003000  660A      5257          bne.s     putch_1
00003002  4878 000D 5258          pea       13
00003006  4EB8 0B3C 5259          jsr       __putch
0000300A  584F      5260          addq.w    #4,A7
                    5261   putch_1:
0000300C  2F02      5262          move.l    D2,-(A7)
0000300E  4EB8 0B3C 5263          jsr       __putch
00003012  584F      5264          addq.w    #4,A7
00003014  2002      5265          move.l    D2,D0
00003016  241F      5266          move.l    (A7)+,D2
00003018  4E5E      5267          unlk      A6
0000301A  4E75      5268          rts
                    5269   _getch:
0000301C  2F02      5270          move.l    D2,-(A7)
0000301E  2439 0B00 5271          move.l    __ungetbuf.L,D2
00003022  00C0      
00003024  2039 0B00 5272          move.l    __ungetbuf.L,D0
00003028  00C0      
0000302A  0C80 FFFF 5273          cmp.l     #-1,D0
0000302E  FFFF      
00003030  670C      5274          beq.s     getch_1
00003032  23FC FFFF 5275          move.l    #-1,__ungetbuf.L
00003036  FFFF 0B00 
0000303A  00C0      
0000303C  6010      5276          bra.s     getch_3
                    5277   getch_1:
0000303E  4EB8 0B68 5278          jsr       __getch
00003042  2400      5279          move.l    D0,D2
00003044  0C80 0000 5280          cmp.l     #13,D0
00003048  000D      
0000304A  6602      5281          bne.s     getch_3
0000304C  740A      5282          moveq     #10,D2
                    5283   getch_3:
0000304E  2002      5284          move.l    D2,D0
00003050  241F      5285          move.l    (A7)+,D2
00003052  4E75      5286          rts
                    5287   _tolower:
00003054  202F 0004 5288          move.l    4(A7),D0
00003058  0C80 0000 5289          cmp.l     #'A',D0
0000305C  0041      
0000305E  6D0E      5290          blt.s     tolower_1
00003060  0C80 0000 5291          cmp.l     #'Z',D0
00003064  005A      
00003066  6E06      5292          bgt.s     tolower_1
00003068  0680 0000 5293          add.l     #$20,D0
0000306C  0020      
                    5294   tolower_1:
0000306E  4E75      5295          rts
                    5296   _sprintf:
00003070  4E56 FFFC 5297          link      A6,#-4
00003074  2F02      5298          move.l    D2,-(A7)
00003076  41EE 000C 5299          lea       12(A6),A0
0000307A  5848      5300          addq.w    #4,A0
0000307C  2408      5301          move.l    A0,D2
0000307E  2F02      5302          move.l    D2,-(A7)
00003080  2F2E 000C 5303          move.l    12(A6),-(A7)
00003084  2F2E 0008 5304          move.l    8(A6),-(A7)
00003088  4EB9 0000 5305          jsr       _doprint
0000308C  31AA      
0000308E  DEFC 000C 5306          add.w     #12,A7
00003092  2D40 FFFC 5307          move.l    D0,-4(A6)
00003096  4282      5308          clr.l     D2
00003098  202E FFFC 5309          move.l    -4(A6),D0
0000309C  241F      5310          move.l    (A7)+,D2
0000309E  4E5E      5311          unlk      A6
000030A0  4E75      5312          rts
                    5313   _strcat:
000030A2  206F 0004 5314          move.l    (4,A7),A0
000030A6  226F 0008 5315          move.l    (8,A7),A1
000030AA  2008      5316          move.l    A0,D0
                    5317   strcat_1:
000030AC  4A18      5318          tst.b     (A0)+
000030AE  66FC      5319          bne.s     strcat_1
000030B0  5388      5320          subq.l    #1,A0
                    5321   strcat_2:
000030B2  10D9      5322          move.b    (A1)+,(A0)+
000030B4  66FC      5323          bne.s     strcat_2
000030B6  4E75      5324          rts
                    5325   _toupper:
000030B8  202F 0004 5326          move.l    4(A7),D0
000030BC  0C80 0000 5327          cmp.l     #'a',D0
000030C0  0061      
000030C2  6D0E      5328          blt.s     toupper_1
000030C4  0C80 0000 5329          cmp.l     #'z',D0
000030C8  007A      
000030CA  6E06      5330          bgt.s     toupper_1
000030CC  0480 0000 5331          sub.l     #$20,D0
000030D0  0020      
                    5332   toupper_1:
000030D2  4E75      5333          rts
                    5334   _printf:
000030D4  4E56 FFFC 5335          link      A6,#-4
000030D8  2F02      5336          move.l    D2,-(A7)
000030DA  41EE 0008 5337          lea       8(A6),A0
000030DE  5848      5338          addq.w    #4,A0
000030E0  2408      5339          move.l    A0,D2
000030E2  2F02      5340          move.l    D2,-(A7)
000030E4  2F2E 0008 5341          move.l    8(A6),-(A7)
000030E8  42A7      5342          clr.l     -(A7)
000030EA  4EB9 0000 5343          jsr       _doprint
000030EE  31AA      
000030F0  DEFC 000C 5344          add.w     #12,A7
000030F4  2D40 FFFC 5345          move.l    D0,-4(A6)
000030F8  4282      5346          clr.l     D2
000030FA  202E FFFC 5347          move.l    -4(A6),D0
000030FE  241F      5348          move.l    (A7)+,D2
00003100  4E5E      5349          unlk      A6
00003102  4E75      5350          rts
                    5351   @doprint_copy:
00003104  4E56 0000 5352          link      A6,#0
00003108  206E 0008 5353          move.l    8(A6),A0
0000310C  4A90      5354          tst.l     (A0)
0000310E  6710      5355          beq.s     @doprint_copy_1
00003110  202E 000C 5356          move.l    12(A6),D0
00003114  206E 0008 5357          move.l    8(A6),A0
00003118  2250      5358          move.l    (A0),A1
0000311A  5290      5359          addq.l    #1,(A0)
0000311C  1280      5360          move.b    D0,(A1)
0000311E  600A      5361          bra.s     @doprint_copy_2
                    5362   @doprint_copy_1:
00003120  2F2E 000C 5363          move.l    12(A6),-(A7)
00003124  4EB8 2FF0 5364          jsr       _putch
00003128  584F      5365          addq.w    #4,A7
                    5366   @doprint_copy_2:
0000312A  4E5E      5367          unlk      A6
0000312C  4E75      5368          rts
                    5369   @doprint_getval:
0000312E  4E56 0000 5370          link      A6,#0
00003132  48E7 3000 5371          movem.l   D2/D3,-(A7)
00003136  262E 0008 5372          move.l    8(A6),D3
0000313A  4282      5373          clr.l     D2
0000313C  2043      5374          move.l    D3,A0
0000313E  2050      5375          move.l    (A0),A0
00003140  1010      5376          move.b    (A0),D0
00003142  0C00 002A 5377          cmp.b     #42,D0
00003146  6612      5378          bne.s     @doprint_getval_1
00003148  206E 000C 5379          move.l    12(A6),A0
0000314C  2250      5380          move.l    (A0),A1
0000314E  5890      5381          addq.l    #4,(A0)
00003150  2411      5382          move.l    (A1),D2
00003152  2043      5383          move.l    D3,A0
00003154  5290      5384          addq.l    #1,(A0)
00003156  6000 0048 5385          bra       @doprint_getval_5
                    5386   @doprint_getval_1:
0000315A  7001      5387          moveq     #1,D0
0000315C  2043      5388          move.l    D3,A0
0000315E  2050      5389          move.l    (A0),A0
00003160  1210      5390          move.b    (A0),D1
00003162  4881      5391          ext.w     D1
00003164  48C1      5392          ext.l     D1
00003166  D081      5393          add.l     D1,D0
00003168  41F9 0000 5394          lea       __ctype.L,A0
0000316C  4FCE      
0000316E  1030 0800 5395          move.b    0(A0,D0.L),D0
00003172  C03C 0004 5396          and.b     #4,D0
00003176  6728      5397          beq.s     @doprint_getval_5
00003178  2F02      5398          move.l    D2,-(A7)
0000317A  4878 000A 5399          pea       10
0000317E  4EB9 0000 5400          jsr       LMUL
00003182  3946      
00003184  2017      5401          move.l    (A7),D0
00003186  504F      5402          addq.w    #8,A7
00003188  2043      5403          move.l    D3,A0
0000318A  2250      5404          move.l    (A0),A1
0000318C  5290      5405          addq.l    #1,(A0)
0000318E  1211      5406          move.b    (A1),D1
00003190  4881      5407          ext.w     D1
00003192  48C1      5408          ext.l     D1
00003194  D081      5409          add.l     D1,D0
00003196  0480 0000 5410          sub.l     #48,D0
0000319A  0030      
0000319C  2400      5411          move.l    D0,D2
0000319E  60BA      5412          bra       @doprint_getval_1
                    5413   @doprint_getval_5:
000031A0  2002      5414          move.l    D2,D0
000031A2  4CDF 000C 5415          movem.l   (A7)+,D2/D3
000031A6  4E5E      5416          unlk      A6
000031A8  4E75      5417          rts
                    5418   _doprint:
000031AA  4E56 FFCC 5419          link      A6,#-52
000031AE  48E7 3F3C 5420          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000031B2  45EE 0008 5421          lea       8(A6),A2
000031B6  47F8 3104 5422          lea       @doprint_copy.L,A3
000031BA  49F9 0000 5423          lea       _ultoa.L,A4
000031BE  38D2      
000031C0  4286      5424          clr.l     D6
                    5425   doprint_1:
000031C2  206E 000C 5426          move.l    12(A6),A0
000031C6  4A10      5427          tst.b     (A0)
000031C8  6700 05EA 5428          beq       doprint_3
000031CC  206E 000C 5429          move.l    12(A6),A0
000031D0  1010      5430          move.b    (A0),D0
000031D2  0C00 0025 5431          cmp.b     #37,D0
000031D6  671C      5432          beq.s     doprint_4
000031D8  206E 000C 5433          move.l    12(A6),A0
000031DC  52AE 000C 5434          addq.l    #1,12(A6)
000031E0  1210      5435          move.b    (A0),D1
000031E2  4881      5436          ext.w     D1
000031E4  48C1      5437          ext.l     D1
000031E6  2F01      5438          move.l    D1,-(A7)
000031E8  2F0A      5439          move.l    A2,-(A7)
000031EA  4E93      5440          jsr       (A3)
000031EC  504F      5441          addq.w    #8,A7
000031EE  5286      5442          addq.l    #1,D6
000031F0  6000 05BE 5443          bra       doprint_2
                    5444   doprint_4:
000031F4  52AE 000C 5445          addq.l    #1,12(A6)
000031F8  422E FFD3 5446          clr.b     -45(A6)
000031FC  422E FFD2 5447          clr.b     -46(A6)
00003200  422E FFD0 5448          clr.b     -48(A6)
00003204  422E FFCF 5449          clr.b     -49(A6)
00003208  422E FFCE 5450          clr.b     -50(A6)
0000320C  422E FFCD 5451          clr.b     -51(A6)
00003210  42AE FFFC 5452          clr.l     -4(A6)
00003214  7AFF      5453          moveq     #-1,D5
00003216  41EE FFDC 5454          lea       -36(A6),A0
0000321A  2608      5455          move.l    A0,D3
0000321C  2408      5456          move.l    A0,D2
                    5457   doprint_6:
0000321E  206E 000C 5458          move.l    12(A6),A0
00003222  1010      5459          move.b    (A0),D0
00003224  4880      5460          ext.w     D0
00003226  48C0      5461          ext.l     D0
00003228  0C80 0000 5462          cmp.l     #43,D0
0000322C  002B      
0000322E  6730      5463          beq.s     doprint_12
00003230  6E18      5464          bgt.s     doprint_15
00003232  0C80 0000 5465          cmp.l     #35,D0
00003236  0023      
00003238  6700 003E 5466          beq       doprint_14
0000323C  6E00 0046 5467          bgt       doprint_9
00003240  0C80 0000 5468          cmp.l     #32,D0
00003244  0020      
00003246  6724      5469          beq.s     doprint_13
00003248  603A      5470          bra.s     doprint_9
                    5471   doprint_15:
0000324A  0C80 0000 5472          cmp.l     #45,D0
0000324E  002D      
00003250  6702      5473          beq.s     doprint_11
00003252  6030      5474          bra.s     doprint_9
                    5475   doprint_11:
00003254  1D7C 0001 5476          move.b    #1,-51(A6)
00003258  FFCD      
0000325A  52AE 000C 5477          addq.l    #1,12(A6)
0000325E  6026      5478          bra.s     doprint_7
                    5479   doprint_12:
00003260  1D7C 0001 5480          move.b    #1,-50(A6)
00003264  FFCE      
00003266  52AE 000C 5481          addq.l    #1,12(A6)
0000326A  601A      5482          bra.s     doprint_7
                    5483   doprint_13:
0000326C  1D7C 0001 5484          move.b    #1,-49(A6)
00003270  FFCF      
00003272  52AE 000C 5485          addq.l    #1,12(A6)
00003276  600E      5486          bra.s     doprint_7
                    5487   doprint_14:
00003278  1D7C 0001 5488          move.b    #1,-48(A6)
0000327C  FFD0      
0000327E  52AE 000C 5489          addq.l    #1,12(A6)
00003282  6002      5490          bra.s     doprint_7
                    5491   doprint_9:
00003284  6002      5492          bra.s     doprint_8
                    5493   doprint_7:
00003286  6096      5494          bra       doprint_6
                    5495   doprint_8:
00003288  206E 000C 5496          move.l    12(A6),A0
0000328C  1010      5497          move.b    (A0),D0
0000328E  0C00 0030 5498          cmp.b     #48,D0
00003292  660A      5499          bne.s     doprint_16
00003294  52AE 000C 5500          addq.l    #1,12(A6)
00003298  1D7C 0001 5501          move.b    #1,-46(A6)
0000329C  FFD2      
                    5502   doprint_16:
0000329E  486E 0010 5503          pea       16(A6)
000032A2  486E 000C 5504          pea       12(A6)
000032A6  4EB8 312E 5505          jsr       @doprint_getval
000032AA  504F      5506          addq.w    #8,A7
000032AC  2A40      5507          move.l    D0,A5
000032AE  206E 000C 5508          move.l    12(A6),A0
000032B2  1010      5509          move.b    (A0),D0
000032B4  0C00 002E 5510          cmp.b     #46,D0
000032B8  6614      5511          bne.s     doprint_18
000032BA  52AE 000C 5512          addq.l    #1,12(A6)
000032BE  486E 0010 5513          pea       16(A6)
000032C2  486E 000C 5514          pea       12(A6)
000032C6  4EB8 312E 5515          jsr       @doprint_getval
000032CA  504F      5516          addq.w    #8,A7
000032CC  2A00      5517          move.l    D0,D5
                    5518   doprint_18:
000032CE  206E 000C 5519          move.l    12(A6),A0
000032D2  1010      5520          move.b    (A0),D0
000032D4  0C00 006C 5521          cmp.b     #108,D0
000032D8  660A      5522          bne.s     doprint_20
000032DA  52AE 000C 5523          addq.l    #1,12(A6)
000032DE  1D7C 0001 5524          move.b    #1,-45(A6)
000032E2  FFD3      
                    5525   doprint_20:
000032E4  206E 000C 5526          move.l    12(A6),A0
000032E8  1010      5527          move.b    (A0),D0
000032EA  4880      5528          ext.w     D0
000032EC  48C0      5529          ext.l     D0
000032EE  0C80 0000 5530          cmp.l     #111,D0
000032F2  006F      
000032F4  6700 00D8 5531          beq       doprint_27
000032F8  6E34      5532          bgt.s     doprint_33
000032FA  0C80 0000 5533          cmp.l     #100,D0
000032FE  0064      
00003300  6700 0054 5534          beq       doprint_24
00003304  6E1C      5535          bgt.s     doprint_34
00003306  0C80 0000 5536          cmp.l     #99,D0
0000330A  0063      
0000330C  6700 0130 5537          beq       doprint_30
00003310  6E00 0174 5538          bgt       doprint_22
00003314  0C80 0000 5539          cmp.l     #88,D0
00003318  0058      
0000331A  6700 00EA 5540          beq       doprint_28
0000331E  6000 0166 5541          bra       doprint_22
                    5542   doprint_34:
00003322  0C80 0000 5543          cmp.l     #105,D0
00003326  0069      
00003328  672C      5544          beq.s     doprint_24
0000332A  6000 015A 5545          bra       doprint_22
                    5546   doprint_33:
0000332E  0C80 0000 5547          cmp.l     #117,D0
00003332  0075      
00003334  6700 0060 5548          beq       doprint_26
00003338  6E0E      5549          bgt.s     doprint_35
0000333A  0C80 0000 5550          cmp.l     #115,D0
0000333E  0073      
00003340  6700 0124 5551          beq       doprint_31
00003344  6000 0140 5552          bra       doprint_22
                    5553   doprint_35:
00003348  0C80 0000 5554          cmp.l     #120,D0
0000334C  0078      
0000334E  6700 00B6 5555          beq       doprint_28
00003352  6000 0132 5556          bra       doprint_22
                    5557   doprint_24:
00003356  4A2E FFD3 5558          tst.b     -45(A6)
0000335A  671C      5559          beq.s     doprint_36
0000335C  4878 000A 5560          pea       10
00003360  2F03      5561          move.l    D3,-(A7)
00003362  206E 0010 5562          move.l    16(A6),A0
00003366  58AE 0010 5563          addq.l    #4,16(A6)
0000336A  2F10      5564          move.l    (A0),-(A7)
0000336C  4EB9 0000 5565          jsr       _ltoa
00003370  384E      
00003372  DEFC 000C 5566          add.w     #12,A7
00003376  601A      5567          bra.s     doprint_37
                    5568   doprint_36:
00003378  4878 000A 5569          pea       10
0000337C  2F03      5570          move.l    D3,-(A7)
0000337E  206E 0010 5571          move.l    16(A6),A0
00003382  58AE 0010 5572          addq.l    #4,16(A6)
00003386  2F10      5573          move.l    (A0),-(A7)
00003388  4EB9 0000 5574          jsr       _ltoa
0000338C  384E      
0000338E  DEFC 000C 5575          add.w     #12,A7
                    5576   doprint_37:
00003392  6000 0100 5577          bra       doprint_23
                    5578   doprint_26:
00003396  4A2E FFD3 5579          tst.b     -45(A6)
0000339A  6718      5580          beq.s     doprint_38
0000339C  4878 000A 5581          pea       10
000033A0  2F03      5582          move.l    D3,-(A7)
000033A2  206E 0010 5583          move.l    16(A6),A0
000033A6  58AE 0010 5584          addq.l    #4,16(A6)
000033AA  2F10      5585          move.l    (A0),-(A7)
000033AC  4E94      5586          jsr       (A4)
000033AE  DEFC 000C 5587          add.w     #12,A7
000033B2  6016      5588          bra.s     doprint_39
                    5589   doprint_38:
000033B4  4878 000A 5590          pea       10
000033B8  2F03      5591          move.l    D3,-(A7)
000033BA  206E 0010 5592          move.l    16(A6),A0
000033BE  58AE 0010 5593          addq.l    #4,16(A6)
000033C2  2F10      5594          move.l    (A0),-(A7)
000033C4  4E94      5595          jsr       (A4)
000033C6  DEFC 000C 5596          add.w     #12,A7
                    5597   doprint_39:
000033CA  6000 00C8 5598          bra       doprint_23
                    5599   doprint_27:
000033CE  4A2E FFD3 5600          tst.b     -45(A6)
000033D2  6718      5601          beq.s     doprint_40
000033D4  4878 0008 5602          pea       8
000033D8  2F03      5603          move.l    D3,-(A7)
000033DA  206E 0010 5604          move.l    16(A6),A0
000033DE  58AE 0010 5605          addq.l    #4,16(A6)
000033E2  2F10      5606          move.l    (A0),-(A7)
000033E4  4E94      5607          jsr       (A4)
000033E6  DEFC 000C 5608          add.w     #12,A7
000033EA  6016      5609          bra.s     doprint_41
                    5610   doprint_40:
000033EC  4878 0008 5611          pea       8
000033F0  2F03      5612          move.l    D3,-(A7)
000033F2  206E 0010 5613          move.l    16(A6),A0
000033F6  58AE 0010 5614          addq.l    #4,16(A6)
000033FA  2F10      5615          move.l    (A0),-(A7)
000033FC  4E94      5616          jsr       (A4)
000033FE  DEFC 000C 5617          add.w     #12,A7
                    5618   doprint_41:
00003402  6000 0090 5619          bra       doprint_23
                    5620   doprint_28:
00003406  4A2E FFD3 5621          tst.b     -45(A6)
0000340A  6718      5622          beq.s     doprint_42
0000340C  4878 0010 5623          pea       16
00003410  2F03      5624          move.l    D3,-(A7)
00003412  206E 0010 5625          move.l    16(A6),A0
00003416  58AE 0010 5626          addq.l    #4,16(A6)
0000341A  2F10      5627          move.l    (A0),-(A7)
0000341C  4E94      5628          jsr       (A4)
0000341E  DEFC 000C 5629          add.w     #12,A7
00003422  6016      5630          bra.s     doprint_43
                    5631   doprint_42:
00003424  4878 0010 5632          pea       16
00003428  2F03      5633          move.l    D3,-(A7)
0000342A  206E 0010 5634          move.l    16(A6),A0
0000342E  58AE 0010 5635          addq.l    #4,16(A6)
00003432  2F10      5636          move.l    (A0),-(A7)
00003434  4E94      5637          jsr       (A4)
00003436  DEFC 000C 5638          add.w     #12,A7
                    5639   doprint_43:
0000343A  6000 0058 5640          bra       doprint_23
                    5641   doprint_30:
0000343E  206E 0010 5642          move.l    16(A6),A0
00003442  58AE 0010 5643          addq.l    #4,16(A6)
00003446  2010      5644          move.l    (A0),D0
00003448  2042      5645          move.l    D2,A0
0000344A  5282      5646          addq.l    #1,D2
0000344C  1080      5647          move.b    D0,(A0)
0000344E  2042      5648          move.l    D2,A0
00003450  4210      5649          clr.b     (A0)
00003452  200D      5650          move.l    A5,D0
00003454  6704      5651          beq.s     doprint_44
00003456  200D      5652          move.l    A5,D0
00003458  6006      5653          bra.s     doprint_45
                    5654   doprint_44:
0000345A  7001      5655          moveq     #1,D0
0000345C  4880      5656          ext.w     D0
0000345E  48C0      5657          ext.l     D0
                    5658   doprint_45:
00003460  2A00      5659          move.l    D0,D5
00003462  6000 0030 5660          bra       doprint_23
                    5661   doprint_31:
00003466  206E 0010 5662          move.l    16(A6),A0
0000346A  58AE 0010 5663          addq.l    #4,16(A6)
0000346E  2610      5664          move.l    (A0),D3
00003470  0C85 FFFF 5665          cmp.l     #-1,D5
00003474  FFFF      
00003476  660C      5666          bne.s     doprint_46
00003478  2F03      5667          move.l    D3,-(A7)
0000347A  4EB9 0000 5668          jsr       _strlen
0000347E  39D4      
00003480  584F      5669          addq.w    #4,A7
00003482  2A00      5670          move.l    D0,D5
                    5671   doprint_46:
00003484  600E      5672          bra.s     doprint_23
                    5673   doprint_22:
00003486  206E 000C 5674          move.l    12(A6),A0
0000348A  2242      5675          move.l    D2,A1
0000348C  5282      5676          addq.l    #1,D2
0000348E  1290      5677          move.b    (A0),(A1)
00003490  2042      5678          move.l    D2,A0
00003492  4210      5679          clr.b     (A0)
                    5680   doprint_23:
00003494  2F03      5681          move.l    D3,-(A7)
00003496  4EB9 0000 5682          jsr       _strlen
0000349A  39D4      
0000349C  584F      5683          addq.w    #4,A7
0000349E  1800      5684          move.b    D0,D4
000034A0  206E 000C 5685          move.l    12(A6),A0
000034A4  1010      5686          move.b    (A0),D0
000034A6  0C00 0073 5687          cmp.b     #115,D0
000034AA  661C      5688          bne.s     doprint_48
000034AC  0C85 0000 5689          cmp.l     #0,D5
000034B0  0000      
000034B2  6D14      5690          blt.s     doprint_48
000034B4  4884      5691          ext.w     D4
000034B6  48C4      5692          ext.l     D4
000034B8  B885      5693          cmp.l     D5,D4
000034BA  6F04      5694          ble.s     doprint_50
000034BC  2005      5695          move.l    D5,D0
000034BE  6006      5696          bra.s     doprint_51
                    5697   doprint_50:
000034C0  1004      5698          move.b    D4,D0
000034C2  4880      5699          ext.w     D0
000034C4  48C0      5700          ext.l     D0
                    5701   doprint_51:
000034C6  1800      5702          move.b    D0,D4
                    5703   doprint_48:
000034C8  206E 000C 5704          move.l    12(A6),A0
000034CC  1010      5705          move.b    (A0),D0
000034CE  0C00 0058 5706          cmp.b     #88,D0
000034D2  6600 0026 5707          bne       doprint_56
000034D6  41EE FFDC 5708          lea       -36(A6),A0
000034DA  2408      5709          move.l    A0,D2
                    5710   doprint_54:
000034DC  2042      5711          move.l    D2,A0
000034DE  4A10      5712          tst.b     (A0)
000034E0  6718      5713          beq.s     doprint_56
000034E2  2042      5714          move.l    D2,A0
000034E4  1210      5715          move.b    (A0),D1
000034E6  4881      5716          ext.w     D1
000034E8  48C1      5717          ext.l     D1
000034EA  2F01      5718          move.l    D1,-(A7)
000034EC  4EB8 30B8 5719          jsr       _toupper
000034F0  584F      5720          addq.w    #4,A7
000034F2  2042      5721          move.l    D2,A0
000034F4  1080      5722          move.b    D0,(A0)
000034F6  5282      5723          addq.l    #1,D2
000034F8  60E2      5724          bra       doprint_54
                    5725   doprint_56:
000034FA  7E00      5726          moveq     #0,D7
000034FC  41EE FFD4 5727          lea       -44(A6),A0
00003500  2408      5728          move.l    A0,D2
00003502  206E 000C 5729          move.l    12(A6),A0
00003506  1010      5730          move.b    (A0),D0
00003508  0C00 0064 5731          cmp.b     #100,D0
0000350C  670E      5732          beq.s     doprint_59
0000350E  206E 000C 5733          move.l    12(A6),A0
00003512  1010      5734          move.b    (A0),D0
00003514  0C00 0069 5735          cmp.b     #105,D0
00003518  6600 0068 5736          bne       doprint_65
                    5737   doprint_59:
0000351C  102E FFCE 5738          move.b    -50(A6),D0
00003520  4880      5739          ext.w     D0
00003522  48C0      5740          ext.l     D0
00003524  4A80      5741          tst.l     D0
00003526  660C      5742          bne.s     doprint_62
00003528  2043      5743          move.l    D3,A0
0000352A  1010      5744          move.b    (A0),D0
0000352C  0C00 002D 5745          cmp.b     #45,D0
00003530  6600 0028 5746          bne       doprint_60
                    5747   doprint_62:
00003534  2043      5748          move.l    D3,A0
00003536  1010      5749          move.b    (A0),D0
00003538  0C00 002D 5750          cmp.b     #45,D0
0000353C  660E      5751          bne.s     doprint_63
0000353E  2043      5752          move.l    D3,A0
00003540  5283      5753          addq.l    #1,D3
00003542  2242      5754          move.l    D2,A1
00003544  5282      5755          addq.l    #1,D2
00003546  1290      5756          move.b    (A0),(A1)
00003548  5304      5757          subq.b    #1,D4
0000354A  6008      5758          bra.s     doprint_64
                    5759   doprint_63:
0000354C  2042      5760          move.l    D2,A0
0000354E  5282      5761          addq.l    #1,D2
00003550  10BC 002B 5762          move.b    #43,(A0)
                    5763   doprint_64:
00003554  5287      5764          addq.l    #1,D7
00003556  6000 002A 5765          bra       doprint_65
                    5766   doprint_60:
0000355A  4A2E FFCF 5767          tst.b     -49(A6)
0000355E  6722      5768          beq.s     doprint_65
00003560  2043      5769          move.l    D3,A0
00003562  1010      5770          move.b    (A0),D0
00003564  0C00 002D 5771          cmp.b     #45,D0
00003568  660E      5772          bne.s     doprint_67
0000356A  2043      5773          move.l    D3,A0
0000356C  5283      5774          addq.l    #1,D3
0000356E  2242      5775          move.l    D2,A1
00003570  5282      5776          addq.l    #1,D2
00003572  1290      5777          move.b    (A0),(A1)
00003574  5304      5778          subq.b    #1,D4
00003576  6008      5779          bra.s     doprint_68
                    5780   doprint_67:
00003578  2042      5781          move.l    D2,A0
0000357A  5282      5782          addq.l    #1,D2
0000357C  10BC 0020 5783          move.b    #32,(A0)
                    5784   doprint_68:
00003580  5287      5785          addq.l    #1,D7
                    5786   doprint_65:
00003582  4A2E FFD0 5787          tst.b     -48(A6)
00003586  6700 005A 5788          beq       doprint_77
0000358A  206E 000C 5789          move.l    12(A6),A0
0000358E  1010      5790          move.b    (A0),D0
00003590  4880      5791          ext.w     D0
00003592  48C0      5792          ext.l     D0
00003594  0C80 0000 5793          cmp.l     #111,D0
00003598  006F      
0000359A  671A      5794          beq.s     doprint_73
0000359C  6E0C      5795          bgt.s     doprint_76
0000359E  0C80 0000 5796          cmp.l     #88,D0
000035A2  0058      
000035A4  6710      5797          beq.s     doprint_73
000035A6  6000 003A 5798          bra       doprint_77
                    5799   doprint_76:
000035AA  0C80 0000 5800          cmp.l     #120,D0
000035AE  0078      
000035B0  6704      5801          beq.s     doprint_73
000035B2  6000 002E 5802          bra       doprint_77
                    5803   doprint_73:
000035B6  2042      5804          move.l    D2,A0
000035B8  5282      5805          addq.l    #1,D2
000035BA  10BC 0030 5806          move.b    #48,(A0)
000035BE  5287      5807          addq.l    #1,D7
000035C0  206E 000C 5808          move.l    12(A6),A0
000035C4  1010      5809          move.b    (A0),D0
000035C6  0C00 0078 5810          cmp.b     #120,D0
000035CA  670C      5811          beq.s     doprint_79
000035CC  206E 000C 5812          move.l    12(A6),A0
000035D0  1010      5813          move.b    (A0),D0
000035D2  0C00 0058 5814          cmp.b     #88,D0
000035D6  660A      5815          bne.s     doprint_77
                    5816   doprint_79:
000035D8  2042      5817          move.l    D2,A0
000035DA  5282      5818          addq.l    #1,D2
000035DC  10BC 0078 5819          move.b    #120,(A0)
000035E0  5287      5820          addq.l    #1,D7
                    5821   doprint_77:
000035E2  2042      5822          move.l    D2,A0
000035E4  4210      5823          clr.b     (A0)
000035E6  206E 000C 5824          move.l    12(A6),A0
000035EA  1010      5825          move.b    (A0),D0
000035EC  4880      5826          ext.w     D0
000035EE  48C0      5827          ext.l     D0
000035F0  0C80 0000 5828          cmp.l     #105,D0
000035F4  0069      
000035F6  6700 0076 5829          beq       doprint_82
000035FA  6E42      5830          bgt.s     doprint_93
000035FC  0C80 0000 5831          cmp.l     #99,D0
00003600  0063      
00003602  6700 0084 5832          beq       doprint_96
00003606  6E1C      5833          bgt.s     doprint_94
00003608  0C80 0000 5834          cmp.l     #88,D0
0000360C  0058      
0000360E  6700 005E 5835          beq       doprint_82
00003612  6E00 0184 5836          bgt       doprint_80
00003616  0C80 0000 5837          cmp.l     #69,D0
0000361A  0045      
0000361C  6700 0050 5838          beq       doprint_82
00003620  6000 0176 5839          bra       doprint_80
                    5840   doprint_94:
00003624  0C80 0000 5841          cmp.l     #101,D0
00003628  0065      
0000362A  6700 0042 5842          beq       doprint_82
0000362E  6E00 0168 5843          bgt       doprint_80
00003632  0C80 0000 5844          cmp.l     #100,D0
00003636  0064      
00003638  6734      5845          beq.s     doprint_82
0000363A  6000 015C 5846          bra       doprint_80
                    5847   doprint_93:
0000363E  0C80 0000 5848          cmp.l     #117,D0
00003642  0075      
00003644  6728      5849          beq.s     doprint_82
00003646  6E1A      5850          bgt.s     doprint_95
00003648  0C80 0000 5851          cmp.l     #115,D0
0000364C  0073      
0000364E  6700 0038 5852          beq       doprint_96
00003652  6E00 0144 5853          bgt       doprint_80
00003656  0C80 0000 5854          cmp.l     #111,D0
0000365A  006F      
0000365C  6710      5855          beq.s     doprint_82
0000365E  6000 0138 5856          bra       doprint_80
                    5857   doprint_95:
00003662  0C80 0000 5858          cmp.l     #120,D0
00003666  0078      
00003668  6704      5859          beq.s     doprint_82
0000366A  6000 012C 5860          bra       doprint_80
                    5861   doprint_82:
0000366E  4A2E FFD2 5862          tst.b     -46(A6)
00003672  6714      5863          beq.s     doprint_96
00003674  4A2E FFCD 5864          tst.b     -51(A6)
00003678  660E      5865          bne.s     doprint_96
0000367A  200D      5866          move.l    A5,D0
0000367C  9087      5867          sub.l     D7,D0
0000367E  4884      5868          ext.w     D4
00003680  48C4      5869          ext.l     D4
00003682  9084      5870          sub.l     D4,D0
00003684  2D40 FFFC 5871          move.l    D0,-4(A6)
                    5872   doprint_96:
00003688  202E FFFC 5873          move.l    -4(A6),D0
0000368C  0C80 0000 5874          cmp.l     #0,D0
00003690  0000      
00003692  6C04      5875          bge.s     doprint_98
00003694  42AE FFFC 5876          clr.l     -4(A6)
                    5877   doprint_98:
00003698  4A2E FFCD 5878          tst.b     -51(A6)
0000369C  6600 0030 5879          bne       doprint_104
000036A0  1004      5880          move.b    D4,D0
000036A2  4880      5881          ext.w     D0
000036A4  48C0      5882          ext.l     D0
000036A6  D0AE FFFC 5883          add.l     -4(A6),D0
000036AA  D087      5884          add.l     D7,D0
000036AC  1D40 FFD1 5885          move.b    D0,-47(A6)
                    5886   doprint_102:
000036B0  102E FFD1 5887          move.b    -47(A6),D0
000036B4  4880      5888          ext.w     D0
000036B6  48C0      5889          ext.l     D0
000036B8  220D      5890          move.l    A5,D1
000036BA  534D      5891          subq.w    #1,A5
000036BC  B081      5892          cmp.l     D1,D0
000036BE  6C0E      5893          bge.s     doprint_104
000036C0  4878 0020 5894          pea       32
000036C4  2F0A      5895          move.l    A2,-(A7)
000036C6  4E93      5896          jsr       (A3)
000036C8  504F      5897          addq.w    #8,A7
000036CA  5286      5898          addq.l    #1,D6
000036CC  60E2      5899          bra       doprint_102
                    5900   doprint_104:
000036CE  41EE FFD4 5901          lea       -44(A6),A0
000036D2  2408      5902          move.l    A0,D2
                    5903   doprint_105:
000036D4  2042      5904          move.l    D2,A0
000036D6  4A10      5905          tst.b     (A0)
000036D8  6716      5906          beq.s     doprint_107
000036DA  2042      5907          move.l    D2,A0
000036DC  5282      5908          addq.l    #1,D2
000036DE  1210      5909          move.b    (A0),D1
000036E0  4881      5910          ext.w     D1
000036E2  48C1      5911          ext.l     D1
000036E4  2F01      5912          move.l    D1,-(A7)
000036E6  2F0A      5913          move.l    A2,-(A7)
000036E8  4E93      5914          jsr       (A3)
000036EA  504F      5915          addq.w    #8,A7
000036EC  5286      5916          addq.l    #1,D6
000036EE  60E4      5917          bra       doprint_105
                    5918   doprint_107:
000036F0  202E FFFC 5919          move.l    -4(A6),D0
000036F4  1D40 FFD1 5920          move.b    D0,-47(A6)
                    5921   doprint_108:
000036F8  102E FFD1 5922          move.b    -47(A6),D0
000036FC  532E FFD1 5923          subq.b    #1,-47(A6)
00003700  4A00      5924          tst.b     D0
00003702  670E      5925          beq.s     doprint_110
00003704  4878 0030 5926          pea       48
00003708  2F0A      5927          move.l    A2,-(A7)
0000370A  4E93      5928          jsr       (A3)
0000370C  504F      5929          addq.w    #8,A7
0000370E  5286      5930          addq.l    #1,D6
00003710  60E6      5931          bra       doprint_108
                    5932   doprint_110:
00003712  2043      5933          move.l    D3,A0
00003714  4A10      5934          tst.b     (A0)
00003716  6700 0048 5935          beq       doprint_113
0000371A  206E 000C 5936          move.l    12(A6),A0
0000371E  1010      5937          move.b    (A0),D0
00003720  4880      5938          ext.w     D0
00003722  48C0      5939          ext.l     D0
00003724  0C80 0000 5940          cmp.l     #115,D0
00003728  0073      
0000372A  670C      5941          beq.s     doprint_116
0000372C  6E18      5942          bgt.s     doprint_119
0000372E  0C80 0000 5943          cmp.l     #99,D0
00003732  0063      
00003734  6702      5944          beq.s     doprint_116
00003736  600E      5945          bra.s     doprint_119
                    5946   doprint_116:
00003738  2005      5947          move.l    D5,D0
0000373A  5385      5948          subq.l    #1,D5
0000373C  0C80 0000 5949          cmp.l     #0,D0
00003740  0000      
00003742  6E02      5950          bgt.s     doprint_119
00003744  6016      5951          bra.s     doprint_115
                    5952   doprint_119:
00003746  2043      5953          move.l    D3,A0
00003748  5283      5954          addq.l    #1,D3
0000374A  1210      5955          move.b    (A0),D1
0000374C  4881      5956          ext.w     D1
0000374E  48C1      5957          ext.l     D1
00003750  2F01      5958          move.l    D1,-(A7)
00003752  2F0A      5959          move.l    A2,-(A7)
00003754  4E93      5960          jsr       (A3)
00003756  504F      5961          addq.w    #8,A7
00003758  5286      5962          addq.l    #1,D6
0000375A  6002      5963          bra.s     doprint_112
                    5964   doprint_115:
0000375C  6002      5965          bra.s     doprint_113
                    5966   doprint_112:
0000375E  60B2      5967          bra       doprint_110
                    5968   doprint_113:
00003760  4A2E FFCD 5969          tst.b     -51(A6)
00003764  6700 0030 5970          beq       doprint_125
00003768  1004      5971          move.b    D4,D0
0000376A  4880      5972          ext.w     D0
0000376C  48C0      5973          ext.l     D0
0000376E  D0AE FFFC 5974          add.l     -4(A6),D0
00003772  D087      5975          add.l     D7,D0
00003774  1D40 FFD1 5976          move.b    D0,-47(A6)
                    5977   doprint_123:
00003778  102E FFD1 5978          move.b    -47(A6),D0
0000377C  4880      5979          ext.w     D0
0000377E  48C0      5980          ext.l     D0
00003780  220D      5981          move.l    A5,D1
00003782  534D      5982          subq.w    #1,A5
00003784  B081      5983          cmp.l     D1,D0
00003786  6C0E      5984          bge.s     doprint_125
00003788  4878 0020 5985          pea       32
0000378C  2F0A      5986          move.l    A2,-(A7)
0000378E  4E93      5987          jsr       (A3)
00003790  504F      5988          addq.w    #8,A7
00003792  5386      5989          subq.l    #1,D6
00003794  60E2      5990          bra       doprint_123
                    5991   doprint_125:
00003796  6014      5992          bra.s     doprint_81
                    5993   doprint_80:
00003798  206E 000C 5994          move.l    12(A6),A0
0000379C  1210      5995          move.b    (A0),D1
0000379E  4881      5996          ext.w     D1
000037A0  48C1      5997          ext.l     D1
000037A2  2F01      5998          move.l    D1,-(A7)
000037A4  2F0A      5999          move.l    A2,-(A7)
000037A6  4E93      6000          jsr       (A3)
000037A8  504F      6001          addq.w    #8,A7
000037AA  5286      6002          addq.l    #1,D6
                    6003   doprint_81:
000037AC  52AE 000C 6004          addq.l    #1,12(A6)
                    6005   doprint_2:
000037B0  6000 FA10 6006          bra       doprint_1
                    6007   doprint_3:
000037B4  4A92      6008          tst.l     (A2)
000037B6  6710      6009          beq.s     doprint_126
000037B8  4201      6010          clr.b     D1
000037BA  C2BC 0000 6011          and.l     #255,D1
000037BE  00FF      
000037C0  2F01      6012          move.l    D1,-(A7)
000037C2  2F0A      6013          move.l    A2,-(A7)
000037C4  4E93      6014          jsr       (A3)
000037C6  504F      6015          addq.w    #8,A7
                    6016   doprint_126:
000037C8  2006      6017          move.l    D6,D0
000037CA  4CDF 3CFC 6018          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000037CE  4E5E      6019          unlk      A6
000037D0  4E75      6020          rts
                    6021   @itoa_convert:
000037D2  4E56 0000 6022          link      A6,#0
000037D6  48E7 3C00 6023          movem.l   D2/D3/D4/D5,-(A7)
000037DA  242E 0008 6024          move.l    8(A6),D2
000037DE  262E 0010 6025          move.l    16(A6),D3
000037E2  2A2E 000C 6026          move.l    12(A6),D5
000037E6  2F05      6027          move.l    D5,-(A7)
000037E8  2F03      6028          move.l    D3,-(A7)
000037EA  4EB8 2F12 6029          jsr       ULDIV
000037EE  202F 0004 6030          move.l    4(A7),D0
000037F2  504F      6031          addq.w    #8,A7
000037F4  2800      6032          move.l    D0,D4
000037F6  BA83      6033          cmp.l     D3,D5
000037F8  651C      6034          blo.s     @itoa_convert_1
000037FA  2F03      6035          move.l    D3,-(A7)
000037FC  2F05      6036          move.l    D5,-(A7)
000037FE  2F03      6037          move.l    D3,-(A7)
00003800  4EB8 2F12 6038          jsr       ULDIV
00003804  2217      6039          move.l    (A7),D1
00003806  504F      6040          addq.w    #8,A7
00003808  2F01      6041          move.l    D1,-(A7)
0000380A  2F02      6042          move.l    D2,-(A7)
0000380C  4EB8 37D2 6043          jsr       @itoa_convert
00003810  DEFC 000C 6044          add.w     #12,A7
00003814  2400      6045          move.l    D0,D2
                    6046   @itoa_convert_1:
00003816  0C84 0000 6047          cmp.l     #9,D4
0000381A  0009      
0000381C  6E0E      6048          bgt.s     @itoa_convert_3
0000381E  2004      6049          move.l    D4,D0
00003820  7230      6050          moveq     #48,D1
00003822  C2BC 0000 6051          and.l     #255,D1
00003826  00FF      
00003828  D081      6052          add.l     D1,D0
0000382A  6012      6053          bra.s     @itoa_convert_4
                    6054   @itoa_convert_3:
0000382C  2004      6055          move.l    D4,D0
0000382E  7261      6056          moveq     #97,D1
00003830  C2BC 0000 6057          and.l     #255,D1
00003834  00FF      
00003836  D081      6058          add.l     D1,D0
00003838  0480 0000 6059          sub.l     #10,D0
0000383C  000A      
                    6060   @itoa_convert_4:
0000383E  2042      6061          move.l    D2,A0
00003840  1080      6062          move.b    D0,(A0)
00003842  2002      6063          move.l    D2,D0
00003844  5280      6064          addq.l    #1,D0
00003846  4CDF 003C 6065          movem.l   (A7)+,D2/D3/D4/D5
0000384A  4E5E      6066          unlk      A6
0000384C  4E75      6067          rts
                    6068   _ltoa:
0000384E  4E56 0000 6069          link      A6,#0
00003852  48E7 3C00 6070          movem.l   D2/D3/D4/D5,-(A7)
00003856  242E 0008 6071          move.l    8(A6),D2
0000385A  262E 000C 6072          move.l    12(A6),D3
0000385E  2A2E 0010 6073          move.l    16(A6),D5
00003862  2803      6074          move.l    D3,D4
00003864  0C85 0000 6075          cmp.l     #2,D5
00003868  0002      
0000386A  6D08      6076          blt.s     ltoa_3
0000386C  0C85 0000 6077          cmp.l     #36,D5
00003870  0024      
00003872  6F06      6078          ble.s     ltoa_1
                    6079   ltoa_3:
00003874  2003      6080          move.l    D3,D0
00003876  6000 0052 6081          bra       ltoa_4
                    6082   ltoa_1:
0000387A  0C85 0000 6083          cmp.l     #10,D5
0000387E  000A      
00003880  6600 0032 6084          bne       ltoa_5
00003884  0C82 0000 6085          cmp.l     #0,D2
00003888  0000      
0000388A  6C28      6086          bge.s     ltoa_5
0000388C  2002      6087          move.l    D2,D0
0000388E  4480      6088          neg.l     D0
00003890  2400      6089          move.l    D0,D2
00003892  0C82 0000 6090          cmp.l     #0,D2
00003896  0000      
00003898  6C12      6091          bge.s     ltoa_7
0000389A  4879 0000 6092          pea       @itoa_1.L
0000389E  4FC2      
000038A0  2F03      6093          move.l    D3,-(A7)
000038A2  4EB8 2F02 6094          jsr       _strcpy
000038A6  504F      6095          addq.w    #8,A7
000038A8  2003      6096          move.l    D3,D0
000038AA  601E      6097          bra.s     ltoa_4
                    6098   ltoa_7:
000038AC  2044      6099          move.l    D4,A0
000038AE  5284      6100          addq.l    #1,D4
000038B0  10BC 002D 6101          move.b    #45,(A0)
                    6102   ltoa_5:
000038B4  2F05      6103          move.l    D5,-(A7)
000038B6  2F02      6104          move.l    D2,-(A7)
000038B8  2F04      6105          move.l    D4,-(A7)
000038BA  4EB8 37D2 6106          jsr       @itoa_convert
000038BE  DEFC 000C 6107          add.w     #12,A7
000038C2  2800      6108          move.l    D0,D4
000038C4  2044      6109          move.l    D4,A0
000038C6  4210      6110          clr.b     (A0)
000038C8  2003      6111          move.l    D3,D0
                    6112   ltoa_4:
000038CA  4CDF 003C 6113          movem.l   (A7)+,D2/D3/D4/D5
000038CE  4E5E      6114          unlk      A6
000038D0  4E75      6115          rts
                    6116   _ultoa:
000038D2  4E56 0000 6117          link      A6,#0
000038D6  48E7 3800 6118          movem.l   D2/D3/D4,-(A7)
000038DA  262E 0010 6119          move.l    16(A6),D3
000038DE  282E 000C 6120          move.l    12(A6),D4
000038E2  2404      6121          move.l    D4,D2
000038E4  0C83 0000 6122          cmp.l     #2,D3
000038E8  0002      
000038EA  6D08      6123          blt.s     ultoa_3
000038EC  0C83 0000 6124          cmp.l     #36,D3
000038F0  0024      
000038F2  6F04      6125          ble.s     ultoa_1
                    6126   ultoa_3:
000038F4  2004      6127          move.l    D4,D0
000038F6  6018      6128          bra.s     ultoa_4
                    6129   ultoa_1:
000038F8  2F03      6130          move.l    D3,-(A7)
000038FA  2F2E 0008 6131          move.l    8(A6),-(A7)
000038FE  2F02      6132          move.l    D2,-(A7)
00003900  4EB8 37D2 6133          jsr       @itoa_convert
00003904  DEFC 000C 6134          add.w     #12,A7
00003908  2400      6135          move.l    D0,D2
0000390A  2042      6136          move.l    D2,A0
0000390C  4210      6137          clr.b     (A0)
0000390E  2004      6138          move.l    D4,D0
                    6139   ultoa_4:
00003910  4CDF 001C 6140          movem.l   (A7)+,D2/D3/D4
00003914  4E5E      6141          unlk      A6
00003916  4E75      6142          rts
                    6143   _itoa:
00003918  4E56 0000 6144          link      A6,#0
0000391C  2F2E 0010 6145          move.l    16(A6),-(A7)
00003920  2F2E 000C 6146          move.l    12(A6),-(A7)
00003924  2F2E 0008 6147          move.l    8(A6),-(A7)
00003928  4EB8 384E 6148          jsr       _ltoa
0000392C  DEFC 000C 6149          add.w     #12,A7
00003930  4E5E      6150          unlk      A6
00003932  4E75      6151          rts
                    6152   ULMUL:
00003934  4E56 0000 6153          link    A6,#0
00003938  48E7 C000 6154          movem.l D0/D1,-(A7)
0000393C  222E 0008 6155          move.l  8(A6),D1
00003940  202E 000C 6156          move.l  12(A6),D0
00003944  602C      6157          bra.s   lmul_3
                    6158   LMUL:
00003946  4E56 0000 6159          link    A6,#0
0000394A  48E7 C000 6160          movem.l D0/D1,-(A7)
0000394E  222E 0008 6161          move.l  8(A6),D1
00003952  202E 000C 6162          move.l  12(A6),D0
00003956  4A80      6163          tst.l   D0
00003958  6A0A      6164          bpl.s   lmul_1
0000395A  4480      6165          neg.l   D0
0000395C  4A81      6166          tst.l   D1
0000395E  6A0A      6167          bpl.s   lmul_2
00003960  4481      6168          neg.l   D1
00003962  600E      6169          bra.s   lmul_3
                    6170   lmul_1:
00003964  4A81      6171          tst.l   D1
00003966  6A0A      6172          bpl.s   lmul_3
00003968  4481      6173          neg.l   D1
                    6174   lmul_2:
0000396A  6114      6175          bsr.s   domul
0000396C  4481      6176          neg.l   D1
0000396E  4080      6177          negx.l  D0
00003970  6002      6178          bra.s   lmul_4
                    6179   lmul_3:
00003972  610C      6180          bsr.s   domul
                    6181   lmul_4:
00003974  2D41 0008 6182          move.l  D1,8(A6)
00003978  4CDF 0003 6183          movem.l (A7)+,D0/D1
0000397C  4E5E      6184          unlk    A6
0000397E  4E75      6185          rts
                    6186   domul:
00003980  0C81 0000 6187          cmpi.l  #$FFFF,D1
00003984  FFFF      
00003986  620C      6188          bhi.s   domul_1
00003988  0C80 0000 6189          cmpi.l  #$FFFF,D0
0000398C  FFFF      
0000398E  620E      6190          bhi.s   domul_2
00003990  C2C0      6191          mulu    D0,D1
00003992  4E75      6192          rts
                    6193   domul_1:
00003994  0C80 0000 6194          cmpi.l  #$FFFF,D0
00003998  FFFF      
0000399A  6218      6195          bhi.s   domul_4
0000399C  6002      6196          bra.s   domul_3
                    6197   domul_2
0000399E  C141      6198          exg     D0,D1
                    6199   domul_3:
000039A0  2F02      6200          move.l  D2,-(A7)
000039A2  2401      6201          move.l  D1,D2
000039A4  4842      6202          swap    D2
000039A6  C2C0      6203          mulu    D0,D1
000039A8  C4C0      6204          mulu    D0,D2
000039AA  4842      6205          swap    D2
000039AC  4242      6206          clr.w   D2
000039AE  D282      6207          add.l   D2,D1
000039B0  241F      6208          move.l  (A7)+,D2
000039B2  4E75      6209          rts
                    6210   domul_4:
000039B4  48E7 3000 6211          movem.l D2/D3,-(A7)
000039B8  2401      6212          move.l  D1,D2
000039BA  2601      6213          move.l  D1,D3
000039BC  C2C0      6214          mulu    D0,D1
000039BE  4842      6215          swap    D2
000039C0  C4C0      6216          mulu    D0,D2
000039C2  4840      6217          swap    D0
000039C4  C6C0      6218          mulu    D0,D3
000039C6  D483      6219          add.l   D3,D2
000039C8  4842      6220          swap    D2
000039CA  4242      6221          clr.w   D2
000039CC  D282      6222          add.l   D2,D1
000039CE  4CDF 000C 6223          movem.l (A7)+,D2/D3
000039D2  4E75      6224          rts
                    6225   _strlen:
000039D4  206F 0004 6226          move.l    (4,A7),A0
000039D8  2248      6227          move.l    A0,A1
                    6228   strlen_1:
000039DA  4A19      6229          tst.b     (A1)+
000039DC  66FC      6230          bne       strlen_1
000039DE  2009      6231          move.l    A1,D0
000039E0  9088      6232          sub.l     A0,D0
000039E2  5380      6233          subq.l    #1,D0
000039E4  4E75      6234          rts
                    6235          section   const
                    6236   
                    6237   @m68kde~2_1:
000039E6  0D0A 00   6238          dc.b      13,10,0
                    6239   @m68kde~2_2:
000039EA  0D53 7769 6240          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000039EE  7463 6865 
000039F2  7320 5357 
000039F6  5B        
000039F7  372D 305D 6241          dc.b      55,45,48,93,32,61,32,0
000039FB  203D 2000 
                    6242   @m68kde~2_3:
00003A00  3000      6243          dc.b      48,0
                    6244   @m68kde~2_4:
00003A02  3100      6245          dc.b      49,0
                    6246   @m68kde~2_5:
00003A04  0D0A 4475 6247          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00003A08  6D70 204D 
00003A0C  656D 6F72 
00003A10  79        
00003A11  2042 6C6F 6248          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00003A15  636B 3A20 
00003A19  3C45 5343 
00003A1D  3E20      
00003A1F  746F 2041 6249          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00003A23  626F 7274 
00003A27  2C20 3C53 
00003A2B  50        
00003A2C  4143 453E 6250          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00003A30  2074 6F20 
00003A34  436F 6E74 
00003A38  69        
00003A39  6E75 6500 6251          dc.b      110,117,101,0
                    6252   @m68kde~2_6:
00003A3E  0D0A 456E 6253          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00003A42  7465 7220 
00003A46  5374 6172 
00003A4A  74        
00003A4B  2041 6464 6254          dc.b      32,65,100,100,114,101,115,115,58,32,0
00003A4F  7265 7373 
00003A53  3A20 00   
                    6255   @m68kde~2_7:
00003A56  0D0A 2530 6256          dc.b      13,10,37,48,56,120,32,0
00003A5A  3878 2000 
                    6257   @m68kde~2_8:
00003A5E  2530 3258 6258          dc.b      37,48,50,88,0
00003A62  00        
                    6259   @m68kde~2_9:
00003A64  2020 00   6260          dc.b      32,32,0
                    6261   @m68kde~2_10:
00003A68  0D0A 4669 6262          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00003A6C  6C6C 204D 
00003A70  656D 6F72 
00003A74  79        
00003A75  2042 6C6F 6263          dc.b      32,66,108,111,99,107,0
00003A79  636B 00   
                    6264   @m68kde~2_11:
00003A7C  0D0A 456E 6265          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00003A80  7465 7220 
00003A84  456E 6420 
00003A88  41        
00003A89  6464 7265 6266          dc.b      100,100,114,101,115,115,58,32,0
00003A8D  7373 3A20 
00003A91  00        
                    6267   @m68kde~2_12:
00003A92  0D0A 456E 6268          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00003A96  7465 7220 
00003A9A  4669 6C6C 
00003A9E  20        
00003A9F  4461 7461 6269          dc.b      68,97,116,97,58,32,0
00003AA3  3A20 00   
                    6270   @m68kde~2_13:
00003AA6  0D0A 4669 6271          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00003AAA  6C6C 696E 
00003AAE  6720 4164 
00003AB2  64        
00003AB3  7265 7373 6272          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00003AB7  6573 205B 
00003ABB  2425 3038 
00003ABF  58        
00003AC0  202D 2024 6273          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00003AC4  2530 3858 
00003AC8  5D20 7769 
00003ACC  7468      
00003ACE  2024 2530 6274          dc.b      32,36,37,48,50,88,0
00003AD2  3258 00   
                    6275   @m68kde~2_14:
00003AD6  0D0A 5573 6276          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00003ADA  6520 4879 
00003ADE  7065 7254 
00003AE2  65        
00003AE3  726D 696E 6277          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00003AE7  616C 2074 
00003AEB  6F20 5365 
00003AEF  6E64 2054 6278          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00003AF3  6578 7420 
00003AF7  4669 6C65 
00003AFB  2028 2E68 6279          dc.b      32,40,46,104,101,120,41,13,10,0
00003AFF  6578 290D 
00003B03  0A00      
                    6280   @m68kde~2_15:
00003B06  0D0A 4C6F 6281          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00003B0A  6164 2046 
00003B0E  6169 6C65 
00003B12  64        
00003B13  2061 7420 6282          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00003B17  4164 6472 
00003B1B  6573 7320 
00003B1F  3D        
00003B20  205B 2425 6283          dc.b      32,91,36,37,48,56,88,93,13,10,0
00003B24  3038 585D 
00003B28  0D0A 00   
                    6284   @m68kde~2_16:
00003B2C  0D0A 5375 6285          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00003B30  6363 6573 
00003B34  733A 2044 
00003B38  6F        
00003B39  776E 6C6F 6286          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00003B3D  6164 6564 
00003B41  2025 6420 
00003B45  6279 7465 6287          dc.b      98,121,116,101,115,13,10,0
00003B49  730D 0A00 
                    6288   @m68kde~2_17:
00003B4E  0D0A 4578 6289          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00003B52  616D 696E 
00003B56  6520 616E 
00003B5A  64        
00003B5B  2043 6861 6290          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00003B5F  6E67 6520 
00003B63  4D65 6D6F 
00003B67  72        
00003B68  7900      6291          dc.b      121,0
                    6292   @m68kde~2_18:
00003B6A  0D0A 3C45 6293          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00003B6E  5343 3E20 
00003B72  746F 2053 
00003B76  746F      
00003B78  702C 203C 6294          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00003B7C  5350 4143 
00003B80  453E 2074 
00003B84  6F20      
00003B86  4164 7661 6295          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00003B8A  6E63 652C 
00003B8E  2027 2D27 
00003B92  2074      
00003B94  6F20 476F 6296          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00003B98  2042 6163 
00003B9C  6B2C 203C 
00003BA0  4441      
00003BA2  5441 3E20 6297          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00003BA6  746F 2063 
00003BAA  6861 6E67 
00003BAE  65        
00003BAF  00        6298          dc.b      0
                    6299   @m68kde~2_19:
00003BB0  0D0A 456E 6300          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00003BB4  7465 7220 
00003BB8  4164 6472 
00003BBC  65        
00003BBD  7373 3A20 6301          dc.b      115,115,58,32,0
00003BC1  00        
                    6302   @m68kde~2_20:
00003BC2  0D0A 5B25 6303          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00003BC6  3038 785D 
00003BCA  203A 2025 
00003BCE  3032 78   
00003BD1  2020 00   6304          dc.b      32,32,0
                    6305   @m68kde~2_21:
00003BD4  0D0A 5761 6306          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00003BD8  726E 696E 
00003BDC  6720 4368 
00003BE0  61        
00003BE1  6E67 6520 6307          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00003BE5  4661 696C 
00003BE9  6564 3A20 
00003BED  57        
00003BEE  726F 7465 6308          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
00003BF2  205B 2530 
00003BF6  3278 5D2C 
00003BFA  20        
00003BFB  5265 6164 6309          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
00003BFF  205B 2530 
00003C03  3278 5D00 
                    6310   @m68kde~2_22:
00003C08  0D0A 4C6F 6311          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00003C0C  6164 696E 
00003C10  6720 5072 
00003C14  6F        
00003C15  6772 616D 6312          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00003C19  2046 726F 
00003C1D  6D20 5350 
00003C21  49        
00003C22  2046 6C61 6313          dc.b      32,70,108,97,115,104,46,46,46,46,0
00003C26  7368 2E2E 
00003C2A  2E2E 00   
                    6314   @m68kde~2_23:
00003C2E  2425 3038 6315          dc.b      36,37,48,56,88,32,32,0
00003C32  5820 2000 
                    6316   @m68kde~2_24:
00003C36  2000      6317          dc.b      32,0
                    6318   @m68kde~2_25:
00003C38  2E00      6319          dc.b      46,0
                    6320   @m68kde~2_26:
00003C3A  2563 00   6321          dc.b      37,99,0
                    6322   @m68kde~2_27:
00003C3E  00        6323          dc.b      0
                    6324   @m68kde~2_28:
00003C40  0D0A 0D0A 6325          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
00003C44  2044 3020 
00003C48  3D20 2425 
00003C4C  3038 58   
00003C4F  2020 4130 6326          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
00003C53  203D 2024 
00003C57  2530 3858 
00003C5B  00        
                    6327   @m68kde~2_29:
00003C5C  0D0A 2044 6328          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00003C60  3120 3D20 
00003C64  2425 3038 
00003C68  5820 20   
00003C6B  4131 203D 6329          dc.b      65,49,32,61,32,36,37,48,56,88,0
00003C6F  2024 2530 
00003C73  3858 00   
                    6330   @m68kde~2_30:
00003C76  0D0A 2044 6331          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00003C7A  3220 3D20 
00003C7E  2425 3038 
00003C82  5820 20   
00003C85  4132 203D 6332          dc.b      65,50,32,61,32,36,37,48,56,88,0
00003C89  2024 2530 
00003C8D  3858 00   
                    6333   @m68kde~2_31:
00003C90  0D0A 2044 6334          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00003C94  3320 3D20 
00003C98  2425 3038 
00003C9C  5820 20   
00003C9F  4133 203D 6335          dc.b      65,51,32,61,32,36,37,48,56,88,0
00003CA3  2024 2530 
00003CA7  3858 00   
                    6336   @m68kde~2_32:
00003CAA  0D0A 2044 6337          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00003CAE  3420 3D20 
00003CB2  2425 3038 
00003CB6  5820 20   
00003CB9  4134 203D 6338          dc.b      65,52,32,61,32,36,37,48,56,88,0
00003CBD  2024 2530 
00003CC1  3858 00   
                    6339   @m68kde~2_33:
00003CC4  0D0A 2044 6340          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00003CC8  3520 3D20 
00003CCC  2425 3038 
00003CD0  5820 20   
00003CD3  4135 203D 6341          dc.b      65,53,32,61,32,36,37,48,56,88,0
00003CD7  2024 2530 
00003CDB  3858 00   
                    6342   @m68kde~2_34:
00003CDE  0D0A 2044 6343          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
00003CE2  3620 3D20 
00003CE6  2425 3038 
00003CEA  5820 20   
00003CED  4136 203D 6344          dc.b      65,54,32,61,32,36,37,48,56,88,0
00003CF1  2024 2530 
00003CF5  3858 00   
                    6345   @m68kde~2_35:
00003CF8  0D0A 2044 6346          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00003CFC  3720 3D20 
00003D00  2425 3038 
00003D04  5820 20   
00003D07  4137 203D 6347          dc.b      65,55,32,61,32,36,37,48,56,88,0
00003D0B  2024 2530 
00003D0F  3858 00   
                    6348   @m68kde~2_36:
00003D12  0D0A 0D0A 6349          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00003D16  5553 5020 
00003D1A  3D20 2425 
00003D1E  3038 58   
00003D21  2020 2841 6350          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00003D25  3729 2055 
00003D29  7365 7220 
00003D2D  5350      
00003D2F  00        6351          dc.b      0
                    6352   @m68kde~2_37:
00003D30  0D0A 5353 6353          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
00003D34  5020 3D20 
00003D38  2425 3038 
00003D3C  5820 20   
00003D3F  2841 3729 6354          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
00003D43  2053 7570 
00003D47  6572 7669 
00003D4B  73        
00003D4C  6F72 2053 6355          dc.b      111,114,32,83,80,0
00003D50  5000      
                    6356   @m68kde~2_38:
00003D52  0D0A 2053 6357          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
00003D56  5220 3D20 
00003D5A  2425 3034 
00003D5E  5820 20   
00003D61  2000      6358          dc.b      32,0
                    6359   @m68kde~2_39:
00003D64  2020 205B 6360          dc.b      32,32,32,91,0
00003D68  00        
                    6361   @m68kde~2_40:
00003D6A  0D0A 2050 6362          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00003D6E  4320 3D20 
00003D72  2425 3038 
00003D76  5820 20   
00003D79  00        6363          dc.b      0
                    6364   @m68kde~2_41:
00003D7A  5B40 2042 6365          dc.b      91,64,32,66,82,69,65,75,80,79,73,78,84,93,0
00003D7E  5245 414B 
00003D82  504F 494E 
00003D86  545D 00   
                    6366   @m68kde~2_42:
00003D8A  0D0A 5750 6367          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00003D8E  2564 203D 
00003D92  2025 7300 
                    6368   @m68kde~2_43:
00003D96  0D0A 0D0A 6369          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00003D9A  0D0A 0D0A 
00003D9E  0D0A 0D0A 
00003DA2  5369 6E   
00003DA5  676C 6520 6370          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00003DA9  5374 6570 
00003DAD  2020 3A5B 
00003DB1  4F        
00003DB2  4E5D 00   6371          dc.b      78,93,0
                    6372   @m68kde~2_44:
00003DB6  0D0A 4272 6373          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003DBA  6561 6B20 
00003DBE  506F 696E 
00003DC2  74        
00003DC3  7320 3A5B 6374          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00003DC7  4469 7361 
00003DCB  626C 6564 
00003DCF  5D        
00003DD0  00        6375          dc.b      0
                    6376   @m68kde~2_45:
00003DD2  0D0A 5072 6377          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00003DD6  6573 7320 
00003DDA  3C53 5041 
00003DDE  4345      
00003DE0  3E20 746F 6378          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00003DE4  2045 7865 
00003DE8  6375 7465 
00003DEC  20        
00003DED  4E65 7874 6379          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
00003DF1  2049 6E73 
00003DF5  7472 7563 
00003DF9  7469 6F6E 6380          dc.b      116,105,111,110,0
00003DFD  00        
                    6381   @m68kde~2_46:
00003DFE  0D0A 5072 6382          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00003E02  6573 7320 
00003E06  3C45 5343 
00003E0A  3E20      
00003E0C  746F 2052 6383          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
00003E10  6573 756D 
00003E14  6520 5072 
00003E18  6F67 7261 6384          dc.b      111,103,114,97,109,0
00003E1C  6D00      
                    6385   @m68kde~2_47:
00003E1E  0D0A 496C 6386          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00003E22  6C65 6761 
00003E26  6C20 4461 
00003E2A  74        
00003E2B  6120 5265 6387          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00003E2F  6769 7374 
00003E33  6572 203A 
00003E37  20        
00003E38  5573 6520 6388          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00003E3C  4430 2D44 
00003E40  372E 2E2E 
00003E44  2E2E      
00003E46  0D0A 00   6389          dc.b      13,10,0
                    6390   @m68kde~2_48:
00003E4A  0D0A 4425 6391          dc.b      13,10,68,37,99,32,61,32,0
00003E4E  6320 3D20 
00003E52  00        
                    6392   @m68kde~2_49:
00003E54  0D0A 496C 6393          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00003E58  6C65 6761 
00003E5C  6C20 4164 
00003E60  64        
00003E61  7265 7373 6394          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
00003E65  2052 6567 
00003E69  6973 7465 
00003E6D  7220 3A20 6395          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
00003E71  5573 6520 
00003E75  4130 2D41 
00003E79  372E      
00003E7B  2E2E 2E2E 6396          dc.b      46,46,46,46,13,10,0
00003E7F  0D0A 00   
                    6397   @m68kde~2_50:
00003E82  0D0A 4125 6398          dc.b      13,10,65,37,99,32,61,32,0
00003E86  6320 3D20 
00003E8A  00        
                    6399   @m68kde~2_51:
00003E8C  0D0A 5573 6400          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
00003E90  6572 2053 
00003E94  5020 3D20 
00003E98  00        
                    6401   @m68kde~2_52:
00003E9A  0D0A 496C 6402          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003E9E  6C65 6761 
00003EA2  6C20 5265 
00003EA6  67        
00003EA7  6973 7465 6403          dc.b      105,115,116,101,114,46,46,46,46,0
00003EAB  722E 2E2E 
00003EAF  2E00      
                    6404   @m68kde~2_53:
00003EB2  0D0A 5379 6405          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00003EB6  7374 656D 
00003EBA  2053 5020 
00003EBE  3D        
00003EBF  2000      6406          dc.b      32,0
                    6407   @m68kde~2_54:
00003EC2  0D0A 5043 6408          dc.b      13,10,80,67,32,61,32,0
00003EC6  203D 2000 
                    6409   @m68kde~2_55:
00003ECA  0D0A 5352 6410          dc.b      13,10,83,82,32,61,32,0
00003ECE  203D 2000 
                    6411   @m68kde~2_56:
00003ED2  0D0A 496C 6412          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00003ED6  6C65 6761 
00003EDA  6C20 5265 
00003EDE  67        
00003EDF  6973 7465 6413          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00003EE3  723A 2055 
00003EE7  7365 2041 
00003EEB  30        
00003EEC  2D41 372C 6414          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
00003EF0  2044 302D 
00003EF4  4437 2C20 
00003EF8  5353 50   
00003EFB  2C20 5553 6415          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
00003EFF  502C 2050 
00003F03  4320 6F72 
00003F07  2053      
00003F09  520D 0A00 6416          dc.b      82,13,10,0
                    6417   @m68kde~2_57:
00003F0E  0D0A 0D0A 6418          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00003F12  4E75 6D20 
00003F16  2020 2020 
00003F1A  4164      
00003F1C  6472 6573 6419          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
00003F20  7320 2020 
00003F24  2020 2049 
00003F28  6E        
00003F29  7374 7275 6420          dc.b      115,116,114,117,99,116,105,111,110,0
00003F2D  6374 696F 
00003F31  6E00      
                    6421   @m68kde~2_58:
00003F34  0D0A 2D2D 6422          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00003F38  2D20 2020 
00003F3C  2020 2D2D 
00003F40  2D2D 2D   
00003F43  2D2D 2D2D 6423          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00003F47  2020 2020 
00003F4B  2D2D 2D2D 
00003F4F  2D2D 2D   
00003F52  2D2D 2D2D 6424          dc.b      45,45,45,45,0
00003F56  00        
                    6425   @m68kde~2_59:
00003F58  0D0A 4E6F 6426          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00003F5C  2042 7265 
00003F60  616B 506F 
00003F64  69        
00003F65  6E74 7320 6427          dc.b      110,116,115,32,83,101,116,0
00003F69  5365 7400 
                    6428   @m68kde~2_60:
00003F6E  0D0A 2533 6429          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
00003F72  6420 2020 
00003F76  2020 2425 
00003F7A  3038 78   
00003F7D  00        6430          dc.b      0
                    6431   @m68kde~2_61:
00003F7E  0D0A 4E75 6432          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00003F82  6D20 2020 
00003F86  2020 4164 
00003F8A  6472      
00003F8C  6573 7300 6433          dc.b      101,115,115,0
                    6434   @m68kde~2_62:
00003F90  0D0A 2D2D 6435          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00003F94  2D20 2020 
00003F98  2020 2D2D 
00003F9C  2D2D 2D   
00003F9F  2D2D 2D2D 6436          dc.b      45,45,45,45,0
00003FA3  00        
                    6437   @m68kde~2_63:
00003FA4  0D0A 4E6F 6438          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
00003FA8  2057 6174 
00003FAC  6368 506F 
00003FB0  69        
00003FB1  6E74 7320 6439          dc.b      110,116,115,32,83,101,116,0
00003FB5  5365 7400 
                    6440   @m68kde~2_64:
00003FBA  0D0A 456E 6441          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00003FBE  7465 7220 
00003FC2  4272 6561 
00003FC6  6B        
00003FC7  2050 6F69 6442          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00003FCB  6E74 204E 
00003FCF  756D 6265 
00003FD3  72        
00003FD4  3A20 00   6443          dc.b      58,32,0
                    6444   @m68kde~2_65:
00003FD8  0D0A 496C 6445          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00003FDC  6C65 6761 
00003FE0  6C20 5261 
00003FE4  6E        
00003FE5  6765 203A 6446          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
00003FE9  2055 7365 
00003FED  2030 202D 
00003FF1  2037      
00003FF3  00        6447          dc.b      0
                    6448   @m68kde~2_66:
00003FF4  0D0A 4272 6449          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00003FF8  6561 6B20 
00003FFC  506F 696E 
00004000  74        
00004001  2043 6C65 6450          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00004005  6172 6564 
00004009  2E2E 2E2E 
0000400D  2E        
0000400E  0D0A 00   6451          dc.b      13,10,0
                    6452   @m68kde~2_67:
00004012  0D0A 4272 6453          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00004016  6561 6B20 
0000401A  506F 696E 
0000401E  74        
0000401F  2077 6173 6454          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00004023  6E27 7420 
00004027  5365 742E 
0000402B  2E        
0000402C  2E2E 2E00 6455          dc.b      46,46,46,0
                    6456   @m68kde~2_68:
00004030  0D0A 456E 6457          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00004034  7465 7220 
00004038  5761 7463 
0000403C  68        
0000403D  2050 6F69 6458          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00004041  6E74 204E 
00004045  756D 6265 
00004049  72        
0000404A  3A20 00   6459          dc.b      58,32,0
                    6460   @m68kde~2_69:
0000404E  0D0A 5761 6461          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004052  7463 6820 
00004056  506F 696E 
0000405A  74        
0000405B  2043 6C65 6462          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000405F  6172 6564 
00004063  2E2E 2E2E 
00004067  2E        
00004068  0D0A 00   6463          dc.b      13,10,0
                    6464   @m68kde~2_70:
0000406C  0D0A 5761 6465          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00004070  7463 6820 
00004074  506F 696E 
00004078  74        
00004079  2057 6173 6466          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
0000407D  206E 6F74 
00004081  2053 6574 
00004085  2E        
00004086  2E2E 2E2E 6467          dc.b      46,46,46,46,0
0000408A  00        
                    6468   @m68kde~2_71:
0000408C  0D0A 4E6F 6469          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00004090  2046 5245 
00004094  4520 4272 
00004098  6561      
0000409A  6B20 506F 6470          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
0000409E  696E 7473 
000040A2  2E2E 2E2E 
000040A6  2E        
000040A7  00        6471          dc.b      0
                    6472   @m68kde~2_72:
000040A8  0D0A 4272 6473          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000040AC  6561 6B20 
000040B0  506F 696E 
000040B4  74        
000040B5  2041 6464 6474          dc.b      32,65,100,100,114,101,115,115,58,32,0
000040B9  7265 7373 
000040BD  3A20 00   
                    6475   @m68kde~2_73:
000040C0  0D0A 4572 6476          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000040C4  726F 7220 
000040C8  3A20 4272 
000040CC  65        
000040CD  616B 2050 6477          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000040D1  6F69 6E74 
000040D5  7320 4341 
000040D9  4E        
000040DA  4E4F 5420 6478          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000040DE  6265 2073 
000040E2  6574 2061 
000040E6  74        
000040E7  204F 4444 6479          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000040EB  2061 6464 
000040EF  7265 7373 
000040F3  65        
000040F4  7300      6480          dc.b      115,0
                    6481   @m68kde~2_74:
000040F6  0D0A 4572 6482          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000040FA  726F 7220 
000040FE  3A20 4272 
00004102  65        
00004103  616B 2050 6483          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00004107  6F69 6E74 
0000410B  7320 4341 
0000410F  4E        
00004110  4E4F 5420 6484          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
00004114  6265 2073 
00004118  6574 2066 
0000411C  6F        
0000411D  7220 524F 6485          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00004121  4D20 696E 
00004125  2052 616E 
00004129  67        
0000412A  6520 3A20 6486          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
0000412E  5B24 302D 
00004132  2430 3030 
00004136  3037 46   
00004139  4646 5D00 6487          dc.b      70,70,93,0
                    6488   @m68kde~2_75:
0000413E  0D0A 4572 6489          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00004142  726F 723A 
00004146  2042 7265 
0000414A  61        
0000414B  6B20 506F 6490          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
0000414F  696E 7420 
00004153  416C 7265 
00004157  6164 7920 6491          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
0000415B  4578 6973 
0000415F  7473 2061 
00004163  74        
00004164  2041 6464 6492          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
00004168  7265 7373 
0000416C  203A 2025 
00004170  30        
00004171  3878 0D0A 6493          dc.b      56,120,13,10,0
00004175  00        
                    6494   @m68kde~2_76:
00004176  0D0A 4272 6495          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000417A  6561 6B20 
0000417E  506F 696E 
00004182  74        
00004183  2053 6574 6496          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004187  2061 7420 
0000418B  4164 6472 
0000418F  65        
00004190  7373 3A20 6497          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004194  5B24 2530 
00004198  3878 5D00 
                    6498   @m68kde~2_77:
0000419C  0D0A 4E6F 6499          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
000041A0  2046 5245 
000041A4  4520 5761 
000041A8  7463      
000041AA  6820 506F 6500          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
000041AE  696E 7473 
000041B2  2E2E 2E2E 
000041B6  2E        
000041B7  00        6501          dc.b      0
                    6502   @m68kde~2_78:
000041B8  0D0A 5761 6503          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000041BC  7463 6820 
000041C0  506F 696E 
000041C4  74        
000041C5  2041 6464 6504          dc.b      32,65,100,100,114,101,115,115,58,32,0
000041C9  7265 7373 
000041CD  3A20 00   
                    6505   @m68kde~2_79:
000041D0  0D0A 4572 6506          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000041D4  726F 723A 
000041D8  2057 6174 
000041DC  63        
000041DD  6820 506F 6507          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000041E1  696E 7420 
000041E5  416C 7265 
000041E9  6164 7920 6508          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000041ED  5365 7420 
000041F1  6174 2041 
000041F5  64        
000041F6  6472 6573 6509          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000041FA  7320 3A20 
000041FE  2530 3878 
00004202  0D        
00004203  0A00      6510          dc.b      10,0
                    6511   @m68kde~2_80:
00004206  0D0A 5761 6512          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
0000420A  7463 6820 
0000420E  506F 696E 
00004212  74        
00004213  2053 6574 6513          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00004217  2061 7420 
0000421B  4164 6472 
0000421F  65        
00004220  7373 3A20 6514          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00004224  5B24 2530 
00004228  3878 5D00 
                    6515   @m68kde~2_81:
0000422C  0D0A 0D0A 6516          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00004230  0D0A 0D0A 
00004234  4042 5245 
00004238  414B 50   
0000423B  4F49 4E54 6517          dc.b      79,73,78,84,0
0000423F  00        
                    6518   @m68kde~2_82:
00004240  0D0A 5369 6519          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00004244  6E67 6C65 
00004248  2053 7465 
0000424C  70        
0000424D  203A 205B 6520          dc.b      32,58,32,91,79,78,93,0
00004251  4F4E 5D00 
                    6521   @m68kde~2_83:
00004256  0D0A 4272 6522          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
0000425A  6561 6B50 
0000425E  6F69 6E74 
00004262  73        
00004263  203A 205B 6523          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00004267  456E 6162 
0000426B  6C65 645D 
0000426F  00        
                    6524   @m68kde~2_84:
00004270  0D0A 5072 6525          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00004274  6573 7320 
00004278  3C45 5343 
0000427C  3E20      
0000427E  746F 2052 6526          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00004282  6573 756D 
00004286  6520 5573 
0000428A  6572 2050 6527          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
0000428E  726F 6772 
00004292  616D 0D0A 
00004296  00        
                    6528   @m68kde~2_85:
00004298  0D0A 556E 6529          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
0000429C  6B6E 6F77 
000042A0  6E20 436F 
000042A4  6D        
000042A5  6D61 6E64 6530          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
000042A9  2E2E 2E2E 
000042AD  2E0D 0A00 
                    6531   @m68kde~2_86:
000042B2  0D0A 5072 6532          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
000042B6  6F67 7261 
000042BA  6D20 456E 
000042BE  64        
000042BF  6564 2028 6533          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
000042C3  5452 4150 
000042C7  2023 3135 
000042CB  292E      
000042CD  2E2E 2E00 6534          dc.b      46,46,46,0
                    6535   @m68kde~2_87:
000042D2  0D0A 4B69 6536          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
000042D6  6C6C 2041 
000042DA  6C6C 2042 
000042DE  72        
000042DF  6561 6B20 6537          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
000042E3  506F 696E 
000042E7  7473 2E2E 
000042EB  2E        
000042EC  2879 2F6E 6538          dc.b      40,121,47,110,41,63,0
000042F0  293F 00   
                    6539   @m68kde~2_88:
000042F4  0D0A 4B69 6540          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
000042F8  6C6C 2041 
000042FC  6C6C 2057 
00004300  61        
00004301  7463 6820 6541          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00004305  506F 696E 
00004309  7473 2E2E 
0000430D  2E        
0000430E  2879 2F6E 6542          dc.b      40,121,47,110,41,63,0
00004312  293F 00   
                    6543   @m68kde~2_89:
00004316  0D0A 2D2D 6544          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
0000431A  2D2D 2D2D 
0000431E  2D2D 2D2D 
00004322  2D2D 2D   
00004325  2D2D 2D2D 6545          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004329  2D2D 2D2D 
0000432D  2D2D 2D2D 
00004331  2D2D 2D   
00004334  2D2D 2D2D 6546          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004338  2D2D 2D2D 
0000433C  2D2D 2D2D 
00004340  2D2D 2D   
00004343  2D2D 2D2D 6547          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00004347  2D2D 2D2D 
0000434B  2D2D 2D2D 
0000434F  2D2D 2D   
00004352  2D2D 2D2D 6548          dc.b      45,45,45,45,45,45,0
00004356  2D2D 00   
                    6549   @m68kde~2_90:
0000435A  0D0A 2020 6550          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
0000435E  4465 6275 
00004362  6767 6572 
00004366  20        
00004367  436F 6D6D 6551          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
0000436B  616E 6420 
0000436F  5375 6D6D 
00004373  6172 7900 6552          dc.b      97,114,121,0
                    6553   @m68kde~2_91:
00004378  0D0A 2020 6554          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
0000437C  2E28 7265 
00004380  6729 2020 
00004384  2020      
00004386  2020 202D 6555          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
0000438A  2043 6861 
0000438E  6E67 6520 
00004392  5265      
00004394  6769 7374 6556          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00004398  6572 733A 
0000439C  2065 2E67 
000043A0  2041 302D 6557          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
000043A4  4137 2C44 
000043A8  302D 4437 
000043AC  2C50 43   
000043AF  2C53 5350 6558          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
000043B3  2C55 5350 
000043B7  2C53 5200 
                    6559   @m68kde~2_92:
000043BC  0D0A 2020 6560          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
000043C0  4244 2F42 
000043C4  532F 4243 
000043C8  2F42 4B   
000043CB  2020 2D20 6561          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
000043CF  4272 6561 
000043D3  6B20 506F 
000043D7  69        
000043D8  6E74 3A20 6562          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
000043DC  4469 7370 
000043E0  6C61 792F 
000043E4  53        
000043E5  6574 2F43 6563          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
000043E9  6C65 6172 
000043ED  2F4B 696C 
000043F1  6C        
000043F2  00        6564          dc.b      0
                    6565   @m68kde~2_93:
000043F4  0D0A 2020 6566          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
000043F8  4320 2020 
000043FC  2020 2020 
00004400  2020 20   
00004403  2020 2D20 6567          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00004407  436F 7079 
0000440B  2050 726F 
0000440F  67        
00004410  7261 6D20 6568          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00004414  6672 6F6D 
00004418  2046 6C61 
0000441C  73        
0000441D  6820 746F 6569          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00004421  204D 6169 
00004425  6E20 4D65 
00004429  6D        
0000442A  6F72 7900 6570          dc.b      111,114,121,0
                    6571   @m68kde~2_94:
0000442E  0D0A 2020 6572          dc.b      13,10,32,32,68,32,32,32,32,32,32,32,32,32,32
00004432  4420 2020 
00004436  2020 2020 
0000443A  2020 20   
0000443D  2020 2D20 6573          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00004441  4475 6D70 
00004445  204D 656D 
00004449  6F        
0000444A  7279 2043 6574          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
0000444E  6F6E 7465 
00004452  6E74 7320 
00004456  746F 2053 6575          dc.b      116,111,32,83,99,114,101,101,110,0
0000445A  6372 6565 
0000445E  6E00      
                    6576   @m68kde~2_95:
00004460  0D0A 2020 6577          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00004464  4520 2020 
00004468  2020 2020 
0000446C  2020 20   
0000446F  2020 2D20 6578          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00004473  456E 7465 
00004477  7220 5374 
0000447B  72        
0000447C  696E 6720 6579          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00004480  696E 746F 
00004484  204D 656D 
00004488  6F72 7900 6580          dc.b      111,114,121,0
                    6581   @m68kde~2_96:
0000448C  0D0A 2020 6582          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00004490  4620 2020 
00004494  2020 2020 
00004498  2020 20   
0000449B  2020 2D20 6583          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
0000449F  4669 6C6C 
000044A3  204D 656D 
000044A7  6F        
000044A8  7279 2077 6584          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
000044AC  6974 6820 
000044B0  4461 7461 
000044B4  00        
                    6585   @m68kde~2_97:
000044B6  0D0A 2020 6586          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
000044BA  4720 2020 
000044BE  2020 2020 
000044C2  2020 20   
000044C5  2020 2D20 6587          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
000044C9  476F 2050 
000044CD  726F 6772 
000044D1  61        
000044D2  6D20 5374 6588          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
000044D6  6172 7469 
000044DA  6E67 2061 
000044DE  74        
000044DF  2041 6464 6589          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
000044E3  7265 7373 
000044E7  3A20 2425 
000044EB  30        
000044EC  3858 00   6590          dc.b      56,88,0
                    6591   @m68kde~2_98:
000044F0  0D0A 2020 6592          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000044F4  4C20 2020 
000044F8  2020 2020 
000044FC  2020 20   
000044FF  2020 2D20 6593          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00004503  4C6F 6164 
00004507  2050 726F 
0000450B  67        
0000450C  7261 6D20 6594          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00004510  282E 4845 
00004514  5820 6669 
00004518  6C        
00004519  6529 2066 6595          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
0000451D  726F 6D20 
00004521  4C61 7074 
00004525  6F        
00004526  7000      6596          dc.b      112,0
                    6597   @m68kde~2_99:
00004528  0D0A 2020 6598          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
0000452C  4D20 2020 
00004530  2020 2020 
00004534  2020 20   
00004537  2020 2D20 6599          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
0000453B  4D65 6D6F 
0000453F  7279 2045 
00004543  78        
00004544  616D 696E 6600          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00004548  6520 616E 
0000454C  6420 4368 
00004550  61        
00004551  6E67 6500 6601          dc.b      110,103,101,0
                    6602   @m68kde~2_100:
00004556  0D0A 2020 6603          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
0000455A  5020 2020 
0000455E  2020 2020 
00004562  2020 20   
00004565  2020 2D20 6604          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00004569  5072 6F67 
0000456D  7261 6D20 
00004571  46        
00004572  6C61 7368 6605          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00004576  204D 656D 
0000457A  6F72 7920 
0000457E  7769 7468 6606          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00004582  2055 7365 
00004586  7220 5072 
0000458A  6F67 7261 6607          dc.b      111,103,114,97,109,0
0000458E  6D00      
                    6608   @m68kde~2_101:
00004590  0D0A 2020 6609          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00004594  5220 2020 
00004598  2020 2020 
0000459C  2020 20   
0000459F  2020 2D20 6610          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
000045A3  4469 7370 
000045A7  6C61 7920 
000045AB  36        
000045AC  3830 3030 6611          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
000045B0  2052 6567 
000045B4  6973 7465 
000045B8  72        
000045B9  7300      6612          dc.b      115,0
                    6613   @m68kde~2_102:
000045BC  0D0A 2020 6614          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
000045C0  5320 2020 
000045C4  2020 2020 
000045C8  2020 20   
000045CB  2020 2D20 6615          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
000045CF  546F 6767 
000045D3  6C65 204F 
000045D7  4E        
000045D8  2F4F 4646 6616          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
000045DC  2053 696E 
000045E0  676C 6520 
000045E4  53        
000045E5  7465 7020 6617          dc.b      116,101,112,32,77,111,100,101,0
000045E9  4D6F 6465 
000045ED  00        
                    6618   @m68kde~2_103:
000045EE  0D0A 2020 6619          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
000045F2  544D 2020 
000045F6  2020 2020 
000045FA  2020 20   
000045FD  2020 2D20 6620          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00004601  5465 7374 
00004605  204D 656D 
00004609  6F        
0000460A  7279 00   6621          dc.b      114,121,0
                    6622   @m68kde~2_104:
0000460E  0D0A 2020 6623          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00004612  5453 2020 
00004616  2020 2020 
0000461A  2020 20   
0000461D  2020 2D20 6624          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00004621  5465 7374 
00004625  2053 7769 
00004629  74        
0000462A  6368 6573 6625          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
0000462E  3A20 5357 
00004632  372D 3000 
                    6626   @m68kde~2_105:
00004636  0D0A 2020 6627          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
0000463A  5444 2020 
0000463E  2020 2020 
00004642  2020 20   
00004645  2020 2D20 6628          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00004649  5465 7374 
0000464D  2044 6973 
00004651  70        
00004652  6C61 7973 6629          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00004656  3A20 4C45 
0000465A  4473 2061 
0000465E  6E        
0000465F  6420 372D 6630          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00004663  5365 676D 
00004667  656E 7400 
                    6631   @m68kde~2_106:
0000466C  0D0A 2020 6632          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00004670  5744 2F57 
00004674  532F 5743 
00004678  2F57 4B   
0000467B  2020 2D20 6633          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
0000467F  5761 7463 
00004683  6820 506F 
00004687  696E      
00004689  743A 2044 6634          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
0000468D  6973 706C 
00004691  6179 2F53 
00004695  65        
00004696  742F 436C 6635          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
0000469A  6561 722F 
0000469E  4B69 6C6C 
000046A2  00        
                    6636   @m68kde~2_107:
000046A4  0D0A 2300 6637          dc.b      13,10,35,0
                    6638   @m68kde~2_108:
000046A8  0D0A 5072 6639          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
000046AC  6F67 7261 
000046B0  6D20 5275 
000046B4  6E        
000046B5  6E69 6E67 6640          dc.b      110,105,110,103,46,46,46,46,46,0
000046B9  2E2E 2E2E 
000046BD  2E00      
                    6641   @m68kde~2_109:
000046C0  0D0A 5072 6642          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
000046C4  6573 7320 
000046C8  3C52 4553 
000046CC  4554      
000046CE  3E20 6275 6643          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
000046D2  7474 6F6E 
000046D6  203C 4B65 
000046DA  79        
000046DB  303E 206F 6644          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
000046DF  6E20 4445 
000046E3  3120 746F 
000046E7  2073      
000046E9  746F 7000 6645          dc.b      116,111,112,0
                    6646   @m68kde~2_110:
000046EE  0D0A 4572 6647          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
000046F2  726F 723A 
000046F6  2050 7265 
000046FA  73        
000046FB  7320 2747 6648          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
000046FF  2720 6669 
00004703  7273 7420 
00004707  74        
00004708  6F20 7374 6649          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
0000470C  6172 7420 
00004710  7072 6F67 
00004714  7261 6D00 6650          dc.b      114,97,109,0
                    6651   @m68kde~2_111:
00004718  0D0A 5369 6652          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000471C  6E67 6C65 
00004720  2053 7465 
00004724  70        
00004725  2020 3A5B 6653          dc.b      32,32,58,91,79,78,93,0
00004729  4F4E 5D00 
                    6654   @m68kde~2_112:
0000472E  0D0A 5072 6655          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00004732  6573 7320 
00004736  2747 2720 
0000473A  74        
0000473B  6F20 5472 6656          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
0000473F  6163 6520 
00004743  5072 6F67 
00004747  72        
00004748  616D 2066 6657          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
0000474C  726F 6D20 
00004750  6164 6472 
00004754  6573 7320 6658          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00004758  2425 582E 
0000475C  2E2E 2E2E 
00004760  00        
                    6659   @m68kde~2_113:
00004762  0D0A 5075 6660          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00004766  7368 203C 
0000476A  5245 5345 
0000476E  5420      
00004770  4275 7474 6661          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00004774  6F6E 3E20 
00004778  746F 2053 
0000477C  74        
0000477D  6F70 2E2E 6662          dc.b      111,112,46,46,46,46,46,0
00004781  2E2E 2E00 
                    6663   @m68kde~2_114:
00004786  0D0A 5369 6664          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
0000478A  6E67 6C65 
0000478E  2053 7465 
00004792  70        
00004793  203A 205B 6665          dc.b      32,58,32,91,79,70,70,93,0
00004797  4F46 465D 
0000479B  00        
                    6666   @m68kde~2_115:
0000479C  0D0A 4272 6667          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000047A0  6561 6B20 
000047A4  506F 696E 
000047A8  74        
000047A9  7320 3A5B 6668          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
000047AD  456E 6162 
000047B1  6C65 645D 
000047B5  00        
                    6669   @m68kde~2_116:
000047B6  0D0A 5072 6670          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000047BA  6573 7320 
000047BE  3C45 5343 
000047C2  3E20      
000047C4  746F 2052 6671          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
000047C8  6573 756D 
000047CC  6520 5573 
000047D0  6572 2050 6672          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
000047D4  726F 6772 
000047D8  616D 2E2E 
000047DC  2E        
000047DD  2E2E 00   6673          dc.b      46,46,0
                    6674   @m68kde~2_117:
000047E0  0D0A 5369 6675          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000047E4  6E67 6C65 
000047E8  2053 7465 
000047EC  70        
000047ED  2020 3A5B 6676          dc.b      32,32,58,91,79,70,70,93,0
000047F1  4F46 465D 
000047F5  00        
                    6677   @m68kde~2_118:
000047F6  0D0A 0D0A 6678          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
000047FA  5072 6F67 
000047FE  7261 6D20 
00004802  41        
00004803  424F 5254 6679          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00004807  2021 2121 
0000480B  2121 210D 
0000480F  0A00      
                    6680   @m68kde~2_119:
00004812  2573 0D0A 6681          dc.b      37,115,13,10,0
00004816  00        
                    6682   @m68kde~2_120:
00004818  0D0A 0D0A 6683          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
0000481C  5072 6F67 
00004820  7261 6D20 
00004824  41        
00004825  424F 5254 6684          dc.b      66,79,82,84,32,33,33,33,33,33,0
00004829  2021 2121 
0000482D  2121 00   
                    6685   @m68kde~2_121:
00004830  0D0A 556E 6686          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00004834  6861 6E64 
00004838  6C65 6420 
0000483C  49        
0000483D  6E74 6572 6687          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00004841  7275 7074 
00004845  3A20 4952 
00004849  5125 6420 6688          dc.b      81,37,100,32,33,33,33,33,33,0
0000484D  2121 2121 
00004851  2100      
                    6689   @m68kde~2_122:
00004854  4144 4452 6690          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00004858  4553 5320 
0000485C  4552 524F 
00004860  523A 20   
00004863  3136 206F 6691          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00004867  7220 3332 
0000486B  2042 6974 
0000486F  2054      
00004871  7261 6E73 6692          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00004875  6665 7220 
00004879  746F 2F66 
0000487D  726F 6D20 6693          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00004881  616E 204F 
00004885  4444 2041 
00004889  64        
0000488A  6472 6573 6694          dc.b      100,114,101,115,115,46,46,46,46,0
0000488E  732E 2E2E 
00004892  2E00      
                    6695   @m68kde~2_123:
00004894  556E 6861 6696          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00004898  6E64 6C65 
0000489C  6420 5472 
000048A0  6170 2021 6697          dc.b      97,112,32,33,33,33,33,33,0
000048A4  2121 2121 
000048A8  00        
                    6698   @m68kde~2_124:
000048AA  4255 5320 6699          dc.b      66,85,83,32,69,114,114,111,114,33,0
000048AE  4572 726F 
000048B2  7221 00   
                    6700   @m68kde~2_125:
000048B6  4144 4452 6701          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
000048BA  4553 5320 
000048BE  4572 726F 
000048C2  7221      
000048C4  00        6702          dc.b      0
                    6703   @m68kde~2_126:
000048C6  494C 4C45 6704          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000048CA  4741 4C20 
000048CE  494E 5354 
000048D2  5255 43   
000048D5  5449 4F4E 6705          dc.b      84,73,79,78,0
000048D9  00        
                    6706   @m68kde~2_127:
000048DA  4449 5649 6707          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000048DE  4445 2042 
000048E2  5920 5A45 
000048E6  524F 00   
                    6708   @m68kde~2_128:
000048EA  2743 484B 6709          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
000048EE  2720 494E 
000048F2  5354 5255 
000048F6  4354 49   
000048F9  4F4E 00   6710          dc.b      79,78,0
                    6711   @m68kde~2_129:
000048FC  5452 4150 6712          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00004900  5620 494E 
00004904  5354 5255 
00004908  4354 49   
0000490B  4F4E 00   6713          dc.b      79,78,0
                    6714   @m68kde~2_130:
0000490E  5052 4956 6715          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00004912  494C 4547 
00004916  4520 5649 
0000491A  4F4C 41   
0000491D  5449 4F4E 6716          dc.b      84,73,79,78,0
00004921  00        
                    6717   @m68kde~2_131:
00004922  554E 494E 6718          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00004926  4954 4941 
0000492A  4C49 5345 
0000492E  4420 49   
00004931  5251 00   6719          dc.b      82,81,0
                    6720   @m68kde~2_132:
00004934  5350 5552 6721          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00004938  494F 5553 
0000493C  2049 5251 
00004940  00        
                    6722   @m68kde~2_133:
00004942  0D0A 5374 6723          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00004946  6172 7420 
0000494A  4164 6472 
0000494E  65        
0000494F  7373 2069 6724          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00004953  6E20 4D65 
00004957  6D6F 7279 
0000495B  3A20 00   6725          dc.b      58,32,0
                    6726   @m68kde~2_134:
0000495E  0D0A 456E 6727          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00004962  7465 7220 
00004966  5374 7269 
0000496A  6E        
0000496B  6720 2845 6728          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
0000496F  5343 2074 
00004973  6F20 656E 
00004977  64        
00004978  2920 3A00 6729          dc.b      41,32,58,0
                    6730   @m68kde~2_135:
0000497C  0D0A 5768 6731          dc.b      13,10,87,104,105,99,104,32,77,101,109,111,114
00004980  6963 6820 
00004984  4D65 6D6F 
00004988  72        
00004989  7920 646F 6732          dc.b      121,32,100,111,32,121,111,117,32,119,97,110
0000498D  2079 6F75 
00004991  2077 616E 
00004995  7420 746F 6733          dc.b      116,32,116,111,32,116,101,115,116,63,32,69,110
00004999  2074 6573 
0000499D  743F 2045 
000049A1  6E        
000049A2  7465 7220 6734          dc.b      116,101,114,32,48,32,102,111,114,32,68,82,65
000049A6  3020 666F 
000049AA  7220 4452 
000049AE  41        
000049AF  4D20 6F72 6735          dc.b      77,32,111,114,32,49,32,102,111,114,32,83,82
000049B3  2031 2066 
000049B7  6F72 2053 
000049BB  52        
000049BC  414D 00   6736          dc.b      65,77,0
                    6737   @m68kde~2_136:
000049C0  0D0A 5768 6738          dc.b      13,10,87,104,105,99,104,32,116,101,115,116,32
000049C4  6963 6820 
000049C8  7465 7374 
000049CC  20        
000049CD  646F 2079 6739          dc.b      100,111,32,121,111,117,32,119,97,110,116,32
000049D1  6F75 2077 
000049D5  616E 7420 
000049D9  746F 2070 6740          dc.b      116,111,32,112,101,114,102,111,114,109,63,32
000049DD  6572 666F 
000049E1  726D 3F20 
000049E5  456E 7465 6741          dc.b      69,110,116,101,114,32,39,48,39,32,102,111,114
000049E9  7220 2730 
000049ED  2720 666F 
000049F1  72        
000049F2  2052 6561 6742          dc.b      32,82,101,97,100,32,111,114,32,39,49,39,32,102
000049F6  6420 6F72 
000049FA  2027 3127 
000049FE  2066      
00004A00  6F72 2057 6743          dc.b      111,114,32,87,114,105,116,101,58,32,0
00004A04  7269 7465 
00004A08  3A20 00   
                    6744   @m68kde~2_137:
00004A0C  0D0A 4572 6745          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
00004A10  726F 723A 
00004A14  2049 6E76 
00004A18  61        
00004A19  6C69 6420 6746          dc.b      108,105,100,32,73,110,112,117,116,0
00004A1D  496E 7075 
00004A21  7400      
                    6747   @m68kde~2_138:
00004A24  0D0A 5370 6748          dc.b      13,10,83,112,101,99,105,102,121,32,116,104,101
00004A28  6563 6966 
00004A2C  7920 7468 
00004A30  65        
00004A31  206D 656D 6749          dc.b      32,109,101,109,111,114,121,32,116,101,115,116
00004A35  6F72 7920 
00004A39  7465 7374 
00004A3D  2074 7970 6750          dc.b      32,116,121,112,101,46,32,73,110,112,117,116
00004A41  652E 2049 
00004A45  6E70 7574 
00004A49  2027 3027 6751          dc.b      32,39,48,39,32,102,111,114,32,66,121,116,101
00004A4D  2066 6F72 
00004A51  2042 7974 
00004A55  65        
00004A56  732C 2027 6752          dc.b      115,44,32,39,49,39,32,102,111,114,32,87,111
00004A5A  3127 2066 
00004A5E  6F72 2057 
00004A62  6F        
00004A63  7264 2C20 6753          dc.b      114,100,44,32,97,110,100,32,39,50,39,32,102
00004A67  616E 6420 
00004A6B  2732 2720 
00004A6F  66        
00004A70  6F72 204C 6754          dc.b      111,114,32,76,111,110,103,32,87,111,114,100
00004A74  6F6E 6720 
00004A78  576F 7264 
00004A7C  3A20 00   6755          dc.b      58,32,0
                    6756   @m68kde~2_139:
00004A80  0D0A 4572 6757          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
00004A84  726F 723A 
00004A88  2049 6E76 
00004A8C  61        
00004A8D  6C69 6420 6758          dc.b      108,105,100,32,73,110,112,117,116,33,0
00004A91  496E 7075 
00004A95  7421 00   
                    6759   @m68kde~2_140:
00004A98  0D0A 5072 6760          dc.b      13,10,80,114,111,118,105,100,101,32,97,32,115
00004A9C  6F76 6964 
00004AA0  6520 6120 
00004AA4  73        
00004AA5  7461 7274 6761          dc.b      116,97,114,116,32,97,100,100,114,101,115,115
00004AA9  2061 6464 
00004AAD  7265 7373 
00004AB1  2066 6F72 6762          dc.b      32,102,111,114,32,121,111,117,114,32,100,97
00004AB5  2079 6F75 
00004AB9  7220 6461 
00004ABD  7461 3A20 6763          dc.b      116,97,58,32,0
00004AC1  00        
                    6764   @m68kde~2_141:
00004AC2  0D0A 4572 6765          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
00004AC6  726F 723A 
00004ACA  2049 6E76 
00004ACE  61        
00004ACF  6C69 6420 6766          dc.b      108,105,100,32,97,100,100,114,101,115,115,33
00004AD3  6164 6472 
00004AD7  6573 7321 
00004ADB  2053 7461 6767          dc.b      32,83,116,97,114,116,32,97,100,100,114,101,115
00004ADF  7274 2061 
00004AE3  6464 7265 
00004AE7  73        
00004AE8  7320 666F 6768          dc.b      115,32,102,111,114,32,83,82,65,77,32,99,97,110
00004AEC  7220 5352 
00004AF0  414D 2063 
00004AF4  616E      
00004AF6  6E6F 7420 6769          dc.b      110,111,116,32,98,101,32,108,101,115,115,32
00004AFA  6265 206C 
00004AFE  6573 7320 
00004B02  7468 616E 6770          dc.b      116,104,97,110,32,70,48,48,48,48,48,48,48,32
00004B06  2046 3030 
00004B0A  3030 3030 
00004B0E  3020      
00004B10  6F72 2067 6771          dc.b      111,114,32,103,114,101,97,116,101,114,32,116
00004B14  7265 6174 
00004B18  6572 2074 
00004B1C  6861 6E20 6772          dc.b      104,97,110,32,48,120,70,48,48,51,70,70,70,70
00004B20  3078 4630 
00004B24  3033 4646 
00004B28  4646      
00004B2A  00        6773          dc.b      0
                    6774   @m68kde~2_142:
00004B2C  0D0A 4572 6775          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
00004B30  726F 723A 
00004B34  2049 6E76 
00004B38  61        
00004B39  6C69 6420 6776          dc.b      108,105,100,32,97,100,100,114,101,115,115,33
00004B3D  6164 6472 
00004B41  6573 7321 
00004B45  2053 7461 6777          dc.b      32,83,116,97,114,116,32,97,100,100,114,101,115
00004B49  7274 2061 
00004B4D  6464 7265 
00004B51  73        
00004B52  7320 666F 6778          dc.b      115,32,102,111,114,32,68,82,65,77,32,99,97,110
00004B56  7220 4452 
00004B5A  414D 2063 
00004B5E  616E      
00004B60  6E6F 7420 6779          dc.b      110,111,116,32,98,101,32,108,101,115,115,32
00004B64  6265 206C 
00004B68  6573 7320 
00004B6C  7468 616E 6780          dc.b      116,104,97,110,32,48,57,48,48,48,48,48,48,32
00004B70  2030 3930 
00004B74  3030 3030 
00004B78  3020      
00004B7A  6F72 2067 6781          dc.b      111,114,32,103,114,101,97,116,101,114,32,116
00004B7E  7265 6174 
00004B82  6572 2074 
00004B86  6861 6E20 6782          dc.b      104,97,110,32,48,57,55,70,70,70,70,70,0
00004B8A  3039 3746 
00004B8E  4646 4646 
00004B92  00        
                    6783   @m68kde~2_143:
00004B94  0D0A 4F64 6784          dc.b      13,10,79,100,100,32,97,100,100,114,101,115,115
00004B98  6420 6164 
00004B9C  6472 6573 
00004BA0  73        
00004BA1  2069 7320 6785          dc.b      32,105,115,32,110,111,116,32,97,108,108,111
00004BA5  6E6F 7420 
00004BA9  616C 6C6F 
00004BAD  7765 6420 6786          dc.b      119,101,100,32,102,111,114,32,119,111,114,100
00004BB1  666F 7220 
00004BB5  776F 7264 
00004BB9  206F 7220 6787          dc.b      32,111,114,32,108,111,110,103,32,119,111,114
00004BBD  6C6F 6E67 
00004BC1  2077 6F72 
00004BC5  6421 00   6788          dc.b      100,33,0
                    6789   @m68kde~2_144:
00004BC8  0D0A 596F 6790          dc.b      13,10,89,111,117,32,104,97,118,101,32,101,110
00004BCC  7520 6861 
00004BD0  7665 2065 
00004BD4  6E        
00004BD5  7465 7265 6791          dc.b      116,101,114,101,100,32,37,120,32,102,111,114
00004BD9  6420 2578 
00004BDD  2066 6F72 
00004BE1  2074 6865 6792          dc.b      32,116,104,101,32,115,116,97,114,116,32,97,100
00004BE5  2073 7461 
00004BE9  7274 2061 
00004BED  64        
00004BEE  6472 6573 6793          dc.b      100,114,101,115,115,0
00004BF2  7300      
                    6794   @m68kde~2_145:
00004BF4  0D0A 5072 6795          dc.b      13,10,80,114,111,118,105,100,101,32,97,110,32
00004BF8  6F76 6964 
00004BFC  6520 616E 
00004C00  20        
00004C01  656E 6420 6796          dc.b      101,110,100,32,97,100,100,114,101,115,115,32
00004C05  6164 6472 
00004C09  6573 7320 
00004C0D  666F 7220 6797          dc.b      102,111,114,32,121,111,117,114,32,100,97,116
00004C11  796F 7572 
00004C15  2064 6174 
00004C19  613A 2000 6798          dc.b      97,58,32,0
                    6799   @m68kde~2_146:
00004C1E  0D0A 4572 6800          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
00004C22  726F 723A 
00004C26  2049 6E76 
00004C2A  61        
00004C2B  6C69 6420 6801          dc.b      108,105,100,32,97,100,100,114,101,115,115,33
00004C2F  6164 6472 
00004C33  6573 7321 
00004C37  2045 6E64 6802          dc.b      32,69,110,100,32,97,100,100,114,101,115,115
00004C3B  2061 6464 
00004C3F  7265 7373 
00004C43  2066 6F72 6803          dc.b      32,102,111,114,32,83,82,65,77,32,115,104,111
00004C47  2053 5241 
00004C4B  4D20 7368 
00004C4F  6F        
00004C50  756C 6420 6804          dc.b      117,108,100,32,110,111,116,32,98,101,32,108
00004C54  6E6F 7420 
00004C58  6265 206C 
00004C5C  6573 7320 6805          dc.b      101,115,115,32,116,104,97,110,32,111,114,32
00004C60  7468 616E 
00004C64  206F 7220 
00004C68  6571 7561 6806          dc.b      101,113,117,97,108,32,116,111,32,115,116,97
00004C6C  6C20 746F 
00004C70  2073 7461 
00004C74  7274 2061 6807          dc.b      114,116,32,97,100,100,114,101,115,115,32,111
00004C78  6464 7265 
00004C7C  7373 206F 
00004C80  7220 6772 6808          dc.b      114,32,103,114,101,97,116,101,114,32,116,104
00004C84  6561 7465 
00004C88  7220 7468 
00004C8C  616E 2046 6809          dc.b      97,110,32,70,48,48,51,70,70,70,70,0
00004C90  3030 3346 
00004C94  4646 4600 
                    6810   @m68kde~2_147:
00004C98  0D0A 4572 6811          dc.b      13,10,69,114,114,111,114,58,32,73,110,118,97
00004C9C  726F 723A 
00004CA0  2049 6E76 
00004CA4  61        
00004CA5  6C69 6420 6812          dc.b      108,105,100,32,97,100,100,114,101,115,115,33
00004CA9  6164 6472 
00004CAD  6573 7321 
00004CB1  2045 6E64 6813          dc.b      32,69,110,100,32,97,100,100,114,101,115,115
00004CB5  2061 6464 
00004CB9  7265 7373 
00004CBD  2066 6F72 6814          dc.b      32,102,111,114,32,68,82,65,77,32,115,104,111
00004CC1  2044 5241 
00004CC5  4D20 7368 
00004CC9  6F        
00004CCA  756C 6420 6815          dc.b      117,108,100,32,110,111,116,32,98,101,32,108
00004CCE  6E6F 7420 
00004CD2  6265 206C 
00004CD6  6573 7320 6816          dc.b      101,115,115,32,116,104,97,110,32,111,114,32
00004CDA  7468 616E 
00004CDE  206F 7220 
00004CE2  6571 7561 6817          dc.b      101,113,117,97,108,32,116,111,32,115,116,97
00004CE6  6C20 746F 
00004CEA  2073 7461 
00004CEE  7274 2061 6818          dc.b      114,116,32,97,100,100,114,101,115,115,32,111
00004CF2  6464 7265 
00004CF6  7373 206F 
00004CFA  7220 6772 6819          dc.b      114,32,103,114,101,97,116,101,114,32,116,104
00004CFE  6561 7465 
00004D02  7220 7468 
00004D06  616E 2030 6820          dc.b      97,110,32,48,57,55,70,70,70,70,70,0
00004D0A  3937 4646 
00004D0E  4646 4600 
                    6821   @m68kde~2_148:
00004D12  0D0A 4572 6822          dc.b      13,10,69,114,114,111,114,58,32,68,97,116,97
00004D16  726F 723A 
00004D1A  2044 6174 
00004D1E  61        
00004D1F  2063 616E 6823          dc.b      32,99,97,110,110,111,116,32,98,101,32,102,105
00004D23  6E6F 7420 
00004D27  6265 2066 
00004D2B  69        
00004D2C  7474 6564 6824          dc.b      116,116,101,100,32,105,110,32,103,105,118,101
00004D30  2069 6E20 
00004D34  6769 7665 
00004D38  6E20 6164 6825          dc.b      110,32,97,100,100,114,101,115,115,32,114,97
00004D3C  6472 6573 
00004D40  7320 7261 
00004D44  6E67 6500 6826          dc.b      110,103,101,0
                    6827   @m68kde~2_149:
00004D48  0D0A 4572 6828          dc.b      13,10,69,114,114,111,114,58,32,78,111,116,32
00004D4C  726F 723A 
00004D50  204E 6F74 
00004D54  20        
00004D55  656E 6F75 6829          dc.b      101,110,111,117,103,104,32,97,100,100,114,101
00004D59  6768 2061 
00004D5D  6464 7265 
00004D61  7373 2072 6830          dc.b      115,115,32,114,97,110,103,101,32,116,111,32
00004D65  616E 6765 
00004D69  2074 6F20 
00004D6D  7265 6164 6831          dc.b      114,101,97,100,32,116,104,101,32,100,97,116
00004D71  2074 6865 
00004D75  2064 6174 
00004D79  6100      6832          dc.b      97,0
                    6833   @m68kde~2_150:
00004D7C  0D0A 5765 6834          dc.b      13,10,87,101,32,97,114,101,32,110,111,116,32
00004D80  2061 7265 
00004D84  206E 6F74 
00004D88  20        
00004D89  7375 7070 6835          dc.b      115,117,112,112,111,115,101,100,32,116,111,32
00004D8D  6F73 6564 
00004D91  2074 6F20 
00004D95  6765 7420 6836          dc.b      103,101,116,32,104,101,114,101,33,32,68,101
00004D99  6865 7265 
00004D9D  2120 4465 
00004DA1  6661 756C 6837          dc.b      102,97,117,108,116,32,105,115,32,105,110,99
00004DA5  7420 6973 
00004DA9  2069 6E63 
00004DAD  7265 6D65 6838          dc.b      114,101,109,101,110,116,32,98,121,32,49,32,98
00004DB1  6E74 2062 
00004DB5  7920 3120 
00004DB9  62        
00004DBA  7974 652E 6839          dc.b      121,116,101,46,0
00004DBE  00        
                    6840   @m68kde~2_151:
00004DC0  0D0A 4461 6841          dc.b      13,10,68,97,116,97,32,97,116,32,108,111,99,97
00004DC4  7461 2061 
00004DC8  7420 6C6F 
00004DCC  6361      
00004DCE  7469 6F6E 6842          dc.b      116,105,111,110,32,37,120,58,32,37,48,50,120
00004DD2  2025 783A 
00004DD6  2025 3032 
00004DDA  78        
00004DDB  00        6843          dc.b      0
                    6844   @m68kde~2_152:
00004DDC  0D0A 576F 6845          dc.b      13,10,87,111,114,100,32,97,116,32,108,111,99
00004DE0  7264 2061 
00004DE4  7420 6C6F 
00004DE8  63        
00004DE9  6174 696F 6846          dc.b      97,116,105,111,110,32,37,120,58,32,37,48,50
00004DED  6E20 2578 
00004DF1  3A20 2530 
00004DF5  32        
00004DF6  7825 3032 6847          dc.b      120,37,48,50,120,0
00004DFA  7800      
                    6848   @m68kde~2_153:
00004DFC  0D0A 4C6F 6849          dc.b      13,10,76,111,110,103,32,119,111,114,100,32,97
00004E00  6E67 2077 
00004E04  6F72 6420 
00004E08  61        
00004E09  7420 6C6F 6850          dc.b      116,32,108,111,99,97,116,105,111,110,32,37,120
00004E0D  6361 7469 
00004E11  6F6E 2025 
00004E15  78        
00004E16  3A20 2530 6851          dc.b      58,32,37,48,50,120,37,48,50,120,37,48,50,120
00004E1A  3278 2530 
00004E1E  3278 2530 
00004E22  3278      
00004E24  2530 3278 6852          dc.b      37,48,50,120,0
00004E28  00        
                    6853   @m68kde~2_154:
00004E2A  0D0A 4669 6854          dc.b      13,10,70,105,110,105,115,104,101,100,32,114
00004E2E  6E69 7368 
00004E32  6564 2072 
00004E36  6561 6469 6855          dc.b      101,97,100,105,110,103,0
00004E3A  6E67 00   
                    6856   @m68kde~2_155:
00004E3E  0D0A 456E 6857          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,100
00004E42  7465 7220 
00004E46  7468 6520 
00004E4A  64        
00004E4B  6174 6120 6858          dc.b      97,116,97,32,105,110,32,102,111,114,109,97,116
00004E4F  696E 2066 
00004E53  6F72 6D61 
00004E57  74        
00004E58  2058 583A 6859          dc.b      32,88,88,58,32,0
00004E5C  2000      
                    6860   @m68kde~2_156:
00004E5E  0D0A 456E 6861          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,100
00004E62  7465 7220 
00004E66  7468 6520 
00004E6A  64        
00004E6B  6174 6120 6862          dc.b      97,116,97,32,105,110,32,102,111,114,109,97,116
00004E6F  696E 2066 
00004E73  6F72 6D61 
00004E77  74        
00004E78  2058 5858 6863          dc.b      32,88,88,88,88,58,32,0
00004E7C  583A 2000 
                    6864   @m68kde~2_157:
00004E80  0D0A 456E 6865          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,100
00004E84  7465 7220 
00004E88  7468 6520 
00004E8C  64        
00004E8D  6174 6120 6866          dc.b      97,116,97,32,105,110,32,102,111,114,109,97,116
00004E91  696E 2066 
00004E95  6F72 6D61 
00004E99  74        
00004E9A  2058 5858 6867          dc.b      32,88,88,88,88,88,88,88,88,58,32,0
00004E9E  5858 5858 
00004EA2  583A 2000 
                    6868   @m68kde~2_158:
00004EA6  0D0A 5772 6869          dc.b      13,10,87,114,105,116,105,110,103,32,37,120,32
00004EAA  6974 696E 
00004EAE  6720 2578 
00004EB2  20        
00004EB3  6174 206C 6870          dc.b      97,116,32,108,111,99,97,116,105,111,110,32,37
00004EB7  6F63 6174 
00004EBB  696F 6E20 
00004EBF  25        
00004EC0  7800      6871          dc.b      120,0
                    6872   @m68kde~2_159:
00004EC2  0D0A 4572 6873          dc.b      13,10,69,114,114,111,114,32,119,114,105,116
00004EC6  726F 7220 
00004ECA  7772 6974 
00004ECE  696E 6720 6874          dc.b      105,110,103,32,37,120,32,116,111,32,97,100,100
00004ED2  2578 2074 
00004ED6  6F20 6164 
00004EDA  64        
00004EDB  7265 7373 6875          dc.b      114,101,115,115,32,37,120,0
00004EDF  2025 7800 
                    6876   @m68kde~2_160:
00004EE4  0D0A 4572 6877          dc.b      13,10,69,114,114,111,114,58,32,69,110,100,32
00004EE8  726F 723A 
00004EEC  2045 6E64 
00004EF0  20        
00004EF1  6164 6472 6878          dc.b      97,100,100,114,101,115,115,32,108,105,109,105
00004EF5  6573 7320 
00004EF9  6C69 6D69 
00004EFD  7420 7265 6879          dc.b      116,32,114,101,97,99,104,101,100,0
00004F01  6163 6865 
00004F05  6400      
                    6880   @m68kde~2_161:
00004F08  0D0A 4361 6881          dc.b      13,10,67,97,110,110,111,116,32,119,114,105,116
00004F0C  6E6E 6F74 
00004F10  2077 7269 
00004F14  74        
00004F15  6520 2578 6882          dc.b      101,32,37,120,32,97,110,100,32,37,120,0
00004F19  2061 6E64 
00004F1D  2025 7800 
                    6883   @m68kde~2_162:
00004F22  0D0A 5772 6884          dc.b      13,10,87,114,105,116,105,110,103,32,102,105
00004F26  6974 696E 
00004F2A  6720 6669 
00004F2E  6E69 7368 6885          dc.b      110,105,115,104,101,100,32,97,116,32,37,48,56
00004F32  6564 2061 
00004F36  7420 2530 
00004F3A  38        
00004F3B  7800      6886          dc.b      120,0
                    6887   @m68kde~2_163:
00004F3E  5374 7564 6888          dc.b      83,116,117,100,101,110,116,39,115,32,78,97,109
00004F42  656E 7427 
00004F46  7320 4E61 
00004F4A  6D        
00004F4B  6573 3A20 6889          dc.b      101,115,58,32,74,105,110,105,108,32,80,97,116
00004F4F  4A69 6E69 
00004F53  6C20 5061 
00004F57  74        
00004F58  656C 2061 6890          dc.b      101,108,32,97,110,100,32,83,97,105,102,32,65
00004F5C  6E64 2053 
00004F60  6169 6620 
00004F64  41        
00004F65  6264 656C 6891          dc.b      98,100,101,108,97,122,105,109,0
00004F69  617A 696D 
00004F6D  00        
                    6892   @m68kde~2_164:
00004F6E  5374 7564 6893          dc.b      83,116,117,100,101,110,116,32,35,58,32,51,56
00004F72  656E 7420 
00004F76  233A 2033 
00004F7A  38        
00004F7B  3234 3037 6894          dc.b      50,52,48,55,50,55,32,97,110,100,32,32,54,50
00004F7F  3237 2061 
00004F83  6E64 2020 
00004F87  3632      
00004F89  3633 3934 6895          dc.b      54,51,57,52,50,50,0
00004F8D  3232 00   
                    6896   @m68kde~2_165:
00004F90  0D0A 5275 6897          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00004F94  6E6E 696E 
00004F98  672E 2E2E 
00004F9C  2E        
00004F9D  2E00      6898          dc.b      46,0
                    6899   @m68kde~2_166:
00004FA0  5275 6E6E 6900          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00004FA4  696E 672E 
00004FA8  2E2E 2E2E 
00004FAC  00        
                    6901   @m68kde~2_167:
00004FAE  4279 3A20 6902          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00004FB2  504A 2044 
00004FB6  6176 6965 
00004FBA  73        
00004FBB  00        6903          dc.b      0
                    6904   @m68kde~2_168:
00004FBC  0D0A 2573 6905          dc.b      13,10,37,115,0
00004FC0  00        
                    6906   @itoa_1:
00004FC2  2D32 3134 6907          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
00004FC6  3734 3833 
00004FCA  3634 3800 
                    6908   __ctype:
00004FCE  0040 4040 6909          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
00004FD2  4040 4040 
00004FD6  4040 5050 
00004FDA  5050 50   
00004FDD  4040 4040 6910          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
00004FE1  4040 4040 
00004FE5  4040 4040 
00004FE9  4040 40   
00004FEC  4040 40D0 6911          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
00004FF0  A0A0 A0A0 
00004FF4  A0A0 A0A0 
00004FF8  A0A0 A0A0 6912          dc.b      160,160,160,160,160,160,160,140,140,140,140
00004FFC  A0A0 A08C 
00005000  8C8C 8C   
00005003  8C8C 8C8C 6913          dc.b      140,140,140,140,140,140,160,160,160,160,160
00005007  8C8C A0A0 
0000500B  A0A0 A0   
0000500E  A0A0 8A8A 6914          dc.b      160,160,138,138,138,138,138,138,130,130,130
00005012  8A8A 8A8A 
00005016  8282 82   
00005019  8282 8282 6915          dc.b      130,130,130,130,130,130,130,130,130,130,130
0000501D  8282 8282 
00005021  8282 82   
00005024  8282 8282 6916          dc.b      130,130,130,130,130,130,160,160,160,160,160
00005028  8282 A0A0 
0000502C  A0A0 A0   
0000502F  A089 8989 6917          dc.b      160,137,137,137,137,137,137,129,129,129,129
00005033  8989 8981 
00005037  8181 81   
0000503A  8181 8181 6918          dc.b      129,129,129,129,129,129,129,129,129,129,129
0000503E  8181 8181 
00005042  8181 81   
00005045  8181 8181 6919          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
00005049  81A0 A0A0 
0000504D  A040 0000 
00005051  00        
00005052  0000 0000 6920          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005056  0000 0000 
0000505A  0000 0000 
0000505E  0000 0000 
00005062  0000 0000 
00005066  0000      
00005068  0000 0000 6921          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000506C  0000 0000 
00005070  0000 0000 
00005074  0000 0000 
00005078  0000 0000 
0000507C  0000      
0000507E  0000 0000 6922          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005082  0000 0000 
00005086  0000 0000 
0000508A  0000 0000 
0000508E  0000 0000 
00005092  0000      
00005094  0000 0000 6923          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00005098  0000 0000 
0000509C  0000 0000 
000050A0  0000 0000 
000050A4  0000 0000 
000050A8  0000      
000050AA  0000 0000 6924          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000050AE  0000 0000 
000050B2  0000 0000 
000050B6  0000 0000 
000050BA  0000 0000 
000050BE  0000      
000050C0  0000 0000 6925          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
000050C4  0000 0000 
000050C8  0000 0000 
000050CC  0000 00   
                    6926          section   data
000050D0            6927                   align
          0000 50D0 6928   DataStart       equ       *
                    6929   
                    6930   *********************************************************************************************************
                    6931   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    6932   * to ram as part of the CStart routine in this file
                    6933   *********************************************************************************************************
                    6934   
                    6935          section   bss
000050D0            6936                   align
          0000 50D0 6937   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    6938   
                    6939   *********************************************************************************************************
                    6940   * Section for Uninitialised Data held in ROM as constants
                    6941   *********************************************************************************************************
                    6942   
0B000000            6943                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0000 6944   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    6945   
                    6946   
0B000000            6947   bss             org       bss
                    6948   
                    6949   *********************************************************************************************************
                    6950   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    6951   * install the exception handler using the C function InstallExceptionHandler()
                    6952   *********************************************************************************************************
                    6953   
                    6954   
                    6955   
0B000000            6956   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            6957   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            6958   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            6959   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            6960   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            6961   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            6962   VCheck           ds.l    1      ditto
0B00001C            6963   VTrapV           ds.l    1      ditto
0B000020            6964   VPrivilege       ds.l    1      ditto
0B000024            6965   VTrace           ds.l    1
0B000028            6966   VLine1010emul    ds.l    1
0B00002C            6967   VLine1111emul    ds.l    1
0B000030            6968   VUnassigned1     ds.l    1
0B000034            6969   VUnassigned2     ds.l    1
0B000038            6970   VUnassigned3     ds.l    1
0B00003C            6971   VUninit_IRQ      ds.l    1
0B000040            6972   VUnassigned4     ds.l    1
0B000044            6973   VUnassigned5     ds.l    1
0B000048            6974   VUnassigned6     ds.l    1
0B00004C            6975   VUnassigned7     ds.l    1
0B000050            6976   VUnassigned8     ds.l    1
0B000054            6977   VUnassigned9     ds.l    1
0B000058            6978   VUnassigned10    ds.l    1
0B00005C            6979   VUnassigned11    ds.l    1
0B000060            6980   VSpuriousIRQ     ds.l    1
                    6981   
                    6982   * Interrupt handlers Vector 25-31
0B000064            6983   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            6984   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            6985   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            6986   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            6987   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            6988   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            6989   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    6990   
                    6991   * Trap Handler vectors 32-47
0B000080            6992   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            6993   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            6994   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            6995   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            6996   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            6997   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            6998   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            6999   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            7000   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            7001   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            7002   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            7003   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            7004   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            7005   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            7006   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            7007   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    7008   
                    7009   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    7010   
                    7011   ***********************************************************************************************************
                    7012   * Other Variables
                    7013   ***********************************************************************************************************
                    7014   *__DebugA5       ds.l    1
                    7015   *__UserA5        ds.l    1
                    7016   
                    7017   ***********************************************************************************************************
0B0000C0            7018   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            7019   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            7020   __heap:         ds.l    0       ; pointers for malloc functions
                    7021   
                    7022   *__himem:       ds.l    himem            ; highest memory location + 1
                    7023   *__stklen:      ds.l    stklen           ; default stack size
                    7024   
                    7025   *********************************************************************************************************
                    7026   * Section for Heap
                    7027   *********************************************************************************************************
                    7028   
                    7029   _i:
0B0000C4            7030          ds.b      4
                    7031   _x:
0B0000C8            7032          ds.b      4
                    7033   _y:
0B0000CC            7034          ds.b      4
                    7035   _z:
0B0000D0            7036          ds.b      4
                    7037   _PortA_Count:
0B0000D4            7038          ds.b      4
                    7039   _Trace:
0B0000D8            7040          ds.b      4
                    7041   _GoFlag:
0B0000DC            7042          ds.b      4
                    7043   _Echo:
0B0000E0            7044          ds.b      4
                    7045   _d0:
0B0000E4            7046          ds.b      4
                    7047   _d1:
0B0000E8            7048          ds.b      4
                    7049   _d2:
0B0000EC            7050          ds.b      4
                    7051   _d3:
0B0000F0            7052          ds.b      4
                    7053   _d4:
0B0000F4            7054          ds.b      4
                    7055   _d5:
0B0000F8            7056          ds.b      4
                    7057   _d6:
0B0000FC            7058          ds.b      4
                    7059   _d7:
0B000100            7060          ds.b      4
                    7061   _a0:
0B000104            7062          ds.b      4
                    7063   _a1:
0B000108            7064          ds.b      4
                    7065   _a2:
0B00010C            7066          ds.b      4
                    7067   _a3:
0B000110            7068          ds.b      4
                    7069   _a4:
0B000114            7070          ds.b      4
                    7071   _a5:
0B000118            7072          ds.b      4
                    7073   _a6:
0B00011C            7074          ds.b      4
                    7075   _PC:
0B000120            7076          ds.b      4
                    7077   _SSP:
0B000124            7078          ds.b      4
                    7079   _USP:
0B000128            7080          ds.b      4
                    7081   _SR:
0B00012C            7082          ds.b      2
                    7083   _BreakPointAddress:
0B00012E            7084          ds.b      32
                    7085   _BreakPointInstruction:
0B00014E            7086          ds.b      16
                    7087   _BreakPointSetOrCleared:
0B00015E            7088          ds.b      32
                    7089   _InstructionSize:
0B00017E            7090          ds.b      4
                    7091   _WatchPointAddress:
0B000182            7092          ds.b      32
                    7093   _WatchPointSetOrCleared:
0B0001A2            7094          ds.b      32
                    7095   _WatchPointString:
0B0001C2            7096          ds.b      800
                    7097   _TempString:
0B0004E2            7098          ds.b      100
                    7099          section   heap
0B000546            7100                   align
          0B00 0546 7101   bssEnd          equ *                   end of storage space for unitialised variables
                    7102   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 0546 7103   heap   equ       *
0B000546            7104                    align
          0000 0000

Assembly errors: 0
