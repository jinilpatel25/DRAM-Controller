680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 23 Jan 2024      Time: 13:16:58          Source: C:\USERS\ADMIN\DESKTOP\ASSIGNMENT1\SRAM_CONTROLLER\FIRMWARE\OUTPUT\M68KDEBUGMONITOR.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
          0804 0000    5   StackPointerVal     equ $08040000      when using sram
                       6   ;StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
          0803 0000   11   RamVectorTable      equ $08030000      when using sram
                      12   ;RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0804 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0803 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0803 
00000486  00C4      
00000488  23FC 0803  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05FA 0803 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2E66      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0803  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0803  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0803  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0803  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0803 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0803  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0803  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0803  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0803  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0803  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0803  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0803  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0803  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0803  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0803  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0803  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0803  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0803  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0803  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0803  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0803  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0803  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0803  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0803  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0803  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0803  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0803  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0803  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0803  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0803  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0803  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0803  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0803  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0803  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0803  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0803  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0803  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0803  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0803  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0803  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0803  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0803  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0803  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0803  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0803  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0803  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0803  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0803  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0803  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0803  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0803  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0803  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0803  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0803  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0803  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0803  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0803  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0803  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0803  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0803  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0803 
00000714  00D8      
00000716  33DF 0803  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0803  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0803  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0803  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0803  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0803  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0803  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0803  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0803  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0803  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0803  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0803  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0803  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0803  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0803  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0803  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0803  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0803  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0803  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0803  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0803  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0803  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0803  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0803  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0803  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0803  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0803  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0803  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0803  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0803  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0803  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0803  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0803  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0803  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0803  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0803  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0803  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  226E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0803  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0803  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0803  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0803  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0803  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0803  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0803  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0803  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0803  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0803  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0803  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0803  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0803  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0803  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0803  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0803  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0803  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0803  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0803  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0803  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0803  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0803  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0803  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0803  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0803  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0803  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0803  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0803  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0803  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\USERS\ADMIN\DESKTOP\ASSIGNMENT1\SRAM_CONTROLLER\M68KV6.0-800BY480\PROGRAMS\DEBUGMONITORCODE\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; #define StartOfExceptionVectorTable 0x08030000
                     473   ; //#define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; #define TopOfStack 0x08040000
                     476   ; //#define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; // for disassembly of program
                     495   ; char    Instruction[100] ;
                     496   ; char    TempString[100] ;
                     497   ; /************************************************************************************
                     498   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     499   ; ************************************************************************************/
                     500   ; void Wait1ms(void)
                     501   ; {
                     502   _Wait1ms:
00000932  2F02       503          move.l    D2,-(A7)
                     504   ; long int  i ;
                     505   ; for(i = 0; i < 1000; i ++)
00000934  4282       506          clr.l     D2
                     507   Wait1ms_1:
00000936  0C82 0000  508          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       509          bge.s     Wait1ms_3
0000093E  5282       510          addq.l    #1,D2
00000940  60F4       511          bra       Wait1ms_1
                     512   Wait1ms_3:
00000942  241F       513          move.l    (A7)+,D2
00000944  4E75       514          rts
                     515   ; ;
                     516   ; }
                     517   ; /************************************************************************************
                     518   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     519   ; **************************************************************************************/
                     520   ; void Wait3ms(void)
                     521   ; {
                     522   _Wait3ms:
00000946  2F02       523          move.l    D2,-(A7)
                     524   ; int i ;
                     525   ; for(i = 0; i < 3; i++)
00000948  4282       526          clr.l     D2
                     527   Wait3ms_1:
0000094A  0C82 0000  528          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       529          bge.s     Wait3ms_3
                     530   ; Wait1ms() ;
00000952  4EB8 0932  531          jsr       _Wait1ms
00000956  5282       532          addq.l    #1,D2
00000958  60F0       533          bra       Wait3ms_1
                     534   Wait3ms_3:
0000095A  241F       535          move.l    (A7)+,D2
0000095C  4E75       536          rts
                     537   ; }
                     538   ; /*********************************************************************************************
                     539   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     540   ; *********************************************************************************************/
                     541   ; void Init_LCD(void)
                     542   ; {
                     543   _Init_LCD:
                     544   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  545          move.b    #12,4194336
00000962  0040 0020 
                     546   ; Wait3ms() ;
00000966  4EB8 0946  547          jsr       _Wait3ms
                     548   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  549          move.b    #56,4194336
0000096E  0040 0020 
                     550   ; Wait3ms() ;
00000972  4EB8 0946  551          jsr       _Wait3ms
00000976  4E75       552          rts
                     553   ; }
                     554   ; /******************************************************************************
                     555   ; *subroutine to output a single character held in d1 to the LCD display
                     556   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     557   ; *current cursor position
                     558   ; *******************************************************************************/
                     559   ; void Outchar(int c)
                     560   ; {
                     561   _Outchar:
00000978  4E56 0000  562          link      A6,#0
                     563   ; LCDdata = (char)(c);
0000097C  202E 0008  564          move.l    8(A6),D0
00000980  13C0 0040  565          move.b    D0,4194338
00000984  0022      
                     566   ; Wait1ms() ;
00000986  4EB8 0932  567          jsr       _Wait1ms
0000098A  4E5E       568          unlk      A6
0000098C  4E75       569          rts
                     570   ; }
                     571   ; /**********************************************************************************
                     572   ; *subroutine to output a message at the current cursor position of the LCD display
                     573   ; ************************************************************************************/
                     574   ; void OutMess(char *theMessage)
                     575   ; {
                     576   _OutMess:
0000098E  4E56 FFFC  577          link      A6,#-4
                     578   ; char c ;
                     579   ; while((c = *theMessage++) != (char)(0))
                     580   OutMess_1:
00000992  206E 0008  581          move.l    8(A6),A0
00000996  52AE 0008  582          addq.l    #1,8(A6)
0000099A  1D50 FFFF  583          move.b    (A0),-1(A6)
0000099E  1010       584          move.b    (A0),D0
000009A0  6712       585          beq.s     OutMess_3
                     586   ; Outchar(c) ;
000009A2  122E FFFF  587          move.b    -1(A6),D1
000009A6  4881       588          ext.w     D1
000009A8  48C1       589          ext.l     D1
000009AA  2F01       590          move.l    D1,-(A7)
000009AC  4EB8 0978  591          jsr       _Outchar
000009B0  584F       592          addq.w    #4,A7
000009B2  60DE       593          bra       OutMess_1
                     594   OutMess_3:
000009B4  4E5E       595          unlk      A6
000009B6  4E75       596          rts
                     597   ; }
                     598   ; /******************************************************************************
                     599   ; *subroutine to clear the line by issuing 24 space characters
                     600   ; *******************************************************************************/
                     601   ; void Clearln(void)
                     602   ; {
                     603   _Clearln:
000009B8  2F02       604          move.l    D2,-(A7)
                     605   ; unsigned char i ;
                     606   ; for(i = 0; i < 24; i ++)
000009BA  4202       607          clr.b     D2
                     608   Clearln_1:
000009BC  0C02 0018  609          cmp.b     #24,D2
000009C0  640E       610          bhs.s     Clearln_3
                     611   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  612          pea       32
000009C6  4EB8 0978  613          jsr       _Outchar
000009CA  584F       614          addq.w    #4,A7
000009CC  5202       615          addq.b    #1,D2
000009CE  60EC       616          bra       Clearln_1
                     617   Clearln_3:
000009D0  241F       618          move.l    (A7)+,D2
000009D2  4E75       619          rts
                     620   ; }
                     621   ; /******************************************************************************
                     622   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     623   ; *******************************************************************************/
                     624   ; void Oline0(char *theMessage)
                     625   ; {
                     626   _Oline0:
000009D4  4E56 0000  627          link      A6,#0
                     628   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  629          move.b    #128,4194336
000009DC  0040 0020 
                     630   ; Wait3ms();
000009E0  4EB8 0946  631          jsr       _Wait3ms
                     632   ; Clearln() ;
000009E4  4EB8 09B8  633          jsr       _Clearln
                     634   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  635          move.b    #128,4194336
000009EC  0040 0020 
                     636   ; Wait3ms() ;
000009F0  4EB8 0946  637          jsr       _Wait3ms
                     638   ; OutMess(theMessage) ;
000009F4  2F2E 0008  639          move.l    8(A6),-(A7)
000009F8  4EB8 098E  640          jsr       _OutMess
000009FC  584F       641          addq.w    #4,A7
000009FE  4E5E       642          unlk      A6
00000A00  4E75       643          rts
                     644   ; }
                     645   ; /******************************************************************************
                     646   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     647   ; *******************************************************************************/
                     648   ; void Oline1(char *theMessage)
                     649   ; {
                     650   _Oline1:
00000A02  4E56 0000  651          link      A6,#0
                     652   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  653          move.b    #192,4194336
00000A0A  0040 0020 
                     654   ; Wait3ms();
00000A0E  4EB8 0946  655          jsr       _Wait3ms
                     656   ; Clearln() ;
00000A12  4EB8 09B8  657          jsr       _Clearln
                     658   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  659          move.b    #192,4194336
00000A1A  0040 0020 
                     660   ; Wait3ms() ;
00000A1E  4EB8 0946  661          jsr       _Wait3ms
                     662   ; OutMess(theMessage) ;
00000A22  2F2E 0008  663          move.l    8(A6),-(A7)
00000A26  4EB8 098E  664          jsr       _OutMess
00000A2A  584F       665          addq.w    #4,A7
00000A2C  4E5E       666          unlk      A6
00000A2E  4E75       667          rts
                     668   ; }
                     669   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     670   ; {
                     671   _InstallExceptionHandler:
00000A30  4E56 FFFC  672          link      A6,#-4
                     673   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0803  674          move.l    #134414336,-4(A6)
00000A38  0000 FFFC 
                     675   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  676          move.l    -4(A6),A0
00000A40  202E 000C  677          move.l    12(A6),D0
00000A44  E588       678          lsl.l     #2,D0
00000A46  21AE 0008  679          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       680          unlk      A6
00000A4E  4E75       681          rts
                     682   ; }
                     683   ; void TestLEDS(void)
                     684   ; {
                     685   _TestLEDS:
00000A50  48E7 3000  686          movem.l   D2/D3,-(A7)
                     687   ; int delay ;
                     688   ; unsigned char count = 0 ;
00000A54  4202       689          clr.b     D2
                     690   ; while(1)    {
                     691   TestLEDS_1:
                     692   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       693          move.b    D2,D0
00000A58  E908       694          lsl.b     #4,D0
00000A5A  1202       695          move.b    D2,D1
00000A5C  C23C 000F  696          and.b     #15,D1
00000A60  D001       697          add.b     D1,D0
00000A62  13C0 0040  698          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  699          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  700          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  701          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  702          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  703          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  704          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  705          move.b    D0,4194304
00000A90  0000      
                     706   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       707          clr.l     D3
                     708   TestLEDS_4:
00000A94  0C83 0003  709          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       710          bge.s     TestLEDS_6
00000A9C  5283       711          addq.l    #1,D3
00000A9E  60F4       712          bra       TestLEDS_4
                     713   TestLEDS_6:
                     714   ; ;
                     715   ; count ++;
00000AA0  5202       716          addq.b    #1,D2
00000AA2  60B2       717          bra       TestLEDS_1
                     718   ; }
                     719   ; }
                     720   ; void SwitchTest(void)
                     721   ; {
                     722   _SwitchTest:
00000AA4  48E7 3020  723          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  724          lea       _printf.L,A2
00000AAC  63CE      
                     725   ; int i, switches = 0 ;
00000AAE  4283       726          clr.l     D3
                     727   ; printf("\r\n") ;
00000AB0  4879 0000  728          pea       @m68kde~2_1.L
00000AB4  6D66      
00000AB6  4E92       729          jsr       (A2)
00000AB8  584F       730          addq.w    #4,A7
                     731   ; while(1)    {
                     732   SwitchTest_1:
                     733   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  734          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  735          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       736          lsl.l     #8,D0
00000AC8  1239 0040  737          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  738          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       739          or.l      D1,D0
00000AD6  2600       740          move.l    D0,D3
                     741   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  742          pea       @m68kde~2_2.L
00000ADC  6D6A      
00000ADE  4E92       743          jsr       (A2)
00000AE0  584F       744          addq.w    #4,A7
                     745   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  746          move.l    #128,D2
00000AE6  0080      
                     747   SwitchTest_4:
00000AE8  0C82 0000  748          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       749          ble.s     SwitchTest_6
                     750   ; if((switches & i) == 0)
00000AF0  2003       751          move.l    D3,D0
00000AF2  C082       752          and.l     D2,D0
00000AF4  660C       753          bne.s     SwitchTest_7
                     754   ; printf("0") ;
00000AF6  4879 0000  755          pea       @m68kde~2_3.L
00000AFA  6D80      
00000AFC  4E92       756          jsr       (A2)
00000AFE  584F       757          addq.w    #4,A7
00000B00  600A       758          bra.s     SwitchTest_8
                     759   SwitchTest_7:
                     760   ; else
                     761   ; printf("1") ;
00000B02  4879 0000  762          pea       @m68kde~2_4.L
00000B06  6D82      
00000B08  4E92       763          jsr       (A2)
00000B0A  584F       764          addq.w    #4,A7
                     765   SwitchTest_8:
00000B0C  E282       766          asr.l     #1,D2
00000B0E  60D8       767          bra       SwitchTest_4
                     768   SwitchTest_6:
00000B10  60A8       769          bra       SwitchTest_1
                     770   ; }
                     771   ; }
                     772   ; }
                     773   ; /*********************************************************************************************
                     774   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     775   ; *********************************************************************************************/
                     776   ; void Init_RS232(void)
                     777   ; {
                     778   _Init_RS232:
                     779   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  780          move.b    #21,4194368
00000B16  0040 0040 
                     781   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  782          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       783          rts
                     784   ; }
                     785   ; int kbhit(void)
                     786   ; {
                     787   _kbhit:
                     788   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  789          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  790          and.b     #1,D0
00000B2E  0C00 0001  791          cmp.b     #1,D0
00000B32  6604       792          bne.s     kbhit_1
                     793   ; return 1 ;
00000B34  7001       794          moveq     #1,D0
00000B36  6002       795          bra.s     kbhit_3
                     796   kbhit_1:
                     797   ; else
                     798   ; return 0 ;
00000B38  4280       799          clr.l     D0
                     800   kbhit_3:
00000B3A  4E75       801          rts
                     802   ; }
                     803   ; /*********************************************************************************************************
                     804   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     805   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     806   ; **  to allow the board to communicate with HyperTerminal Program
                     807   ; **
                     808   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     809   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     810   ; **  call _putch() also
                     811   ; *********************************************************************************************************/
                     812   ; int _putch( int c)
                     813   ; {
                     814   __putch:
00000B3C  4E56 0000  815          link      A6,#0
                     816   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     817   _putch_1:
00000B40  1039 0040  818          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  819          and.b     #2,D0
00000B4A  0C00 0002  820          cmp.b     #2,D0
00000B4E  6702       821          beq.s     _putch_3
00000B50  60EE       822          bra       _putch_1
                     823   _putch_3:
                     824   ; ;
                     825   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  826          move.l    8(A6),D0
00000B56  C03C 007F  827          and.b     #127,D0
00000B5A  13C0 0040  828          move.b    D0,4194370
00000B5E  0042      
                     829   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  830          move.l    8(A6),D0
00000B64  4E5E       831          unlk      A6
00000B66  4E75       832          rts
                     833   ; }
                     834   ; /*********************************************************************************************************
                     835   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     836   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     837   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     838   ; **
                     839   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     840   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     841   ; **  call _getch() also
                     842   ; *********************************************************************************************************/
                     843   ; int _getch( void )
                     844   ; {
                     845   __getch:
00000B68  2F02       846          move.l    D2,-(A7)
                     847   ; int c ;
                     848   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     849   _getch_1:
00000B6A  1039 0040  850          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  851          and.b     #1,D0
00000B74  0C00 0001  852          cmp.b     #1,D0
00000B78  6702       853          beq.s     _getch_3
00000B7A  60EE       854          bra       _getch_1
                     855   _getch_3:
                     856   ; ;
                     857   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  858          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  859          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  860          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       861          move.l    D0,D2
                     862   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     863   ; if(Echo)
00000B90  4AB9 0803  864          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       865          beq.s     _getch_4
                     866   ; _putch(c);
00000B98  2F02       867          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  868          jsr       __putch
00000B9E  584F       869          addq.w    #4,A7
                     870   _getch_4:
                     871   ; return c ;
00000BA0  2002       872          move.l    D2,D0
00000BA2  241F       873          move.l    (A7)+,D2
00000BA4  4E75       874          rts
                     875   ; }
                     876   ; // flush the input stream for any unread characters
                     877   ; void FlushKeyboard(void)
                     878   ; {
                     879   _FlushKeyboard:
00000BA6  4E56 FFFC  880          link      A6,#-4
                     881   ; char c ;
                     882   ; while(1)    {
                     883   FlushKeyboard_1:
                     884   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  885          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  886          and.b     #1,D0
00000BB4  0C00 0001  887          cmp.b     #1,D0
00000BB8  6610       888          bne.s     FlushKeyboard_4
                     889   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  890          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  891          and.b     #127,D0
00000BC4  1D40 FFFF  892          move.b    D0,-1(A6)
00000BC8  6002       893          bra.s     FlushKeyboard_5
                     894   FlushKeyboard_4:
                     895   ; else
                     896   ; return ;
00000BCA  6002       897          bra.s     FlushKeyboard_6
                     898   FlushKeyboard_5:
00000BCC  60DC       899          bra       FlushKeyboard_1
                     900   FlushKeyboard_6:
00000BCE  4E5E       901          unlk      A6
00000BD0  4E75       902          rts
                     903   ; }
                     904   ; }
                     905   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     906   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     907   ; char xtod(int c)
                     908   ; {
                     909   _xtod:
00000BD2  4E56 0000  910          link      A6,#0
00000BD6  2F02       911          move.l    D2,-(A7)
00000BD8  242E 0008  912          move.l    8(A6),D2
                     913   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  914          cmp.b     #57,D2
00000BE0  6E08       915          bgt.s     xtod_1
                     916   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       917          move.b    D2,D0
00000BE4  0400 0030  918          sub.b     #48,D0
00000BE8  6014       919          bra.s     xtod_3
                     920   xtod_1:
                     921   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  922          cmp.b     #70,D2
00000BEE  6F08       923          ble.s     xtod_4
                     924   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       925          move.b    D2,D0
00000BF2  0400 0057  926          sub.b     #87,D0
00000BF6  6006       927          bra.s     xtod_3
                     928   xtod_4:
                     929   ; else
                     930   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       931          move.b    D2,D0
00000BFA  0400 0037  932          sub.b     #55,D0
                     933   xtod_3:
00000BFE  241F       934          move.l    (A7)+,D2
00000C00  4E5E       935          unlk      A6
00000C02  4E75       936          rts
                     937   ; }
                     938   ; int Get2HexDigits(char *CheckSumPtr)
                     939   ; {
                     940   _Get2HexDigits:
00000C04  4E56 0000  941          link      A6,#0
00000C08  2F02       942          move.l    D2,-(A7)
                     943   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       944          move.l    D0,-(A7)
00000C0C  4EB8 0B68  945          jsr       __getch
00000C10  2200       946          move.l    D0,D1
00000C12  201F       947          move.l    (A7)+,D0
00000C14  2F01       948          move.l    D1,-(A7)
00000C16  4EB8 0BD2  949          jsr       _xtod
00000C1A  584F       950          addq.w    #4,A7
00000C1C  C0BC 0000  951          and.l     #255,D0
00000C20  00FF      
00000C22  E980       952          asl.l     #4,D0
00000C24  2F00       953          move.l    D0,-(A7)
00000C26  2F01       954          move.l    D1,-(A7)
00000C28  4EB8 0B68  955          jsr       __getch
00000C2C  221F       956          move.l    (A7)+,D1
00000C2E  2F00       957          move.l    D0,-(A7)
00000C30  4EB8 0BD2  958          jsr       _xtod
00000C34  584F       959          addq.w    #4,A7
00000C36  2200       960          move.l    D0,D1
00000C38  201F       961          move.l    (A7)+,D0
00000C3A  C2BC 0000  962          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       963          or.l      D1,D0
00000C42  2400       964          move.l    D0,D2
                     965   ; if(CheckSumPtr)
00000C44  4AAE 0008  966          tst.l     8(A6)
00000C48  6706       967          beq.s     Get2HexDigits_1
                     968   ; *CheckSumPtr += i ;
00000C4A  206E 0008  969          move.l    8(A6),A0
00000C4E  D510       970          add.b     D2,(A0)
                     971   Get2HexDigits_1:
                     972   ; return i ;
00000C50  2002       973          move.l    D2,D0
00000C52  241F       974          move.l    (A7)+,D2
00000C54  4E5E       975          unlk      A6
00000C56  4E75       976          rts
                     977   ; }
                     978   ; int Get4HexDigits(char *CheckSumPtr)
                     979   ; {
                     980   _Get4HexDigits:
00000C58  4E56 0000  981          link      A6,#0
                     982   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  983          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  984          jsr       _Get2HexDigits
00000C64  584F       985          addq.w    #4,A7
00000C66  E180       986          asl.l     #8,D0
00000C68  2F00       987          move.l    D0,-(A7)
00000C6A  2F2E 0008  988          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  989          jsr       _Get2HexDigits
00000C72  584F       990          addq.w    #4,A7
00000C74  2200       991          move.l    D0,D1
00000C76  201F       992          move.l    (A7)+,D0
00000C78  8081       993          or.l      D1,D0
00000C7A  4E5E       994          unlk      A6
00000C7C  4E75       995          rts
                     996   ; }
                     997   ; int Get6HexDigits(char *CheckSumPtr)
                     998   ; {
                     999   _Get6HexDigits:
00000C7E  4E56 0000 1000          link      A6,#0
                    1001   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1002          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1003          jsr       _Get4HexDigits
00000C8A  584F      1004          addq.w    #4,A7
00000C8C  E180      1005          asl.l     #8,D0
00000C8E  2F00      1006          move.l    D0,-(A7)
00000C90  2F2E 0008 1007          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1008          jsr       _Get2HexDigits
00000C98  584F      1009          addq.w    #4,A7
00000C9A  2200      1010          move.l    D0,D1
00000C9C  201F      1011          move.l    (A7)+,D0
00000C9E  8081      1012          or.l      D1,D0
00000CA0  4E5E      1013          unlk      A6
00000CA2  4E75      1014          rts
                    1015   ; }
                    1016   ; int Get8HexDigits(char *CheckSumPtr)
                    1017   ; {
                    1018   _Get8HexDigits:
00000CA4  4E56 0000 1019          link      A6,#0
                    1020   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1021          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1022          jsr       _Get4HexDigits
00000CB0  584F      1023          addq.w    #4,A7
00000CB2  E180      1024          asl.l     #8,D0
00000CB4  E180      1025          asl.l     #8,D0
00000CB6  2F00      1026          move.l    D0,-(A7)
00000CB8  2F2E 0008 1027          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1028          jsr       _Get4HexDigits
00000CC0  584F      1029          addq.w    #4,A7
00000CC2  2200      1030          move.l    D0,D1
00000CC4  201F      1031          move.l    (A7)+,D0
00000CC6  8081      1032          or.l      D1,D0
00000CC8  4E5E      1033          unlk      A6
00000CCA  4E75      1034          rts
                    1035   ; }
                    1036   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1037   _strcatInstruction:
00000CCC  4E56 0000 1038          link      A6,#0
00000CD0  2F2E 0008 1039          move.l    8(A6),-(A7)
00000CD4  4879 0803 1040          pea       _Instruction.L
00000CD8  04E2      
00000CDA  4EB9 0000 1041          jsr       _strcat
00000CDE  5A92      
00000CE0  504F      1042          addq.w    #8,A7
00000CE2  4E5E      1043          unlk      A6
00000CE4  4E75      1044          rts
                    1045   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1046   _strcpyInstruction:
00000CE6  4E56 0000 1047          link      A6,#0
00000CEA  2F2E 0008 1048          move.l    8(A6),-(A7)
00000CEE  4879 0803 1049          pea       _Instruction.L
00000CF2  04E2      
00000CF4  4EB9 0000 1050          jsr       _strcpy
00000CF8  58F2      
00000CFA  504F      1051          addq.w    #8,A7
00000CFC  4E5E      1052          unlk      A6
00000CFE  4E75      1053          rts
                    1054   ; void DisassembleProgram(void )
                    1055   ; {
                    1056   _DisassembleProgram:
00000D00  4E56 FFF8 1057          link      A6,#-8
00000D04  48E7 3038 1058          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D08  45F9 0803 1059          lea       _InstructionSize.L,A2
00000D0C  017E      
00000D0E  47F9 0000 1060          lea       _printf.L,A3
00000D12  63CE      
00000D14  49F9 0803 1061          lea       _Instruction.L,A4
00000D18  04E2      
                    1062   ; char c ;
                    1063   ; int i, j ;
                    1064   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1065   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1066          pea       @m68kde~2_5.L
00000D1E  6D84      
00000D20  4E93      1067          jsr       (A3)
00000D22  584F      1068          addq.w    #4,A7
                    1069   ; ProgramPtr = Get8HexDigits(0) ;
00000D24  42A7      1070          clr.l     -(A7)
00000D26  4EB8 0CA4 1071          jsr       _Get8HexDigits
00000D2A  584F      1072          addq.w    #4,A7
00000D2C  2400      1073          move.l    D0,D2
                    1074   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D2E  4879 0000 1075          pea       @m68kde~2_6.L
00000D32  6D9C      
00000D34  4E93      1076          jsr       (A3)
00000D36  584F      1077          addq.w    #4,A7
                    1078   ; while(1)    {
                    1079   DisassembleProgram_1:
                    1080   ; for(i = 0; i < 20; i ++)
00000D38  4283      1081          clr.l     D3
                    1082   DisassembleProgram_4:
00000D3A  0C83 0000 1083          cmp.l     #20,D3
00000D3E  0014      
00000D40  6C00 017E 1084          bge       DisassembleProgram_6
                    1085   ; {
                    1086   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D44  24BC 0000 1087          move.l    #1,(A2)
00000D48  0001      
                    1088   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D4A  2F02      1089          move.l    D2,-(A7)
00000D4C  4EB9 0000 1090          jsr       _DisassembleInstruction
00000D50  3A50      
00000D52  584F      1091          addq.w    #4,A7
                    1092   ; if(InstructionSize == 1)
00000D54  2012      1093          move.l    (A2),D0
00000D56  0C80 0000 1094          cmp.l     #1,D0
00000D5A  0001      
00000D5C  6620      1095          bne.s     DisassembleProgram_7
                    1096   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D5E  2F0C      1097          move.l    A4,-(A7)
00000D60  2042      1098          move.l    D2,A0
00000D62  3210      1099          move.w    (A0),D1
00000D64  C2BC 0000 1100          and.l     #65535,D1
00000D68  FFFF      
00000D6A  2F01      1101          move.l    D1,-(A7)
00000D6C  2F02      1102          move.l    D2,-(A7)
00000D6E  4879 0000 1103          pea       @m68kde~2_7.L
00000D72  6DC0      
00000D74  4E93      1104          jsr       (A3)
00000D76  DEFC 0010 1105          add.w     #16,A7
00000D7A  6000 0138 1106          bra       DisassembleProgram_15
                    1107   DisassembleProgram_7:
                    1108   ; else if(InstructionSize == 2)
00000D7E  2012      1109          move.l    (A2),D0
00000D80  0C80 0000 1110          cmp.l     #2,D0
00000D84  0002      
00000D86  662E      1111          bne.s     DisassembleProgram_9
                    1112   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D88  2F0C      1113          move.l    A4,-(A7)
00000D8A  2042      1114          move.l    D2,A0
00000D8C  3228 0002 1115          move.w    2(A0),D1
00000D90  C2BC 0000 1116          and.l     #65535,D1
00000D94  FFFF      
00000D96  2F01      1117          move.l    D1,-(A7)
00000D98  2042      1118          move.l    D2,A0
00000D9A  3210      1119          move.w    (A0),D1
00000D9C  C2BC 0000 1120          and.l     #65535,D1
00000DA0  FFFF      
00000DA2  2F01      1121          move.l    D1,-(A7)
00000DA4  2F02      1122          move.l    D2,-(A7)
00000DA6  4879 0000 1123          pea       @m68kde~2_8.L
00000DAA  6DE8      
00000DAC  4E93      1124          jsr       (A3)
00000DAE  DEFC 0014 1125          add.w     #20,A7
00000DB2  6000 0100 1126          bra       DisassembleProgram_15
                    1127   DisassembleProgram_9:
                    1128   ; else if(InstructionSize == 3)
00000DB6  2012      1129          move.l    (A2),D0
00000DB8  0C80 0000 1130          cmp.l     #3,D0
00000DBC  0003      
00000DBE  6600 003E 1131          bne       DisassembleProgram_11
                    1132   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DC2  2F0C      1133          move.l    A4,-(A7)
00000DC4  2042      1134          move.l    D2,A0
00000DC6  3228 0004 1135          move.w    4(A0),D1
00000DCA  C2BC 0000 1136          and.l     #65535,D1
00000DCE  FFFF      
00000DD0  2F01      1137          move.l    D1,-(A7)
00000DD2  2042      1138          move.l    D2,A0
00000DD4  3228 0002 1139          move.w    2(A0),D1
00000DD8  C2BC 0000 1140          and.l     #65535,D1
00000DDC  FFFF      
00000DDE  2F01      1141          move.l    D1,-(A7)
00000DE0  2042      1142          move.l    D2,A0
00000DE2  3210      1143          move.w    (A0),D1
00000DE4  C2BC 0000 1144          and.l     #65535,D1
00000DE8  FFFF      
00000DEA  2F01      1145          move.l    D1,-(A7)
00000DEC  2F02      1146          move.l    D2,-(A7)
00000DEE  4879 0000 1147          pea       @m68kde~2_9.L
00000DF2  6E10      
00000DF4  4E93      1148          jsr       (A3)
00000DF6  DEFC 0018 1149          add.w     #24,A7
00000DFA  6000 00B8 1150          bra       DisassembleProgram_15
                    1151   DisassembleProgram_11:
                    1152   ; else if(InstructionSize == 4)
00000DFE  2012      1153          move.l    (A2),D0
00000E00  0C80 0000 1154          cmp.l     #4,D0
00000E04  0004      
00000E06  6600 004C 1155          bne       DisassembleProgram_13
                    1156   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E0A  2F0C      1157          move.l    A4,-(A7)
00000E0C  2042      1158          move.l    D2,A0
00000E0E  3228 0006 1159          move.w    6(A0),D1
00000E12  C2BC 0000 1160          and.l     #65535,D1
00000E16  FFFF      
00000E18  2F01      1161          move.l    D1,-(A7)
00000E1A  2042      1162          move.l    D2,A0
00000E1C  3228 0004 1163          move.w    4(A0),D1
00000E20  C2BC 0000 1164          and.l     #65535,D1
00000E24  FFFF      
00000E26  2F01      1165          move.l    D1,-(A7)
00000E28  2042      1166          move.l    D2,A0
00000E2A  3228 0002 1167          move.w    2(A0),D1
00000E2E  C2BC 0000 1168          and.l     #65535,D1
00000E32  FFFF      
00000E34  2F01      1169          move.l    D1,-(A7)
00000E36  2042      1170          move.l    D2,A0
00000E38  3210      1171          move.w    (A0),D1
00000E3A  C2BC 0000 1172          and.l     #65535,D1
00000E3E  FFFF      
00000E40  2F01      1173          move.l    D1,-(A7)
00000E42  2F02      1174          move.l    D2,-(A7)
00000E44  4879 0000 1175          pea       @m68kde~2_10.L
00000E48  6E38      
00000E4A  4E93      1176          jsr       (A3)
00000E4C  DEFC 001C 1177          add.w     #28,A7
00000E50  6000 0062 1178          bra       DisassembleProgram_15
                    1179   DisassembleProgram_13:
                    1180   ; else if(InstructionSize == 5)
00000E54  2012      1181          move.l    (A2),D0
00000E56  0C80 0000 1182          cmp.l     #5,D0
00000E5A  0005      
00000E5C  6600 0056 1183          bne       DisassembleProgram_15
                    1184   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E60  2F0C      1185          move.l    A4,-(A7)
00000E62  2042      1186          move.l    D2,A0
00000E64  3228 0008 1187          move.w    8(A0),D1
00000E68  C2BC 0000 1188          and.l     #65535,D1
00000E6C  FFFF      
00000E6E  2F01      1189          move.l    D1,-(A7)
00000E70  2042      1190          move.l    D2,A0
00000E72  3228 0006 1191          move.w    6(A0),D1
00000E76  C2BC 0000 1192          and.l     #65535,D1
00000E7A  FFFF      
00000E7C  2F01      1193          move.l    D1,-(A7)
00000E7E  2042      1194          move.l    D2,A0
00000E80  3228 0004 1195          move.w    4(A0),D1
00000E84  C2BC 0000 1196          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1197          move.l    D1,-(A7)
00000E8C  2042      1198          move.l    D2,A0
00000E8E  3228 0002 1199          move.w    2(A0),D1
00000E92  C2BC 0000 1200          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1201          move.l    D1,-(A7)
00000E9A  2042      1202          move.l    D2,A0
00000E9C  3210      1203          move.w    (A0),D1
00000E9E  C2BC 0000 1204          and.l     #65535,D1
00000EA2  FFFF      
00000EA4  2F01      1205          move.l    D1,-(A7)
00000EA6  2F02      1206          move.l    D2,-(A7)
00000EA8  4879 0000 1207          pea       @m68kde~2_11.L
00000EAC  6E60      
00000EAE  4E93      1208          jsr       (A3)
00000EB0  DEFC 0020 1209          add.w     #32,A7
                    1210   DisassembleProgram_15:
                    1211   ; ProgramPtr += InstructionSize ;
00000EB4  2012      1212          move.l    (A2),D0
00000EB6  E388      1213          lsl.l     #1,D0
00000EB8  D480      1214          add.l     D0,D2
00000EBA  5283      1215          addq.l    #1,D3
00000EBC  6000 FE7C 1216          bra       DisassembleProgram_4
                    1217   DisassembleProgram_6:
                    1218   ; }
                    1219   ; c = _getch() ;
00000EC0  4EB8 0B68 1220          jsr       __getch
00000EC4  1D40 FFFB 1221          move.b    D0,-5(A6)
                    1222   ; if(c == 0x1b)          // break on ESC
00000EC8  102E FFFB 1223          move.b    -5(A6),D0
00000ECC  0C00 001B 1224          cmp.b     #27,D0
00000ED0  6602      1225          bne.s     DisassembleProgram_17
                    1226   ; return ;
00000ED2  6004      1227          bra.s     DisassembleProgram_19
                    1228   DisassembleProgram_17:
00000ED4  6000 FE62 1229          bra       DisassembleProgram_1
                    1230   DisassembleProgram_19:
00000ED8  4CDF 1C0C 1231          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EDC  4E5E      1232          unlk      A6
00000EDE  4E75      1233          rts
                    1234   ; }
                    1235   ; }
                    1236   ; void DumpMemory(void)   // simple dump memory fn
                    1237   ; {
                    1238   _DumpMemory:
00000EE0  48E7 3C30 1239          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EE4  45F9 0000 1240          lea       _printf.L,A2
00000EE8  63CE      
00000EEA  47F9 0000 1241          lea       _putch.L,A3
00000EEE  59E0      
                    1242   ; int i, j ;
                    1243   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1244   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF0  4879 0000 1245          pea       @m68kde~2_12.L
00000EF4  6E88      
00000EF6  4E92      1246          jsr       (A2)
00000EF8  584F      1247          addq.w    #4,A7
                    1248   ; printf("\r\nEnter Start Address: ") ;
00000EFA  4879 0000 1249          pea       @m68kde~2_5.L
00000EFE  6D84      
00000F00  4E92      1250          jsr       (A2)
00000F02  584F      1251          addq.w    #4,A7
                    1252   ; RamPtr = Get8HexDigits(0) ;
00000F04  42A7      1253          clr.l     -(A7)
00000F06  4EB8 0CA4 1254          jsr       _Get8HexDigits
00000F0A  584F      1255          addq.w    #4,A7
00000F0C  2600      1256          move.l    D0,D3
                    1257   ; while(1)    {
                    1258   DumpMemory_1:
                    1259   ; for(i = 0; i < 16; i ++)    {
00000F0E  4285      1260          clr.l     D5
                    1261   DumpMemory_4:
00000F10  0C85 0000 1262          cmp.l     #16,D5
00000F14  0010      
00000F16  6C00 0096 1263          bge       DumpMemory_6
                    1264   ; printf("\r\n%08x ", RamPtr) ;
00000F1A  2F03      1265          move.l    D3,-(A7)
00000F1C  4879 0000 1266          pea       @m68kde~2_13.L
00000F20  6EC2      
00000F22  4E92      1267          jsr       (A2)
00000F24  504F      1268          addq.w    #8,A7
                    1269   ; for(j=0; j < 16; j ++)  {
00000F26  4282      1270          clr.l     D2
                    1271   DumpMemory_7:
00000F28  0C82 0000 1272          cmp.l     #16,D2
00000F2C  0010      
00000F2E  6C24      1273          bge.s     DumpMemory_9
                    1274   ; printf("%02X",RamPtr[j]) ;
00000F30  2043      1275          move.l    D3,A0
00000F32  1230 2800 1276          move.b    0(A0,D2.L),D1
00000F36  C2BC 0000 1277          and.l     #255,D1
00000F3A  00FF      
00000F3C  2F01      1278          move.l    D1,-(A7)
00000F3E  4879 0000 1279          pea       @m68kde~2_14.L
00000F42  6ECA      
00000F44  4E92      1280          jsr       (A2)
00000F46  504F      1281          addq.w    #8,A7
                    1282   ; putchar(' ') ;
00000F48  4878 0020 1283          pea       32
00000F4C  4E93      1284          jsr       (A3)
00000F4E  584F      1285          addq.w    #4,A7
00000F50  5282      1286          addq.l    #1,D2
00000F52  60D4      1287          bra       DumpMemory_7
                    1288   DumpMemory_9:
                    1289   ; }
                    1290   ; // now display the data as ASCII at the end
                    1291   ; printf("  ") ;
00000F54  4879 0000 1292          pea       @m68kde~2_15.L
00000F58  6ED0      
00000F5A  4E92      1293          jsr       (A2)
00000F5C  584F      1294          addq.w    #4,A7
                    1295   ; for(j = 0; j < 16; j++) {
00000F5E  4282      1296          clr.l     D2
                    1297   DumpMemory_10:
00000F60  0C82 0000 1298          cmp.l     #16,D2
00000F64  0010      
00000F66  6C00 003A 1299          bge       DumpMemory_12
                    1300   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F6A  2043      1301          move.l    D3,A0
00000F6C  1030 2800 1302          move.b    0(A0,D2.L),D0
00000F70  C03C 007F 1303          and.b     #127,D0
00000F74  1800      1304          move.b    D0,D4
                    1305   ; if((c > (char)(0x7f)) || (c < ' '))
00000F76  0C04 007F 1306          cmp.b     #127,D4
00000F7A  6206      1307          bhi.s     DumpMemory_15
00000F7C  0C04 0020 1308          cmp.b     #32,D4
00000F80  640A      1309          bhs.s     DumpMemory_13
                    1310   DumpMemory_15:
                    1311   ; putchar('.') ;
00000F82  4878 002E 1312          pea       46
00000F86  4E93      1313          jsr       (A3)
00000F88  584F      1314          addq.w    #4,A7
00000F8A  6012      1315          bra.s     DumpMemory_14
                    1316   DumpMemory_13:
                    1317   ; else
                    1318   ; putchar(RamPtr[j]) ;
00000F8C  2043      1319          move.l    D3,A0
00000F8E  1230 2800 1320          move.b    0(A0,D2.L),D1
00000F92  C2BC 0000 1321          and.l     #255,D1
00000F96  00FF      
00000F98  2F01      1322          move.l    D1,-(A7)
00000F9A  4E93      1323          jsr       (A3)
00000F9C  584F      1324          addq.w    #4,A7
                    1325   DumpMemory_14:
00000F9E  5282      1326          addq.l    #1,D2
00000FA0  60BE      1327          bra       DumpMemory_10
                    1328   DumpMemory_12:
                    1329   ; }
                    1330   ; RamPtr = RamPtr + 16 ;
00000FA2  0683 0000 1331          add.l     #16,D3
00000FA6  0010      
00000FA8  5285      1332          addq.l    #1,D5
00000FAA  6000 FF64 1333          bra       DumpMemory_4
                    1334   DumpMemory_6:
                    1335   ; }
                    1336   ; printf("\r\n") ;
00000FAE  4879 0000 1337          pea       @m68kde~2_1.L
00000FB2  6D66      
00000FB4  4E92      1338          jsr       (A2)
00000FB6  584F      1339          addq.w    #4,A7
                    1340   ; c = _getch() ;
00000FB8  4EB8 0B68 1341          jsr       __getch
00000FBC  1800      1342          move.b    D0,D4
                    1343   ; if(c == 0x1b)          // break on ESC
00000FBE  0C04 001B 1344          cmp.b     #27,D4
00000FC2  6602      1345          bne.s     DumpMemory_16
                    1346   ; break ;
00000FC4  6004      1347          bra.s     DumpMemory_3
                    1348   DumpMemory_16:
00000FC6  6000 FF46 1349          bra       DumpMemory_1
                    1350   DumpMemory_3:
00000FCA  4CDF 0C3C 1351          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FCE  4E75      1352          rts
                    1353   ; }
                    1354   ; }
                    1355   ; void FillMemory()
                    1356   ; {
                    1357   _FillMemory:
00000FD0  48E7 3820 1358          movem.l   D2/D3/D4/A2,-(A7)
00000FD4  45F9 0000 1359          lea       _printf.L,A2
00000FD8  63CE      
                    1360   ; char *StartRamPtr, *EndRamPtr ;
                    1361   ; unsigned char FillData ;
                    1362   ; printf("\r\nFill Memory Block") ;
00000FDA  4879 0000 1363          pea       @m68kde~2_16.L
00000FDE  6ED4      
00000FE0  4E92      1364          jsr       (A2)
00000FE2  584F      1365          addq.w    #4,A7
                    1366   ; printf("\r\nEnter Start Address: ") ;
00000FE4  4879 0000 1367          pea       @m68kde~2_5.L
00000FE8  6D84      
00000FEA  4E92      1368          jsr       (A2)
00000FEC  584F      1369          addq.w    #4,A7
                    1370   ; StartRamPtr = Get8HexDigits(0) ;
00000FEE  42A7      1371          clr.l     -(A7)
00000FF0  4EB8 0CA4 1372          jsr       _Get8HexDigits
00000FF4  584F      1373          addq.w    #4,A7
00000FF6  2400      1374          move.l    D0,D2
                    1375   ; printf("\r\nEnter End Address: ") ;
00000FF8  4879 0000 1376          pea       @m68kde~2_17.L
00000FFC  6EE8      
00000FFE  4E92      1377          jsr       (A2)
00001000  584F      1378          addq.w    #4,A7
                    1379   ; EndRamPtr = Get8HexDigits(0) ;
00001002  42A7      1380          clr.l     -(A7)
00001004  4EB8 0CA4 1381          jsr       _Get8HexDigits
00001008  584F      1382          addq.w    #4,A7
0000100A  2800      1383          move.l    D0,D4
                    1384   ; printf("\r\nEnter Fill Data: ") ;
0000100C  4879 0000 1385          pea       @m68kde~2_18.L
00001010  6EFE      
00001012  4E92      1386          jsr       (A2)
00001014  584F      1387          addq.w    #4,A7
                    1388   ; FillData = Get2HexDigits(0) ;
00001016  42A7      1389          clr.l     -(A7)
00001018  4EB8 0C04 1390          jsr       _Get2HexDigits
0000101C  584F      1391          addq.w    #4,A7
0000101E  1600      1392          move.b    D0,D3
                    1393   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001020  C6BC 0000 1394          and.l     #255,D3
00001024  00FF      
00001026  2F03      1395          move.l    D3,-(A7)
00001028  2F04      1396          move.l    D4,-(A7)
0000102A  2F02      1397          move.l    D2,-(A7)
0000102C  4879 0000 1398          pea       @m68kde~2_19.L
00001030  6F12      
00001032  4E92      1399          jsr       (A2)
00001034  DEFC 0010 1400          add.w     #16,A7
                    1401   ; while(StartRamPtr < EndRamPtr)
                    1402   FillMemory_1:
00001038  B484      1403          cmp.l     D4,D2
0000103A  6408      1404          bhs.s     FillMemory_3
                    1405   ; *StartRamPtr++ = FillData ;
0000103C  2042      1406          move.l    D2,A0
0000103E  5282      1407          addq.l    #1,D2
00001040  1083      1408          move.b    D3,(A0)
00001042  60F4      1409          bra       FillMemory_1
                    1410   FillMemory_3:
00001044  4CDF 041C 1411          movem.l   (A7)+,D2/D3/D4/A2
00001048  4E75      1412          rts
                    1413   ; }
                    1414   ; void Load_SRecordFile()
                    1415   ; {
                    1416   _Load_SRecordFile:
0000104A  4E56 FFDC 1417          link      A6,#-36
0000104E  48E7 3F3C 1418          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001052  45EE FFFA 1419          lea       -6(A6),A2
00001056  47F8 0C04 1420          lea       _Get2HexDigits.L,A3
0000105A  49F9 0000 1421          lea       _printf.L,A4
0000105E  63CE      
                    1422   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001060  42AE FFEE 1423          clr.l     -18(A6)
00001064  3A7C 0000 1424          move.w    #0,A5
                    1425   ; int result, ByteCount ;
                    1426   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1427   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1428   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1429          moveq     #0,D7
                    1430   ; AddressFail = 0 ;
0000106A  42AE FFEA 1431          clr.l     -22(A6)
                    1432   ; Echo = 0 ;                              // don't echo S records during download
0000106E  42B9 0803 1433          clr.l     _Echo.L
00001072  00E0      
                    1434   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001074  4879 0000 1435          pea       @m68kde~2_20.L
00001078  6F42      
0000107A  4E94      1436          jsr       (A4)
0000107C  584F      1437          addq.w    #4,A7
                    1438   ; while(1)    {
                    1439   Load_SRecordFile_1:
                    1440   ; CheckSum = 0 ;
0000107E  4212      1441          clr.b     (A2)
                    1442   ; do {
                    1443   Load_SRecordFile_4:
                    1444   ; c = toupper(_getch()) ;
00001080  2F00      1445          move.l    D0,-(A7)
00001082  4EB8 0B68 1446          jsr       __getch
00001086  2200      1447          move.l    D0,D1
00001088  201F      1448          move.l    (A7)+,D0
0000108A  2F01      1449          move.l    D1,-(A7)
0000108C  4EB9 0000 1450          jsr       _toupper
00001090  5AA8      
00001092  584F      1451          addq.w    #4,A7
00001094  1C00      1452          move.b    D0,D6
                    1453   ; if(c == 0x1b )      // if break
00001096  0C06 001B 1454          cmp.b     #27,D6
0000109A  6604      1455          bne.s     Load_SRecordFile_6
                    1456   ; return;
0000109C  6000 0132 1457          bra       Load_SRecordFile_8
                    1458   Load_SRecordFile_6:
000010A0  0C06 0053 1459          cmp.b     #83,D6
000010A4  66DA      1460          bne       Load_SRecordFile_4
                    1461   ; }while(c != (char)('S'));   // wait for S start of header
                    1462   ; HeaderType = _getch() ;
000010A6  4EB8 0B68 1463          jsr       __getch
000010AA  1600      1464          move.b    D0,D3
                    1465   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010AC  0C03 0030 1466          cmp.b     #48,D3
000010B0  6706      1467          beq.s     Load_SRecordFile_11
000010B2  0C03 0035 1468          cmp.b     #53,D3
000010B6  6604      1469          bne.s     Load_SRecordFile_9
                    1470   Load_SRecordFile_11:
                    1471   ; continue ;
000010B8  6000 00D2 1472          bra       Load_SRecordFile_23
                    1473   Load_SRecordFile_9:
                    1474   ; if(HeaderType >= (char)('7'))
000010BC  0C03 0037 1475          cmp.b     #55,D3
000010C0  6D04      1476          blt.s     Load_SRecordFile_12
                    1477   ; break ;                 // end load on s7,s8,s9 records
000010C2  6000 00CC 1478          bra       Load_SRecordFile_3
                    1479   Load_SRecordFile_12:
                    1480   ; // get the bytecount
                    1481   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010C6  2F0A      1482          move.l    A2,-(A7)
000010C8  4E93      1483          jsr       (A3)
000010CA  584F      1484          addq.w    #4,A7
000010CC  2D40 FFF6 1485          move.l    D0,-10(A6)
                    1486   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1487   ; if(HeaderType == (char)('1')) {
000010D0  0C03 0031 1488          cmp.b     #49,D3
000010D4  660E      1489          bne.s     Load_SRecordFile_14
                    1490   ; AddressSize = 2 ;       // 2 byte address
000010D6  7A02      1491          moveq     #2,D5
                    1492   ; Address = Get4HexDigits(&CheckSum);
000010D8  2F0A      1493          move.l    A2,-(A7)
000010DA  4EB8 0C58 1494          jsr       _Get4HexDigits
000010DE  584F      1495          addq.w    #4,A7
000010E0  2800      1496          move.l    D0,D4
000010E2  6020      1497          bra.s     Load_SRecordFile_17
                    1498   Load_SRecordFile_14:
                    1499   ; }
                    1500   ; else if (HeaderType == (char)('2')) {
000010E4  0C03 0032 1501          cmp.b     #50,D3
000010E8  660E      1502          bne.s     Load_SRecordFile_16
                    1503   ; AddressSize = 3 ;       // 3 byte address
000010EA  7A03      1504          moveq     #3,D5
                    1505   ; Address = Get6HexDigits(&CheckSum) ;
000010EC  2F0A      1506          move.l    A2,-(A7)
000010EE  4EB8 0C7E 1507          jsr       _Get6HexDigits
000010F2  584F      1508          addq.w    #4,A7
000010F4  2800      1509          move.l    D0,D4
000010F6  600C      1510          bra.s     Load_SRecordFile_17
                    1511   Load_SRecordFile_16:
                    1512   ; }
                    1513   ; else    {
                    1514   ; AddressSize = 4 ;       // 4 byte address
000010F8  7A04      1515          moveq     #4,D5
                    1516   ; Address = Get8HexDigits(&CheckSum) ;
000010FA  2F0A      1517          move.l    A2,-(A7)
000010FC  4EB8 0CA4 1518          jsr       _Get8HexDigits
00001100  584F      1519          addq.w    #4,A7
00001102  2800      1520          move.l    D0,D4
                    1521   Load_SRecordFile_17:
                    1522   ; }
                    1523   ; RamPtr = (char *)(Address) ;                            // point to download area
00001104  2D44 FFFC 1524          move.l    D4,-4(A6)
                    1525   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00001108  202E FFF6 1526          move.l    -10(A6),D0
0000110C  9085      1527          sub.l     D5,D0
0000110E  5380      1528          subq.l    #1,D0
00001110  2D40 FFE2 1529          move.l    D0,-30(A6)
                    1530   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001114  4282      1531          clr.l     D2
                    1532   Load_SRecordFile_18:
00001116  B4AE FFE2 1533          cmp.l     -30(A6),D2
0000111A  6C1E      1534          bge.s     Load_SRecordFile_20
                    1535   ; DataByte = Get2HexDigits(&CheckSum) ;
0000111C  2F0A      1536          move.l    A2,-(A7)
0000111E  4E93      1537          jsr       (A3)
00001120  584F      1538          addq.w    #4,A7
00001122  2D40 FFDE 1539          move.l    D0,-34(A6)
                    1540   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001126  202E FFDE 1541          move.l    -34(A6),D0
0000112A  206E FFFC 1542          move.l    -4(A6),A0
0000112E  52AE FFFC 1543          addq.l    #1,-4(A6)
00001132  1080      1544          move.b    D0,(A0)
                    1545   ; ByteTotal++;
00001134  524D      1546          addq.w    #1,A5
00001136  5282      1547          addq.l    #1,D2
00001138  60DC      1548          bra       Load_SRecordFile_18
                    1549   Load_SRecordFile_20:
                    1550   ; }
                    1551   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1552   ; ReadCheckSum = Get2HexDigits(0) ;
0000113A  42A7      1553          clr.l     -(A7)
0000113C  4E93      1554          jsr       (A3)
0000113E  584F      1555          addq.w    #4,A7
00001140  1D40 FFFB 1556          move.b    D0,-5(A6)
                    1557   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001144  1012      1558          move.b    (A2),D0
00001146  4600      1559          not.b     D0
00001148  4880      1560          ext.w     D0
0000114A  C07C 00FF 1561          and.w     #255,D0
0000114E  122E FFFB 1562          move.b    -5(A6),D1
00001152  4881      1563          ext.w     D1
00001154  C27C 00FF 1564          and.w     #255,D1
00001158  B041      1565          cmp.w     D1,D0
0000115A  6708      1566          beq.s     Load_SRecordFile_21
                    1567   ; LoadFailed = 1 ;
0000115C  7E01      1568          moveq     #1,D7
                    1569   ; FailedAddress = Address ;
0000115E  2D44 FFE6 1570          move.l    D4,-26(A6)
                    1571   ; break;
00001162  602C      1572          bra.s     Load_SRecordFile_3
                    1573   Load_SRecordFile_21:
                    1574   ; }
                    1575   ; SRecordCount++ ;
00001164  52AE FFEE 1576          addq.l    #1,-18(A6)
                    1577   ; // display feedback on progress
                    1578   ; if(SRecordCount % 25 == 0)
00001168  2F2E FFEE 1579          move.l    -18(A6),-(A7)
0000116C  4878 0019 1580          pea       25
00001170  4EB9 0000 1581          jsr       LDIV
00001174  5914      
00001176  202F 0004 1582          move.l    4(A7),D0
0000117A  504F      1583          addq.w    #8,A7
0000117C  4A80      1584          tst.l     D0
0000117E  660C      1585          bne.s     Load_SRecordFile_23
                    1586   ; putchar('.') ;
00001180  4878 002E 1587          pea       46
00001184  4EB9 0000 1588          jsr       _putch
00001188  59E0      
0000118A  584F      1589          addq.w    #4,A7
                    1590   Load_SRecordFile_23:
0000118C  6000 FEF0 1591          bra       Load_SRecordFile_1
                    1592   Load_SRecordFile_3:
                    1593   ; }
                    1594   ; if(LoadFailed == 1) {
00001190  0C87 0000 1595          cmp.l     #1,D7
00001194  0001      
00001196  6610      1596          bne.s     Load_SRecordFile_25
                    1597   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00001198  2F2E FFE6 1598          move.l    -26(A6),-(A7)
0000119C  4879 0000 1599          pea       @m68kde~2_21.L
000011A0  6F72      
000011A2  4E94      1600          jsr       (A4)
000011A4  504F      1601          addq.w    #8,A7
000011A6  600C      1602          bra.s     Load_SRecordFile_26
                    1603   Load_SRecordFile_25:
                    1604   ; }
                    1605   ; else
                    1606   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011A8  2F0D      1607          move.l    A5,-(A7)
000011AA  4879 0000 1608          pea       @m68kde~2_22.L
000011AE  6F98      
000011B0  4E94      1609          jsr       (A4)
000011B2  504F      1610          addq.w    #8,A7
                    1611   Load_SRecordFile_26:
                    1612   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1613   ; for(i = 0; i < 400000; i ++)
000011B4  4282      1614          clr.l     D2
                    1615   Load_SRecordFile_27:
000011B6  0C82 0006 1616          cmp.l     #400000,D2
000011BA  1A80      
000011BC  6C04      1617          bge.s     Load_SRecordFile_29
000011BE  5282      1618          addq.l    #1,D2
000011C0  60F4      1619          bra       Load_SRecordFile_27
                    1620   Load_SRecordFile_29:
                    1621   ; ;
                    1622   ; FlushKeyboard() ;
000011C2  4EB8 0BA6 1623          jsr       _FlushKeyboard
                    1624   ; Echo = 1;
000011C6  23FC 0000 1625          move.l    #1,_Echo.L
000011CA  0001 0803 
000011CE  00E0      
                    1626   Load_SRecordFile_8:
000011D0  4CDF 3CFC 1627          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011D4  4E5E      1628          unlk      A6
000011D6  4E75      1629          rts
                    1630   ; }
                    1631   ; void MemoryChange(void)
                    1632   ; {
                    1633   _MemoryChange:
000011D8  48E7 3820 1634          movem.l   D2/D3/D4/A2,-(A7)
000011DC  45F9 0000 1635          lea       _printf.L,A2
000011E0  63CE      
                    1636   ; unsigned char *RamPtr,c ; // pointer to memory
                    1637   ; int Data ;
                    1638   ; printf("\r\nExamine and Change Memory") ;
000011E2  4879 0000 1639          pea       @m68kde~2_23.L
000011E6  6FBA      
000011E8  4E92      1640          jsr       (A2)
000011EA  584F      1641          addq.w    #4,A7
                    1642   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011EC  4879 0000 1643          pea       @m68kde~2_24.L
000011F0  6FD6      
000011F2  4E92      1644          jsr       (A2)
000011F4  584F      1645          addq.w    #4,A7
                    1646   ; printf("\r\nEnter Address: ") ;
000011F6  4879 0000 1647          pea       @m68kde~2_25.L
000011FA  701C      
000011FC  4E92      1648          jsr       (A2)
000011FE  584F      1649          addq.w    #4,A7
                    1650   ; RamPtr = Get8HexDigits(0) ;
00001200  42A7      1651          clr.l     -(A7)
00001202  4EB8 0CA4 1652          jsr       _Get8HexDigits
00001206  584F      1653          addq.w    #4,A7
00001208  2600      1654          move.l    D0,D3
                    1655   ; while(1)    {
                    1656   MemoryChange_1:
                    1657   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000120A  2043      1658          move.l    D3,A0
0000120C  1210      1659          move.b    (A0),D1
0000120E  C2BC 0000 1660          and.l     #255,D1
00001212  00FF      
00001214  2F01      1661          move.l    D1,-(A7)
00001216  2F03      1662          move.l    D3,-(A7)
00001218  4879 0000 1663          pea       @m68kde~2_26.L
0000121C  702E      
0000121E  4E92      1664          jsr       (A2)
00001220  DEFC 000C 1665          add.w     #12,A7
                    1666   ; c = tolower(_getch()) ;
00001224  2F00      1667          move.l    D0,-(A7)
00001226  4EB8 0B68 1668          jsr       __getch
0000122A  2200      1669          move.l    D0,D1
0000122C  201F      1670          move.l    (A7)+,D0
0000122E  2F01      1671          move.l    D1,-(A7)
00001230  4EB9 0000 1672          jsr       _tolower
00001234  5A44      
00001236  584F      1673          addq.w    #4,A7
00001238  1400      1674          move.b    D0,D2
                    1675   ; if(c == (char)(0x1b))
0000123A  0C02 001B 1676          cmp.b     #27,D2
0000123E  6604      1677          bne.s     MemoryChange_4
                    1678   ; return ;                                // abort on escape
00001240  6000 0090 1679          bra       MemoryChange_6
                    1680   MemoryChange_4:
                    1681   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001244  0C02 0030 1682          cmp.b     #48,D2
00001248  6506      1683          blo.s     MemoryChange_10
0000124A  0C02 0039 1684          cmp.b     #57,D2
0000124E  6310      1685          bls.s     MemoryChange_9
                    1686   MemoryChange_10:
00001250  0C02 0061 1687          cmp.b     #97,D2
00001254  6500 006E 1688          blo       MemoryChange_7
00001258  0C02 0066 1689          cmp.b     #102,D2
0000125C  6200 0066 1690          bhi       MemoryChange_7
                    1691   MemoryChange_9:
                    1692   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001260  C4BC 0000 1693          and.l     #255,D2
00001264  00FF      
00001266  2F02      1694          move.l    D2,-(A7)
00001268  4EB8 0BD2 1695          jsr       _xtod
0000126C  584F      1696          addq.w    #4,A7
0000126E  C0BC 0000 1697          and.l     #255,D0
00001272  00FF      
00001274  E980      1698          asl.l     #4,D0
00001276  2F00      1699          move.l    D0,-(A7)
00001278  2F01      1700          move.l    D1,-(A7)
0000127A  4EB8 0B68 1701          jsr       __getch
0000127E  221F      1702          move.l    (A7)+,D1
00001280  2F00      1703          move.l    D0,-(A7)
00001282  4EB8 0BD2 1704          jsr       _xtod
00001286  584F      1705          addq.w    #4,A7
00001288  2200      1706          move.l    D0,D1
0000128A  201F      1707          move.l    (A7)+,D0
0000128C  C2BC 0000 1708          and.l     #255,D1
00001290  00FF      
00001292  8081      1709          or.l      D1,D0
00001294  2800      1710          move.l    D0,D4
                    1711   ; *RamPtr = (char)(Data) ;
00001296  2043      1712          move.l    D3,A0
00001298  1084      1713          move.b    D4,(A0)
                    1714   ; if(*RamPtr != Data) {
0000129A  2043      1715          move.l    D3,A0
0000129C  1010      1716          move.b    (A0),D0
0000129E  C0BC 0000 1717          and.l     #255,D0
000012A2  00FF      
000012A4  B084      1718          cmp.l     D4,D0
000012A6  671A      1719          beq.s     MemoryChange_11
                    1720   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012A8  2043      1721          move.l    D3,A0
000012AA  1210      1722          move.b    (A0),D1
000012AC  C2BC 0000 1723          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1724          move.l    D1,-(A7)
000012B4  2F04      1725          move.l    D4,-(A7)
000012B6  4879 0000 1726          pea       @m68kde~2_27.L
000012BA  7040      
000012BC  4E92      1727          jsr       (A2)
000012BE  DEFC 000C 1728          add.w     #12,A7
                    1729   MemoryChange_11:
000012C2  6008      1730          bra.s     MemoryChange_13
                    1731   MemoryChange_7:
                    1732   ; }
                    1733   ; }
                    1734   ; else if(c == (char)('-'))
000012C4  0C02 002D 1735          cmp.b     #45,D2
000012C8  6602      1736          bne.s     MemoryChange_13
                    1737   ; RamPtr -= 2 ; ;
000012CA  5583      1738          subq.l    #2,D3
                    1739   MemoryChange_13:
                    1740   ; RamPtr ++ ;
000012CC  5283      1741          addq.l    #1,D3
000012CE  6000 FF3A 1742          bra       MemoryChange_1
                    1743   MemoryChange_6:
000012D2  4CDF 041C 1744          movem.l   (A7)+,D2/D3/D4/A2
000012D6  4E75      1745          rts
                    1746   ; }
                    1747   ; }
                    1748   ; /*******************************************************************
                    1749   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1750   ; ********************************************************************/
                    1751   ; void ProgramFlashChip(void)
                    1752   ; {
                    1753   _ProgramFlashChip:
000012D8  4E75      1754          rts
                    1755   ; //
                    1756   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1757   ; // TODO : then verify by reading it back and comparing to memory
                    1758   ; //
                    1759   ; }
                    1760   ; /*************************************************************************
                    1761   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1762   ; **************************************************************************/
                    1763   ; void LoadFromFlashChip(void)
                    1764   ; {
                    1765   _LoadFromFlashChip:
                    1766   ; printf("\r\nLoading Program From SPI Flash....") ;
000012DA  4879 0000 1767          pea       @m68kde~2_28.L
000012DE  7074      
000012E0  4EB9 0000 1768          jsr       _printf
000012E4  63CE      
000012E6  584F      1769          addq.w    #4,A7
000012E8  4E75      1770          rts
                    1771   ; //
                    1772   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1773   ; //
                    1774   ; }
                    1775   ; // get rid of excess spaces
                    1776   ; void FormatInstructionForTrace(void)
                    1777   ; {
                    1778   _FormatInstructionForTrace:
000012EA  4E56 FF9C 1779          link      A6,#-100
000012EE  48E7 3C20 1780          movem.l   D2/D3/D4/D5/A2,-(A7)
000012F2  45EE FF9C 1781          lea       -100(A6),A2
                    1782   ; unsigned short int i ;
                    1783   ; char c, temp[100], *iptr, *tempptr ;
                    1784   ; for(i=0; i < 100; i++)
000012F6  4244      1785          clr.w     D4
                    1786   FormatInstructionForTrace_1:
000012F8  0C44 0064 1787          cmp.w     #100,D4
000012FC  640E      1788          bhs.s     FormatInstructionForTrace_3
                    1789   ; temp[i] = 0 ;
000012FE  C8BC 0000 1790          and.l     #65535,D4
00001302  FFFF      
00001304  4232 4800 1791          clr.b     0(A2,D4.L)
00001308  5244      1792          addq.w    #1,D4
0000130A  60EC      1793          bra       FormatInstructionForTrace_1
                    1794   FormatInstructionForTrace_3:
                    1795   ; iptr = Instruction ;
0000130C  41F9 0803 1796          lea       _Instruction.L,A0
00001310  04E2      
00001312  2408      1797          move.l    A0,D2
                    1798   ; tempptr = temp ;
00001314  2A0A      1799          move.l    A2,D5
                    1800   ; do{
                    1801   FormatInstructionForTrace_4:
                    1802   ; c = *iptr++ ;
00001316  2042      1803          move.l    D2,A0
00001318  5282      1804          addq.l    #1,D2
0000131A  1610      1805          move.b    (A0),D3
                    1806   ; *tempptr++ = c ;  // copy chars over
0000131C  2045      1807          move.l    D5,A0
0000131E  5285      1808          addq.l    #1,D5
00001320  1083      1809          move.b    D3,(A0)
                    1810   ; if(c == ' ')  {   // if copied space
00001322  0C03 0020 1811          cmp.b     #32,D3
00001326  6622      1812          bne.s     FormatInstructionForTrace_6
                    1813   ; while(*iptr == ' ') {
                    1814   FormatInstructionForTrace_8:
00001328  2042      1815          move.l    D2,A0
0000132A  1010      1816          move.b    (A0),D0
0000132C  0C00 0020 1817          cmp.b     #32,D0
00001330  660C      1818          bne.s     FormatInstructionForTrace_10
                    1819   ; if(*iptr == 0)  // if end of string then done
00001332  2042      1820          move.l    D2,A0
00001334  1010      1821          move.b    (A0),D0
00001336  6602      1822          bne.s     FormatInstructionForTrace_11
                    1823   ; break ;
00001338  6004      1824          bra.s     FormatInstructionForTrace_10
                    1825   FormatInstructionForTrace_11:
                    1826   ; iptr++ ; // skip over remaining spaces
0000133A  5282      1827          addq.l    #1,D2
0000133C  60EA      1828          bra       FormatInstructionForTrace_8
                    1829   FormatInstructionForTrace_10:
                    1830   ; }
                    1831   ; strcat(tempptr,iptr) ;
0000133E  2F02      1832          move.l    D2,-(A7)
00001340  2F05      1833          move.l    D5,-(A7)
00001342  4EB9 0000 1834          jsr       _strcat
00001346  5A92      
00001348  504F      1835          addq.w    #8,A7
                    1836   FormatInstructionForTrace_6:
0000134A  4A03      1837          tst.b     D3
0000134C  66C8      1838          bne       FormatInstructionForTrace_4
                    1839   ; }
                    1840   ; }while(c != 0) ;
                    1841   ; strcpyInstruction(temp) ;
0000134E  2F0A      1842          move.l    A2,-(A7)
00001350  4EB8 0CE6 1843          jsr       _strcpyInstruction
00001354  584F      1844          addq.w    #4,A7
00001356  4CDF 043C 1845          movem.l   (A7)+,D2/D3/D4/D5/A2
0000135A  4E5E      1846          unlk      A6
0000135C  4E75      1847          rts
                    1848   ; }
                    1849   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1850   ; // IMPORTANT
                    1851   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1852   ; // has to be done with an interrupt (IRQ Level 6)
                    1853   ; //
                    1854   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1855   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1856   ; //
                    1857   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1858   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1859   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1860   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1861   ; // program area
                    1862   ; //
                    1863   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1864   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1865   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1866   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1867   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1868   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1869   ; void DumpRegisters()
                    1870   ; {
                    1871   _DumpRegisters:
0000135E  48E7 3F3C 1872          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001362  45F9 0000 1873          lea       _putch.L,A2
00001366  59E0      
00001368  47F9 0000 1874          lea       _printf.L,A3
0000136C  63CE      
0000136E  49F9 0803 1875          lea       _SR.L,A4
00001372  012C      
00001374  4BF9 0803 1876          lea       _WatchPointString.L,A5
00001378  01C2      
                    1877   ; short i, x, j, k ;
                    1878   ; unsigned char c, *BytePointer;
                    1879   ; // buld up strings for displaying watchpoints
                    1880   ; for(x = 0; x < (short)(8); x++)
0000137A  4242      1881          clr.w     D2
                    1882   DumpRegisters_1:
0000137C  0C42 0008 1883          cmp.w     #8,D2
00001380  6C00 01C6 1884          bge       DumpRegisters_3
                    1885   ; {
                    1886   ; if(WatchPointSetOrCleared[x] == 1)
00001384  48C2      1887          ext.l     D2
00001386  2002      1888          move.l    D2,D0
00001388  E588      1889          lsl.l     #2,D0
0000138A  41F9 0803 1890          lea       _WatchPointSetOrCleared.L,A0
0000138E  01A2      
00001390  2030 0800 1891          move.l    0(A0,D0.L),D0
00001394  0C80 0000 1892          cmp.l     #1,D0
00001398  0001      
0000139A  6600 0186 1893          bne       DumpRegisters_4
                    1894   ; {
                    1895   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000139E  48C2      1896          ext.l     D2
000013A0  2202      1897          move.l    D2,D1
000013A2  E589      1898          lsl.l     #2,D1
000013A4  41F9 0803 1899          lea       _WatchPointAddress.L,A0
000013A8  0182      
000013AA  2F30 1800 1900          move.l    0(A0,D1.L),-(A7)
000013AE  4879 0000 1901          pea       @m68kde~2_29.L
000013B2  709A      
000013B4  220D      1902          move.l    A5,D1
000013B6  48C2      1903          ext.l     D2
000013B8  2F00      1904          move.l    D0,-(A7)
000013BA  2002      1905          move.l    D2,D0
000013BC  C1FC 0064 1906          muls      #100,D0
000013C0  D280      1907          add.l     D0,D1
000013C2  201F      1908          move.l    (A7)+,D0
000013C4  2F01      1909          move.l    D1,-(A7)
000013C6  4EB9 0000 1910          jsr       _sprintf
000013CA  5A60      
000013CC  DEFC 000C 1911          add.w     #12,A7
                    1912   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013D0  48C2      1913          ext.l     D2
000013D2  2002      1914          move.l    D2,D0
000013D4  E588      1915          lsl.l     #2,D0
000013D6  41F9 0803 1916          lea       _WatchPointAddress.L,A0
000013DA  0182      
000013DC  2A30 0800 1917          move.l    0(A0,D0.L),D5
                    1918   ; for(j = 0; j < (short)(16); j+=2)
000013E0  4243      1919          clr.w     D3
                    1920   DumpRegisters_6:
000013E2  0C43 0010 1921          cmp.w     #16,D3
000013E6  6C00 0082 1922          bge       DumpRegisters_8
                    1923   ; {
                    1924   ; for(k = 0; k < (short)(2); k++)
000013EA  4246      1925          clr.w     D6
                    1926   DumpRegisters_9:
000013EC  0C46 0002 1927          cmp.w     #2,D6
000013F0  6C00 0052 1928          bge       DumpRegisters_11
                    1929   ; {
                    1930   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000013F4  2045      1931          move.l    D5,A0
000013F6  48C3      1932          ext.l     D3
000013F8  2203      1933          move.l    D3,D1
000013FA  48C6      1934          ext.l     D6
000013FC  D286      1935          add.l     D6,D1
000013FE  1230 1800 1936          move.b    0(A0,D1.L),D1
00001402  C2BC 0000 1937          and.l     #255,D1
00001406  00FF      
00001408  2F01      1938          move.l    D1,-(A7)
0000140A  4879 0000 1939          pea       @m68kde~2_14.L
0000140E  6ECA      
00001410  4879 0803 1940          pea       _TempString.L
00001414  0546      
00001416  4EB9 0000 1941          jsr       _sprintf
0000141A  5A60      
0000141C  DEFC 000C 1942          add.w     #12,A7
                    1943   ; strcat(WatchPointString[x], TempString) ;
00001420  4879 0803 1944          pea       _TempString.L
00001424  0546      
00001426  220D      1945          move.l    A5,D1
00001428  48C2      1946          ext.l     D2
0000142A  2F00      1947          move.l    D0,-(A7)
0000142C  2002      1948          move.l    D2,D0
0000142E  C1FC 0064 1949          muls      #100,D0
00001432  D280      1950          add.l     D0,D1
00001434  201F      1951          move.l    (A7)+,D0
00001436  2F01      1952          move.l    D1,-(A7)
00001438  4EB9 0000 1953          jsr       _strcat
0000143C  5A92      
0000143E  504F      1954          addq.w    #8,A7
00001440  5246      1955          addq.w    #1,D6
00001442  60A8      1956          bra       DumpRegisters_9
                    1957   DumpRegisters_11:
                    1958   ; }
                    1959   ; strcat(WatchPointString[x]," ") ;
00001444  4879 0000 1960          pea       @m68kde~2_30.L
00001448  70A2      
0000144A  220D      1961          move.l    A5,D1
0000144C  48C2      1962          ext.l     D2
0000144E  2F00      1963          move.l    D0,-(A7)
00001450  2002      1964          move.l    D2,D0
00001452  C1FC 0064 1965          muls      #100,D0
00001456  D280      1966          add.l     D0,D1
00001458  201F      1967          move.l    (A7)+,D0
0000145A  2F01      1968          move.l    D1,-(A7)
0000145C  4EB9 0000 1969          jsr       _strcat
00001460  5A92      
00001462  504F      1970          addq.w    #8,A7
00001464  5443      1971          addq.w    #2,D3
00001466  6000 FF7A 1972          bra       DumpRegisters_6
                    1973   DumpRegisters_8:
                    1974   ; }
                    1975   ; strcat(WatchPointString[x], "  ") ;
0000146A  4879 0000 1976          pea       @m68kde~2_15.L
0000146E  6ED0      
00001470  220D      1977          move.l    A5,D1
00001472  48C2      1978          ext.l     D2
00001474  2F00      1979          move.l    D0,-(A7)
00001476  2002      1980          move.l    D2,D0
00001478  C1FC 0064 1981          muls      #100,D0
0000147C  D280      1982          add.l     D0,D1
0000147E  201F      1983          move.l    (A7)+,D0
00001480  2F01      1984          move.l    D1,-(A7)
00001482  4EB9 0000 1985          jsr       _strcat
00001486  5A92      
00001488  504F      1986          addq.w    #8,A7
                    1987   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000148A  48C2      1988          ext.l     D2
0000148C  2002      1989          move.l    D2,D0
0000148E  E588      1990          lsl.l     #2,D0
00001490  41F9 0803 1991          lea       _WatchPointAddress.L,A0
00001494  0182      
00001496  2A30 0800 1992          move.l    0(A0,D0.L),D5
                    1993   ; for(j = 0; j < (short)(16); j++)
0000149A  4243      1994          clr.w     D3
                    1995   DumpRegisters_12:
0000149C  0C43 0010 1996          cmp.w     #16,D3
000014A0  6C00 007E 1997          bge       DumpRegisters_14
                    1998   ; {
                    1999   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014A4  2045      2000          move.l    D5,A0
000014A6  48C3      2001          ext.l     D3
000014A8  1030 3800 2002          move.b    0(A0,D3.L),D0
000014AC  C03C 007F 2003          and.b     #127,D0
000014B0  1E00      2004          move.b    D0,D7
                    2005   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014B2  0C07 007F 2006          cmp.b     #127,D7
000014B6  6206      2007          bhi.s     DumpRegisters_17
000014B8  0C07 0020 2008          cmp.b     #32,D7
000014BC  6416      2009          bhs.s     DumpRegisters_15
                    2010   DumpRegisters_17:
                    2011   ; sprintf(TempString, ".") ;
000014BE  4879 0000 2012          pea       @m68kde~2_31.L
000014C2  70A4      
000014C4  4879 0803 2013          pea       _TempString.L
000014C8  0546      
000014CA  4EB9 0000 2014          jsr       _sprintf
000014CE  5A60      
000014D0  504F      2015          addq.w    #8,A7
000014D2  6026      2016          bra.s     DumpRegisters_16
                    2017   DumpRegisters_15:
                    2018   ; else
                    2019   ; sprintf(TempString, "%c", BytePointer[j]) ;
000014D4  2045      2020          move.l    D5,A0
000014D6  48C3      2021          ext.l     D3
000014D8  1230 3800 2022          move.b    0(A0,D3.L),D1
000014DC  C2BC 0000 2023          and.l     #255,D1
000014E0  00FF      
000014E2  2F01      2024          move.l    D1,-(A7)
000014E4  4879 0000 2025          pea       @m68kde~2_32.L
000014E8  70A6      
000014EA  4879 0803 2026          pea       _TempString.L
000014EE  0546      
000014F0  4EB9 0000 2027          jsr       _sprintf
000014F4  5A60      
000014F6  DEFC 000C 2028          add.w     #12,A7
                    2029   DumpRegisters_16:
                    2030   ; strcat(WatchPointString[x], TempString) ;
000014FA  4879 0803 2031          pea       _TempString.L
000014FE  0546      
00001500  220D      2032          move.l    A5,D1
00001502  48C2      2033          ext.l     D2
00001504  2F00      2034          move.l    D0,-(A7)
00001506  2002      2035          move.l    D2,D0
00001508  C1FC 0064 2036          muls      #100,D0
0000150C  D280      2037          add.l     D0,D1
0000150E  201F      2038          move.l    (A7)+,D0
00001510  2F01      2039          move.l    D1,-(A7)
00001512  4EB9 0000 2040          jsr       _strcat
00001516  5A92      
00001518  504F      2041          addq.w    #8,A7
0000151A  5243      2042          addq.w    #1,D3
0000151C  6000 FF7E 2043          bra       DumpRegisters_12
                    2044   DumpRegisters_14:
00001520  6020      2045          bra.s     DumpRegisters_5
                    2046   DumpRegisters_4:
                    2047   ; }
                    2048   ; }
                    2049   ; else
                    2050   ; strcpy(WatchPointString[x], "") ;
00001522  4879 0000 2051          pea       @m68kde~2_33.L
00001526  70AA      
00001528  220D      2052          move.l    A5,D1
0000152A  48C2      2053          ext.l     D2
0000152C  2F00      2054          move.l    D0,-(A7)
0000152E  2002      2055          move.l    D2,D0
00001530  C1FC 0064 2056          muls      #100,D0
00001534  D280      2057          add.l     D0,D1
00001536  201F      2058          move.l    (A7)+,D0
00001538  2F01      2059          move.l    D1,-(A7)
0000153A  4EB9 0000 2060          jsr       _strcpy
0000153E  58F2      
00001540  504F      2061          addq.w    #8,A7
                    2062   DumpRegisters_5:
00001542  5242      2063          addq.w    #1,D2
00001544  6000 FE36 2064          bra       DumpRegisters_1
                    2065   DumpRegisters_3:
                    2066   ; }
                    2067   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001548  2F39 0803 2068          move.l    _a0.L,-(A7)
0000154C  0104      
0000154E  2F39 0803 2069          move.l    _d0.L,-(A7)
00001552  00E4      
00001554  4879 0000 2070          pea       @m68kde~2_34.L
00001558  70AC      
0000155A  4E93      2071          jsr       (A3)
0000155C  DEFC 000C 2072          add.w     #12,A7
                    2073   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001560  2F39 0803 2074          move.l    _a1.L,-(A7)
00001564  0108      
00001566  2F39 0803 2075          move.l    _d1.L,-(A7)
0000156A  00E8      
0000156C  4879 0000 2076          pea       @m68kde~2_35.L
00001570  70C8      
00001572  4E93      2077          jsr       (A3)
00001574  DEFC 000C 2078          add.w     #12,A7
                    2079   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001578  2F39 0803 2080          move.l    _a2.L,-(A7)
0000157C  010C      
0000157E  2F39 0803 2081          move.l    _d2.L,-(A7)
00001582  00EC      
00001584  4879 0000 2082          pea       @m68kde~2_36.L
00001588  70E2      
0000158A  4E93      2083          jsr       (A3)
0000158C  DEFC 000C 2084          add.w     #12,A7
                    2085   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001590  2F39 0803 2086          move.l    _a3.L,-(A7)
00001594  0110      
00001596  2F39 0803 2087          move.l    _d3.L,-(A7)
0000159A  00F0      
0000159C  4879 0000 2088          pea       @m68kde~2_37.L
000015A0  70FC      
000015A2  4E93      2089          jsr       (A3)
000015A4  DEFC 000C 2090          add.w     #12,A7
                    2091   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015A8  2F39 0803 2092          move.l    _a4.L,-(A7)
000015AC  0114      
000015AE  2F39 0803 2093          move.l    _d4.L,-(A7)
000015B2  00F4      
000015B4  4879 0000 2094          pea       @m68kde~2_38.L
000015B8  7116      
000015BA  4E93      2095          jsr       (A3)
000015BC  DEFC 000C 2096          add.w     #12,A7
                    2097   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015C0  2F39 0803 2098          move.l    _a5.L,-(A7)
000015C4  0118      
000015C6  2F39 0803 2099          move.l    _d5.L,-(A7)
000015CA  00F8      
000015CC  4879 0000 2100          pea       @m68kde~2_39.L
000015D0  7130      
000015D2  4E93      2101          jsr       (A3)
000015D4  DEFC 000C 2102          add.w     #12,A7
                    2103   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000015D8  2F39 0803 2104          move.l    _a6.L,-(A7)
000015DC  011C      
000015DE  2F39 0803 2105          move.l    _d6.L,-(A7)
000015E2  00FC      
000015E4  4879 0000 2106          pea       @m68kde~2_40.L
000015E8  714A      
000015EA  4E93      2107          jsr       (A3)
000015EC  DEFC 000C 2108          add.w     #12,A7
                    2109   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000015F0  3214      2110          move.w    (A4),D1
000015F2  C27C 2000 2111          and.w     #8192,D1
000015F6  0C41 2000 2112          cmp.w     #8192,D1
000015FA  6608      2113          bne.s     DumpRegisters_18
000015FC  2239 0803 2114          move.l    _SSP.L,D1
00001600  0124      
00001602  6006      2115          bra.s     DumpRegisters_19
                    2116   DumpRegisters_18:
00001604  2239 0803 2117          move.l    _USP.L,D1
00001608  0128      
                    2118   DumpRegisters_19:
0000160A  2F01      2119          move.l    D1,-(A7)
0000160C  2F39 0803 2120          move.l    _d7.L,-(A7)
00001610  0100      
00001612  4879 0000 2121          pea       @m68kde~2_41.L
00001616  7164      
00001618  4E93      2122          jsr       (A3)
0000161A  DEFC 000C 2123          add.w     #12,A7
                    2124   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000161E  2F39 0803 2125          move.l    _USP.L,-(A7)
00001622  0128      
00001624  4879 0000 2126          pea       @m68kde~2_42.L
00001628  717E      
0000162A  4E93      2127          jsr       (A3)
0000162C  504F      2128          addq.w    #8,A7
                    2129   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000162E  2F39 0803 2130          move.l    _SSP.L,-(A7)
00001632  0124      
00001634  4879 0000 2131          pea       @m68kde~2_43.L
00001638  719C      
0000163A  4E93      2132          jsr       (A3)
0000163C  504F      2133          addq.w    #8,A7
                    2134   ; printf("\r\n SR = $%04X   ",SR) ;
0000163E  3214      2135          move.w    (A4),D1
00001640  C2BC 0000 2136          and.l     #65535,D1
00001644  FFFF      
00001646  2F01      2137          move.l    D1,-(A7)
00001648  4879 0000 2138          pea       @m68kde~2_44.L
0000164C  71BE      
0000164E  4E93      2139          jsr       (A3)
00001650  504F      2140          addq.w    #8,A7
                    2141   ; // display the status word in characters etc.
                    2142   ; printf("   [") ;
00001652  4879 0000 2143          pea       @m68kde~2_45.L
00001656  71D0      
00001658  4E93      2144          jsr       (A3)
0000165A  584F      2145          addq.w    #4,A7
                    2146   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
0000165C  3014      2147          move.w    (A4),D0
0000165E  C07C 8000 2148          and.w     #32768,D0
00001662  0C40 8000 2149          cmp.w     #32768,D0
00001666  660A      2150          bne.s     DumpRegisters_20
00001668  4878 0054 2151          pea       84
0000166C  4E92      2152          jsr       (A2)
0000166E  584F      2153          addq.w    #4,A7
00001670  6008      2154          bra.s     DumpRegisters_21
                    2155   DumpRegisters_20:
00001672  4878 002D 2156          pea       45
00001676  4E92      2157          jsr       (A2)
00001678  584F      2158          addq.w    #4,A7
                    2159   DumpRegisters_21:
                    2160   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000167A  3014      2161          move.w    (A4),D0
0000167C  C07C 2000 2162          and.w     #8192,D0
00001680  0C40 2000 2163          cmp.w     #8192,D0
00001684  660A      2164          bne.s     DumpRegisters_22
00001686  4878 0053 2165          pea       83
0000168A  4E92      2166          jsr       (A2)
0000168C  584F      2167          addq.w    #4,A7
0000168E  6008      2168          bra.s     DumpRegisters_23
                    2169   DumpRegisters_22:
00001690  4878 0055 2170          pea       85
00001694  4E92      2171          jsr       (A2)
00001696  584F      2172          addq.w    #4,A7
                    2173   DumpRegisters_23:
                    2174   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001698  3014      2175          move.w    (A4),D0
0000169A  C07C 0400 2176          and.w     #1024,D0
0000169E  0C40 0400 2177          cmp.w     #1024,D0
000016A2  660A      2178          bne.s     DumpRegisters_24
000016A4  4878 0031 2179          pea       49
000016A8  4E92      2180          jsr       (A2)
000016AA  584F      2181          addq.w    #4,A7
000016AC  6008      2182          bra.s     DumpRegisters_25
                    2183   DumpRegisters_24:
000016AE  4878 0030 2184          pea       48
000016B2  4E92      2185          jsr       (A2)
000016B4  584F      2186          addq.w    #4,A7
                    2187   DumpRegisters_25:
                    2188   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016B6  3014      2189          move.w    (A4),D0
000016B8  C07C 0200 2190          and.w     #512,D0
000016BC  0C40 0200 2191          cmp.w     #512,D0
000016C0  660A      2192          bne.s     DumpRegisters_26
000016C2  4878 0031 2193          pea       49
000016C6  4E92      2194          jsr       (A2)
000016C8  584F      2195          addq.w    #4,A7
000016CA  6008      2196          bra.s     DumpRegisters_27
                    2197   DumpRegisters_26:
000016CC  4878 0030 2198          pea       48
000016D0  4E92      2199          jsr       (A2)
000016D2  584F      2200          addq.w    #4,A7
                    2201   DumpRegisters_27:
                    2202   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000016D4  3014      2203          move.w    (A4),D0
000016D6  C07C 0100 2204          and.w     #256,D0
000016DA  0C40 0100 2205          cmp.w     #256,D0
000016DE  660A      2206          bne.s     DumpRegisters_28
000016E0  4878 0031 2207          pea       49
000016E4  4E92      2208          jsr       (A2)
000016E6  584F      2209          addq.w    #4,A7
000016E8  6008      2210          bra.s     DumpRegisters_29
                    2211   DumpRegisters_28:
000016EA  4878 0030 2212          pea       48
000016EE  4E92      2213          jsr       (A2)
000016F0  584F      2214          addq.w    #4,A7
                    2215   DumpRegisters_29:
                    2216   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000016F2  3014      2217          move.w    (A4),D0
000016F4  C07C 0010 2218          and.w     #16,D0
000016F8  0C40 0010 2219          cmp.w     #16,D0
000016FC  660A      2220          bne.s     DumpRegisters_30
000016FE  4878 0058 2221          pea       88
00001702  4E92      2222          jsr       (A2)
00001704  584F      2223          addq.w    #4,A7
00001706  6008      2224          bra.s     DumpRegisters_31
                    2225   DumpRegisters_30:
00001708  4878 002D 2226          pea       45
0000170C  4E92      2227          jsr       (A2)
0000170E  584F      2228          addq.w    #4,A7
                    2229   DumpRegisters_31:
                    2230   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001710  3014      2231          move.w    (A4),D0
00001712  C07C 0008 2232          and.w     #8,D0
00001716  0C40 0008 2233          cmp.w     #8,D0
0000171A  660A      2234          bne.s     DumpRegisters_32
0000171C  4878 004E 2235          pea       78
00001720  4E92      2236          jsr       (A2)
00001722  584F      2237          addq.w    #4,A7
00001724  6008      2238          bra.s     DumpRegisters_33
                    2239   DumpRegisters_32:
00001726  4878 002D 2240          pea       45
0000172A  4E92      2241          jsr       (A2)
0000172C  584F      2242          addq.w    #4,A7
                    2243   DumpRegisters_33:
                    2244   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000172E  3014      2245          move.w    (A4),D0
00001730  C07C 0004 2246          and.w     #4,D0
00001734  0C40 0004 2247          cmp.w     #4,D0
00001738  660A      2248          bne.s     DumpRegisters_34
0000173A  4878 005A 2249          pea       90
0000173E  4E92      2250          jsr       (A2)
00001740  584F      2251          addq.w    #4,A7
00001742  6008      2252          bra.s     DumpRegisters_35
                    2253   DumpRegisters_34:
00001744  4878 002D 2254          pea       45
00001748  4E92      2255          jsr       (A2)
0000174A  584F      2256          addq.w    #4,A7
                    2257   DumpRegisters_35:
                    2258   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
0000174C  3014      2259          move.w    (A4),D0
0000174E  C07C 0002 2260          and.w     #2,D0
00001752  0C40 0002 2261          cmp.w     #2,D0
00001756  660A      2262          bne.s     DumpRegisters_36
00001758  4878 0056 2263          pea       86
0000175C  4E92      2264          jsr       (A2)
0000175E  584F      2265          addq.w    #4,A7
00001760  6008      2266          bra.s     DumpRegisters_37
                    2267   DumpRegisters_36:
00001762  4878 002D 2268          pea       45
00001766  4E92      2269          jsr       (A2)
00001768  584F      2270          addq.w    #4,A7
                    2271   DumpRegisters_37:
                    2272   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000176A  3014      2273          move.w    (A4),D0
0000176C  C07C 0001 2274          and.w     #1,D0
00001770  0C40 0001 2275          cmp.w     #1,D0
00001774  660A      2276          bne.s     DumpRegisters_38
00001776  4878 0043 2277          pea       67
0000177A  4E92      2278          jsr       (A2)
0000177C  584F      2279          addq.w    #4,A7
0000177E  6008      2280          bra.s     DumpRegisters_39
                    2281   DumpRegisters_38:
00001780  4878 002D 2282          pea       45
00001784  4E92      2283          jsr       (A2)
00001786  584F      2284          addq.w    #4,A7
                    2285   DumpRegisters_39:
                    2286   ; putchar(']') ;
00001788  4878 005D 2287          pea       93
0000178C  4E92      2288          jsr       (A2)
0000178E  584F      2289          addq.w    #4,A7
                    2290   ; printf("\r\n PC = $%08X  ", PC) ;
00001790  2F39 0803 2291          move.l    _PC.L,-(A7)
00001794  0120      
00001796  4879 0000 2292          pea       @m68kde~2_46.L
0000179A  71D6      
0000179C  4E93      2293          jsr       (A3)
0000179E  504F      2294          addq.w    #8,A7
                    2295   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000017A0  2039 0803 2296          move.l    _PC.L,D0
000017A4  0120      
000017A6  2040      2297          move.l    D0,A0
000017A8  3010      2298          move.w    (A0),D0
000017AA  0C40 4E4E 2299          cmp.w     #20046,D0
000017AE  6724      2300          beq.s     DumpRegisters_40
                    2301   ; DisassembleInstruction(PC) ;
000017B0  2F39 0803 2302          move.l    _PC.L,-(A7)
000017B4  0120      
000017B6  4EB9 0000 2303          jsr       _DisassembleInstruction
000017BA  3A50      
000017BC  584F      2304          addq.w    #4,A7
                    2305   ; FormatInstructionForTrace() ;
000017BE  4EB8 12EA 2306          jsr       _FormatInstructionForTrace
                    2307   ; printf("%s", Instruction) ;
000017C2  4879 0803 2308          pea       _Instruction.L
000017C6  04E2      
000017C8  4879 0000 2309          pea       @m68kde~2_47.L
000017CC  71E6      
000017CE  4E93      2310          jsr       (A3)
000017D0  504F      2311          addq.w    #8,A7
000017D2  600A      2312          bra.s     DumpRegisters_41
                    2313   DumpRegisters_40:
                    2314   ; }
                    2315   ; else
                    2316   ; printf("[BREAKPOINT]") ;
000017D4  4879 0000 2317          pea       @m68kde~2_48.L
000017D8  71EA      
000017DA  4E93      2318          jsr       (A3)
000017DC  584F      2319          addq.w    #4,A7
                    2320   DumpRegisters_41:
                    2321   ; printf("\r\n") ;
000017DE  4879 0000 2322          pea       @m68kde~2_1.L
000017E2  6D66      
000017E4  4E93      2323          jsr       (A3)
000017E6  584F      2324          addq.w    #4,A7
                    2325   ; for(i=0; i < 8; i++)    {
000017E8  4244      2326          clr.w     D4
                    2327   DumpRegisters_42:
000017EA  0C44 0008 2328          cmp.w     #8,D4
000017EE  6C00 0040 2329          bge       DumpRegisters_44
                    2330   ; if(WatchPointSetOrCleared[i] == 1)
000017F2  48C4      2331          ext.l     D4
000017F4  2004      2332          move.l    D4,D0
000017F6  E588      2333          lsl.l     #2,D0
000017F8  41F9 0803 2334          lea       _WatchPointSetOrCleared.L,A0
000017FC  01A2      
000017FE  2030 0800 2335          move.l    0(A0,D0.L),D0
00001802  0C80 0000 2336          cmp.l     #1,D0
00001806  0001      
00001808  6622      2337          bne.s     DumpRegisters_45
                    2338   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000180A  220D      2339          move.l    A5,D1
0000180C  48C4      2340          ext.l     D4
0000180E  2F00      2341          move.l    D0,-(A7)
00001810  2004      2342          move.l    D4,D0
00001812  C1FC 0064 2343          muls      #100,D0
00001816  D280      2344          add.l     D0,D1
00001818  201F      2345          move.l    (A7)+,D0
0000181A  2F01      2346          move.l    D1,-(A7)
0000181C  48C4      2347          ext.l     D4
0000181E  2F04      2348          move.l    D4,-(A7)
00001820  4879 0000 2349          pea       @m68kde~2_49.L
00001824  71F8      
00001826  4E93      2350          jsr       (A3)
00001828  DEFC 000C 2351          add.w     #12,A7
                    2352   DumpRegisters_45:
0000182C  5244      2353          addq.w    #1,D4
0000182E  60BA      2354          bra       DumpRegisters_42
                    2355   DumpRegisters_44:
00001830  4CDF 3CFC 2356          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001834  4E75      2357          rts
                    2358   ; }
                    2359   ; }
                    2360   ; // Trace Exception Handler
                    2361   ; void DumpRegistersandPause(void)
                    2362   ; {
                    2363   _DumpRegistersandPause:
00001836  2F0A      2364          move.l    A2,-(A7)
00001838  45F9 0000 2365          lea       _printf.L,A2
0000183C  63CE      
                    2366   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000183E  4879 0000 2367          pea       @m68kde~2_50.L
00001842  7204      
00001844  4E92      2368          jsr       (A2)
00001846  584F      2369          addq.w    #4,A7
                    2370   ; printf("\r\nBreak Points :[Disabled]") ;
00001848  4879 0000 2371          pea       @m68kde~2_51.L
0000184C  7224      
0000184E  4E92      2372          jsr       (A2)
00001850  584F      2373          addq.w    #4,A7
                    2374   ; DumpRegisters() ;
00001852  4EB8 135E 2375          jsr       _DumpRegisters
                    2376   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001856  4879 0000 2377          pea       @m68kde~2_52.L
0000185A  7240      
0000185C  4E92      2378          jsr       (A2)
0000185E  584F      2379          addq.w    #4,A7
                    2380   ; printf("\r\nPress <ESC> to Resume Program") ;
00001860  4879 0000 2381          pea       @m68kde~2_53.L
00001864  726C      
00001866  4E92      2382          jsr       (A2)
00001868  584F      2383          addq.w    #4,A7
                    2384   ; menu() ;
0000186A  4EB9 0000 2385          jsr       _menu
0000186E  24A0      
00001870  245F      2386          move.l    (A7)+,A2
00001872  4E75      2387          rts
                    2388   ; }
                    2389   ; void ChangeRegisters(void)
                    2390   ; {
                    2391   _ChangeRegisters:
00001874  4E56 FFFC 2392          link      A6,#-4
00001878  48E7 303C 2393          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000187C  45F9 0000 2394          lea       _printf.L,A2
00001880  63CE      
00001882  47EE FFFC 2395          lea       -4(A6),A3
00001886  49F8 0CA4 2396          lea       _Get8HexDigits.L,A4
0000188A  4BF8 0B68 2397          lea       __getch.L,A5
                    2398   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2399   ; int reg_val ;
                    2400   ; char c, reg[3] ;
                    2401   ; reg[0] = tolower(_getch()) ;
0000188E  2F00      2402          move.l    D0,-(A7)
00001890  4E95      2403          jsr       (A5)
00001892  2200      2404          move.l    D0,D1
00001894  201F      2405          move.l    (A7)+,D0
00001896  2F01      2406          move.l    D1,-(A7)
00001898  4EB9 0000 2407          jsr       _tolower
0000189C  5A44      
0000189E  584F      2408          addq.w    #4,A7
000018A0  1680      2409          move.b    D0,(A3)
                    2410   ; reg[1] = c = tolower(_getch()) ;
000018A2  2F00      2411          move.l    D0,-(A7)
000018A4  4E95      2412          jsr       (A5)
000018A6  2200      2413          move.l    D0,D1
000018A8  201F      2414          move.l    (A7)+,D0
000018AA  2F01      2415          move.l    D1,-(A7)
000018AC  4EB9 0000 2416          jsr       _tolower
000018B0  5A44      
000018B2  584F      2417          addq.w    #4,A7
000018B4  1400      2418          move.b    D0,D2
000018B6  1740 0001 2419          move.b    D0,1(A3)
                    2420   ; if(reg[0] == (char)('d'))  {    // change data register
000018BA  1013      2421          move.b    (A3),D0
000018BC  0C00 0064 2422          cmp.b     #100,D0
000018C0  6600 00AE 2423          bne       ChangeRegisters_1
                    2424   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018C4  102B 0001 2425          move.b    1(A3),D0
000018C8  0C00 0037 2426          cmp.b     #55,D0
000018CC  6E0A      2427          bgt.s     ChangeRegisters_5
000018CE  102B 0001 2428          move.b    1(A3),D0
000018D2  0C00 0030 2429          cmp.b     #48,D0
000018D6  6C0E      2430          bge.s     ChangeRegisters_3
                    2431   ChangeRegisters_5:
                    2432   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018D8  4879 0000 2433          pea       @m68kde~2_54.L
000018DC  728C      
000018DE  4E92      2434          jsr       (A2)
000018E0  584F      2435          addq.w    #4,A7
                    2436   ; return ;
000018E2  6000 0244 2437          bra       ChangeRegisters_6
                    2438   ChangeRegisters_3:
                    2439   ; }
                    2440   ; else {
                    2441   ; printf("\r\nD%c = ", c) ;
000018E6  4882      2442          ext.w     D2
000018E8  48C2      2443          ext.l     D2
000018EA  2F02      2444          move.l    D2,-(A7)
000018EC  4879 0000 2445          pea       @m68kde~2_55.L
000018F0  72B8      
000018F2  4E92      2446          jsr       (A2)
000018F4  504F      2447          addq.w    #8,A7
                    2448   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018F6  42A7      2449          clr.l     -(A7)
000018F8  4E94      2450          jsr       (A4)
000018FA  584F      2451          addq.w    #4,A7
000018FC  2600      2452          move.l    D0,D3
                    2453   ; }
                    2454   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2455   ; if(c == (char)('0'))
000018FE  0C02 0030 2456          cmp.b     #48,D2
00001902  660A      2457          bne.s     ChangeRegisters_7
                    2458   ; d0 = reg_val ;
00001904  23C3 0803 2459          move.l    D3,_d0.L
00001908  00E4      
0000190A  6000 0060 2460          bra       ChangeRegisters_20
                    2461   ChangeRegisters_7:
                    2462   ; else if(c == (char)('1'))
0000190E  0C02 0031 2463          cmp.b     #49,D2
00001912  660A      2464          bne.s     ChangeRegisters_9
                    2465   ; d1 = reg_val ;
00001914  23C3 0803 2466          move.l    D3,_d1.L
00001918  00E8      
0000191A  6000 0050 2467          bra       ChangeRegisters_20
                    2468   ChangeRegisters_9:
                    2469   ; else if(c == (char)('2'))
0000191E  0C02 0032 2470          cmp.b     #50,D2
00001922  660A      2471          bne.s     ChangeRegisters_11
                    2472   ; d2 = reg_val ;
00001924  23C3 0803 2473          move.l    D3,_d2.L
00001928  00EC      
0000192A  6000 0040 2474          bra       ChangeRegisters_20
                    2475   ChangeRegisters_11:
                    2476   ; else if(c == (char)('3'))
0000192E  0C02 0033 2477          cmp.b     #51,D2
00001932  6608      2478          bne.s     ChangeRegisters_13
                    2479   ; d3 = reg_val ;
00001934  23C3 0803 2480          move.l    D3,_d3.L
00001938  00F0      
0000193A  6030      2481          bra.s     ChangeRegisters_20
                    2482   ChangeRegisters_13:
                    2483   ; else if(c == (char)('4'))
0000193C  0C02 0034 2484          cmp.b     #52,D2
00001940  6608      2485          bne.s     ChangeRegisters_15
                    2486   ; d4 = reg_val ;
00001942  23C3 0803 2487          move.l    D3,_d4.L
00001946  00F4      
00001948  6022      2488          bra.s     ChangeRegisters_20
                    2489   ChangeRegisters_15:
                    2490   ; else if(c == (char)('5'))
0000194A  0C02 0035 2491          cmp.b     #53,D2
0000194E  6608      2492          bne.s     ChangeRegisters_17
                    2493   ; d5 = reg_val ;
00001950  23C3 0803 2494          move.l    D3,_d5.L
00001954  00F8      
00001956  6014      2495          bra.s     ChangeRegisters_20
                    2496   ChangeRegisters_17:
                    2497   ; else if(c == (char)('6'))
00001958  0C02 0036 2498          cmp.b     #54,D2
0000195C  6608      2499          bne.s     ChangeRegisters_19
                    2500   ; d6 = reg_val ;
0000195E  23C3 0803 2501          move.l    D3,_d6.L
00001962  00FC      
00001964  6006      2502          bra.s     ChangeRegisters_20
                    2503   ChangeRegisters_19:
                    2504   ; else
                    2505   ; d7 = reg_val ;
00001966  23C3 0803 2506          move.l    D3,_d7.L
0000196A  0100      
                    2507   ChangeRegisters_20:
0000196C  6000 01B6 2508          bra       ChangeRegisters_51
                    2509   ChangeRegisters_1:
                    2510   ; }
                    2511   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001970  1013      2512          move.b    (A3),D0
00001972  0C00 0061 2513          cmp.b     #97,D0
00001976  6600 00A6 2514          bne       ChangeRegisters_21
                    2515   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000197A  0C02 0037 2516          cmp.b     #55,D2
0000197E  6E06      2517          bgt.s     ChangeRegisters_25
00001980  0C02 0030 2518          cmp.b     #48,D2
00001984  6C0E      2519          bge.s     ChangeRegisters_23
                    2520   ChangeRegisters_25:
                    2521   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001986  4879 0000 2522          pea       @m68kde~2_56.L
0000198A  72C2      
0000198C  4E92      2523          jsr       (A2)
0000198E  584F      2524          addq.w    #4,A7
                    2525   ; return ;
00001990  6000 0196 2526          bra       ChangeRegisters_6
                    2527   ChangeRegisters_23:
                    2528   ; }
                    2529   ; else {
                    2530   ; printf("\r\nA%c = ", c) ;
00001994  4882      2531          ext.w     D2
00001996  48C2      2532          ext.l     D2
00001998  2F02      2533          move.l    D2,-(A7)
0000199A  4879 0000 2534          pea       @m68kde~2_57.L
0000199E  72F0      
000019A0  4E92      2535          jsr       (A2)
000019A2  504F      2536          addq.w    #8,A7
                    2537   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019A4  42A7      2538          clr.l     -(A7)
000019A6  4E94      2539          jsr       (A4)
000019A8  584F      2540          addq.w    #4,A7
000019AA  2600      2541          move.l    D0,D3
                    2542   ; }
                    2543   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2544   ; if(c == (char)('0'))
000019AC  0C02 0030 2545          cmp.b     #48,D2
000019B0  660A      2546          bne.s     ChangeRegisters_26
                    2547   ; a0 = reg_val ;
000019B2  23C3 0803 2548          move.l    D3,_a0.L
000019B6  0104      
000019B8  6000 0060 2549          bra       ChangeRegisters_39
                    2550   ChangeRegisters_26:
                    2551   ; else if(c == (char)('1'))
000019BC  0C02 0031 2552          cmp.b     #49,D2
000019C0  660A      2553          bne.s     ChangeRegisters_28
                    2554   ; a1 = reg_val ;
000019C2  23C3 0803 2555          move.l    D3,_a1.L
000019C6  0108      
000019C8  6000 0050 2556          bra       ChangeRegisters_39
                    2557   ChangeRegisters_28:
                    2558   ; else if(c == (char)('2'))
000019CC  0C02 0032 2559          cmp.b     #50,D2
000019D0  660A      2560          bne.s     ChangeRegisters_30
                    2561   ; a2 = reg_val ;
000019D2  23C3 0803 2562          move.l    D3,_a2.L
000019D6  010C      
000019D8  6000 0040 2563          bra       ChangeRegisters_39
                    2564   ChangeRegisters_30:
                    2565   ; else if(c == (char)('3'))
000019DC  0C02 0033 2566          cmp.b     #51,D2
000019E0  6608      2567          bne.s     ChangeRegisters_32
                    2568   ; a3 = reg_val ;
000019E2  23C3 0803 2569          move.l    D3,_a3.L
000019E6  0110      
000019E8  6030      2570          bra.s     ChangeRegisters_39
                    2571   ChangeRegisters_32:
                    2572   ; else if(c == (char)('4'))
000019EA  0C02 0034 2573          cmp.b     #52,D2
000019EE  6608      2574          bne.s     ChangeRegisters_34
                    2575   ; a4 = reg_val ;
000019F0  23C3 0803 2576          move.l    D3,_a4.L
000019F4  0114      
000019F6  6022      2577          bra.s     ChangeRegisters_39
                    2578   ChangeRegisters_34:
                    2579   ; else if(c == (char)('5'))
000019F8  0C02 0035 2580          cmp.b     #53,D2
000019FC  6608      2581          bne.s     ChangeRegisters_36
                    2582   ; a5 = reg_val ;
000019FE  23C3 0803 2583          move.l    D3,_a5.L
00001A02  0118      
00001A04  6014      2584          bra.s     ChangeRegisters_39
                    2585   ChangeRegisters_36:
                    2586   ; else if(c == (char)('6'))
00001A06  0C02 0036 2587          cmp.b     #54,D2
00001A0A  6608      2588          bne.s     ChangeRegisters_38
                    2589   ; a6 = reg_val ;
00001A0C  23C3 0803 2590          move.l    D3,_a6.L
00001A10  011C      
00001A12  6006      2591          bra.s     ChangeRegisters_39
                    2592   ChangeRegisters_38:
                    2593   ; else
                    2594   ; USP = reg_val ;
00001A14  23C3 0803 2595          move.l    D3,_USP.L
00001A18  0128      
                    2596   ChangeRegisters_39:
00001A1A  6000 0108 2597          bra       ChangeRegisters_51
                    2598   ChangeRegisters_21:
                    2599   ; }
                    2600   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A1E  1013      2601          move.b    (A3),D0
00001A20  0C00 0075 2602          cmp.b     #117,D0
00001A24  6600 004E 2603          bne       ChangeRegisters_40
00001A28  0C02 0073 2604          cmp.b     #115,D2
00001A2C  6600 0046 2605          bne       ChangeRegisters_40
                    2606   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A30  2F00      2607          move.l    D0,-(A7)
00001A32  4E95      2608          jsr       (A5)
00001A34  2200      2609          move.l    D0,D1
00001A36  201F      2610          move.l    (A7)+,D0
00001A38  2F01      2611          move.l    D1,-(A7)
00001A3A  4EB9 0000 2612          jsr       _tolower
00001A3E  5A44      
00001A40  584F      2613          addq.w    #4,A7
00001A42  0C80 0000 2614          cmp.l     #112,D0
00001A46  0070      
00001A48  6618      2615          bne.s     ChangeRegisters_42
                    2616   ; printf("\r\nUser SP = ") ;
00001A4A  4879 0000 2617          pea       @m68kde~2_58.L
00001A4E  72FA      
00001A50  4E92      2618          jsr       (A2)
00001A52  584F      2619          addq.w    #4,A7
                    2620   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A54  42A7      2621          clr.l     -(A7)
00001A56  4E94      2622          jsr       (A4)
00001A58  584F      2623          addq.w    #4,A7
00001A5A  23C0 0803 2624          move.l    D0,_USP.L
00001A5E  0128      
00001A60  600E      2625          bra.s     ChangeRegisters_43
                    2626   ChangeRegisters_42:
                    2627   ; }
                    2628   ; else {
                    2629   ; printf("\r\nIllegal Register....") ;
00001A62  4879 0000 2630          pea       @m68kde~2_59.L
00001A66  7308      
00001A68  4E92      2631          jsr       (A2)
00001A6A  584F      2632          addq.w    #4,A7
                    2633   ; return ;
00001A6C  6000 00BA 2634          bra       ChangeRegisters_6
                    2635   ChangeRegisters_43:
00001A70  6000 00B2 2636          bra       ChangeRegisters_51
                    2637   ChangeRegisters_40:
                    2638   ; }
                    2639   ; }
                    2640   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A74  1013      2641          move.b    (A3),D0
00001A76  0C00 0073 2642          cmp.b     #115,D0
00001A7A  6600 004E 2643          bne       ChangeRegisters_44
00001A7E  0C02 0073 2644          cmp.b     #115,D2
00001A82  6600 0046 2645          bne       ChangeRegisters_44
                    2646   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A86  2F00      2647          move.l    D0,-(A7)
00001A88  4E95      2648          jsr       (A5)
00001A8A  2200      2649          move.l    D0,D1
00001A8C  201F      2650          move.l    (A7)+,D0
00001A8E  2F01      2651          move.l    D1,-(A7)
00001A90  4EB9 0000 2652          jsr       _tolower
00001A94  5A44      
00001A96  584F      2653          addq.w    #4,A7
00001A98  0C80 0000 2654          cmp.l     #112,D0
00001A9C  0070      
00001A9E  6618      2655          bne.s     ChangeRegisters_46
                    2656   ; printf("\r\nSystem SP = ") ;
00001AA0  4879 0000 2657          pea       @m68kde~2_60.L
00001AA4  7320      
00001AA6  4E92      2658          jsr       (A2)
00001AA8  584F      2659          addq.w    #4,A7
                    2660   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AAA  42A7      2661          clr.l     -(A7)
00001AAC  4E94      2662          jsr       (A4)
00001AAE  584F      2663          addq.w    #4,A7
00001AB0  23C0 0803 2664          move.l    D0,_SSP.L
00001AB4  0124      
00001AB6  600E      2665          bra.s     ChangeRegisters_47
                    2666   ChangeRegisters_46:
                    2667   ; }
                    2668   ; else {
                    2669   ; printf("\r\nIllegal Register....") ;
00001AB8  4879 0000 2670          pea       @m68kde~2_59.L
00001ABC  7308      
00001ABE  4E92      2671          jsr       (A2)
00001AC0  584F      2672          addq.w    #4,A7
                    2673   ; return ;
00001AC2  6000 0064 2674          bra       ChangeRegisters_6
                    2675   ChangeRegisters_47:
00001AC6  6000 005C 2676          bra       ChangeRegisters_51
                    2677   ChangeRegisters_44:
                    2678   ; }
                    2679   ; }
                    2680   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001ACA  1013      2681          move.b    (A3),D0
00001ACC  0C00 0070 2682          cmp.b     #112,D0
00001AD0  6620      2683          bne.s     ChangeRegisters_48
00001AD2  0C02 0063 2684          cmp.b     #99,D2
00001AD6  661A      2685          bne.s     ChangeRegisters_48
                    2686   ; printf("\r\nPC = ") ;
00001AD8  4879 0000 2687          pea       @m68kde~2_61.L
00001ADC  7330      
00001ADE  4E92      2688          jsr       (A2)
00001AE0  584F      2689          addq.w    #4,A7
                    2690   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AE2  42A7      2691          clr.l     -(A7)
00001AE4  4E94      2692          jsr       (A4)
00001AE6  584F      2693          addq.w    #4,A7
00001AE8  23C0 0803 2694          move.l    D0,_PC.L
00001AEC  0120      
00001AEE  6000 0034 2695          bra       ChangeRegisters_51
                    2696   ChangeRegisters_48:
                    2697   ; }
                    2698   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001AF2  1013      2699          move.b    (A3),D0
00001AF4  0C00 0073 2700          cmp.b     #115,D0
00001AF8  6620      2701          bne.s     ChangeRegisters_50
00001AFA  0C02 0072 2702          cmp.b     #114,D2
00001AFE  661A      2703          bne.s     ChangeRegisters_50
                    2704   ; printf("\r\nSR = ") ;
00001B00  4879 0000 2705          pea       @m68kde~2_62.L
00001B04  7338      
00001B06  4E92      2706          jsr       (A2)
00001B08  584F      2707          addq.w    #4,A7
                    2708   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B0A  42A7      2709          clr.l     -(A7)
00001B0C  4EB8 0C58 2710          jsr       _Get4HexDigits
00001B10  584F      2711          addq.w    #4,A7
00001B12  33C0 0803 2712          move.w    D0,_SR.L
00001B16  012C      
00001B18  600A      2713          bra.s     ChangeRegisters_51
                    2714   ChangeRegisters_50:
                    2715   ; }
                    2716   ; else
                    2717   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B1A  4879 0000 2718          pea       @m68kde~2_63.L
00001B1E  7340      
00001B20  4E92      2719          jsr       (A2)
00001B22  584F      2720          addq.w    #4,A7
                    2721   ChangeRegisters_51:
                    2722   ; DumpRegisters() ;
00001B24  4EB8 135E 2723          jsr       _DumpRegisters
                    2724   ChangeRegisters_6:
00001B28  4CDF 3C0C 2725          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B2C  4E5E      2726          unlk      A6
00001B2E  4E75      2727          rts
                    2728   ; }
                    2729   ; void BreakPointDisplay(void)
                    2730   ; {
                    2731   _BreakPointDisplay:
00001B30  48E7 3030 2732          movem.l   D2/D3/A2/A3,-(A7)
00001B34  45F9 0000 2733          lea       _printf.L,A2
00001B38  63CE      
00001B3A  47F9 0803 2734          lea       _BreakPointAddress.L,A3
00001B3E  012E      
                    2735   ; int i, BreakPointsSet = 0 ;
00001B40  4283      2736          clr.l     D3
                    2737   ; // any break points  set
                    2738   ; for(i = 0; i < 8; i++)  {
00001B42  4282      2739          clr.l     D2
                    2740   BreakPointDisplay_1:
00001B44  0C82 0000 2741          cmp.l     #8,D2
00001B48  0008      
00001B4A  6C1C      2742          bge.s     BreakPointDisplay_3
                    2743   ; if(BreakPointSetOrCleared[i] == 1)
00001B4C  2002      2744          move.l    D2,D0
00001B4E  E588      2745          lsl.l     #2,D0
00001B50  41F9 0803 2746          lea       _BreakPointSetOrCleared.L,A0
00001B54  015E      
00001B56  2030 0800 2747          move.l    0(A0,D0.L),D0
00001B5A  0C80 0000 2748          cmp.l     #1,D0
00001B5E  0001      
00001B60  6602      2749          bne.s     BreakPointDisplay_4
                    2750   ; BreakPointsSet = 1;
00001B62  7601      2751          moveq     #1,D3
                    2752   BreakPointDisplay_4:
00001B64  5282      2753          addq.l    #1,D2
00001B66  60DC      2754          bra       BreakPointDisplay_1
                    2755   BreakPointDisplay_3:
                    2756   ; }
                    2757   ; if(BreakPointsSet == 1) {
00001B68  0C83 0000 2758          cmp.l     #1,D3
00001B6C  0001      
00001B6E  6616      2759          bne.s     BreakPointDisplay_6
                    2760   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B70  4879 0000 2761          pea       @m68kde~2_64.L
00001B74  737C      
00001B76  4E92      2762          jsr       (A2)
00001B78  584F      2763          addq.w    #4,A7
                    2764   ; printf("\r\n---     ---------    -----------") ;
00001B7A  4879 0000 2765          pea       @m68kde~2_65.L
00001B7E  73A2      
00001B80  4E92      2766          jsr       (A2)
00001B82  584F      2767          addq.w    #4,A7
00001B84  600A      2768          bra.s     BreakPointDisplay_7
                    2769   BreakPointDisplay_6:
                    2770   ; }
                    2771   ; else
                    2772   ; printf("\r\nNo BreakPoints Set") ;
00001B86  4879 0000 2773          pea       @m68kde~2_66.L
00001B8A  73C6      
00001B8C  4E92      2774          jsr       (A2)
00001B8E  584F      2775          addq.w    #4,A7
                    2776   BreakPointDisplay_7:
                    2777   ; for(i = 0; i < 8; i++)  {
00001B90  4282      2778          clr.l     D2
                    2779   BreakPointDisplay_8:
00001B92  0C82 0000 2780          cmp.l     #8,D2
00001B96  0008      
00001B98  6C00 0080 2781          bge       BreakPointDisplay_10
                    2782   ; // put opcode back to disassemble it, then put break point back
                    2783   ; if(BreakPointSetOrCleared[i] == 1)  {
00001B9C  2002      2784          move.l    D2,D0
00001B9E  E588      2785          lsl.l     #2,D0
00001BA0  41F9 0803 2786          lea       _BreakPointSetOrCleared.L,A0
00001BA4  015E      
00001BA6  2030 0800 2787          move.l    0(A0,D0.L),D0
00001BAA  0C80 0000 2788          cmp.l     #1,D0
00001BAE  0001      
00001BB0  6600 0062 2789          bne       BreakPointDisplay_11
                    2790   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BB4  2002      2791          move.l    D2,D0
00001BB6  E388      2792          lsl.l     #1,D0
00001BB8  41F9 0803 2793          lea       _BreakPointInstruction.L,A0
00001BBC  014E      
00001BBE  2202      2794          move.l    D2,D1
00001BC0  E589      2795          lsl.l     #2,D1
00001BC2  2233 1800 2796          move.l    0(A3,D1.L),D1
00001BC6  2241      2797          move.l    D1,A1
00001BC8  32B0 0800 2798          move.w    0(A0,D0.L),(A1)
                    2799   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001BCC  2202      2800          move.l    D2,D1
00001BCE  E589      2801          lsl.l     #2,D1
00001BD0  2F33 1800 2802          move.l    0(A3,D1.L),-(A7)
00001BD4  4EB9 0000 2803          jsr       _DisassembleInstruction
00001BD8  3A50      
00001BDA  584F      2804          addq.w    #4,A7
                    2805   ; FormatInstructionForTrace() ;
00001BDC  4EB8 12EA 2806          jsr       _FormatInstructionForTrace
                    2807   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BE0  2002      2808          move.l    D2,D0
00001BE2  E588      2809          lsl.l     #2,D0
00001BE4  2033 0800 2810          move.l    0(A3,D0.L),D0
00001BE8  2040      2811          move.l    D0,A0
00001BEA  30BC 4E4E 2812          move.w    #20046,(A0)
                    2813   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001BEE  2202      2814          move.l    D2,D1
00001BF0  E589      2815          lsl.l     #2,D1
00001BF2  2F33 1800 2816          move.l    0(A3,D1.L),-(A7)
00001BF6  2F02      2817          move.l    D2,-(A7)
00001BF8  4879 0000 2818          pea       @m68kde~2_67.L
00001BFC  73DC      
00001BFE  4E92      2819          jsr       (A2)
00001C00  DEFC 000C 2820          add.w     #12,A7
                    2821   ; printf("    %s", Instruction);
00001C04  4879 0803 2822          pea       _Instruction.L
00001C08  04E2      
00001C0A  4879 0000 2823          pea       @m68kde~2_68.L
00001C0E  73EC      
00001C10  4E92      2824          jsr       (A2)
00001C12  504F      2825          addq.w    #8,A7
                    2826   BreakPointDisplay_11:
00001C14  5282      2827          addq.l    #1,D2
00001C16  6000 FF7A 2828          bra       BreakPointDisplay_8
                    2829   BreakPointDisplay_10:
                    2830   ; }
                    2831   ; }
                    2832   ; printf("\r\n") ;
00001C1A  4879 0000 2833          pea       @m68kde~2_1.L
00001C1E  6D66      
00001C20  4E92      2834          jsr       (A2)
00001C22  584F      2835          addq.w    #4,A7
00001C24  4CDF 0C0C 2836          movem.l   (A7)+,D2/D3/A2/A3
00001C28  4E75      2837          rts
                    2838   ; }
                    2839   ; void WatchPointDisplay(void)
                    2840   ; {
                    2841   _WatchPointDisplay:
00001C2A  48E7 3020 2842          movem.l   D2/D3/A2,-(A7)
00001C2E  45F9 0000 2843          lea       _printf.L,A2
00001C32  63CE      
                    2844   ; int i ;
                    2845   ; int WatchPointsSet = 0 ;
00001C34  4283      2846          clr.l     D3
                    2847   ; // any watchpoints set
                    2848   ; for(i = 0; i < 8; i++)  {
00001C36  4282      2849          clr.l     D2
                    2850   WatchPointDisplay_1:
00001C38  0C82 0000 2851          cmp.l     #8,D2
00001C3C  0008      
00001C3E  6C1C      2852          bge.s     WatchPointDisplay_3
                    2853   ; if(WatchPointSetOrCleared[i] == 1)
00001C40  2002      2854          move.l    D2,D0
00001C42  E588      2855          lsl.l     #2,D0
00001C44  41F9 0803 2856          lea       _WatchPointSetOrCleared.L,A0
00001C48  01A2      
00001C4A  2030 0800 2857          move.l    0(A0,D0.L),D0
00001C4E  0C80 0000 2858          cmp.l     #1,D0
00001C52  0001      
00001C54  6602      2859          bne.s     WatchPointDisplay_4
                    2860   ; WatchPointsSet = 1;
00001C56  7601      2861          moveq     #1,D3
                    2862   WatchPointDisplay_4:
00001C58  5282      2863          addq.l    #1,D2
00001C5A  60DC      2864          bra       WatchPointDisplay_1
                    2865   WatchPointDisplay_3:
                    2866   ; }
                    2867   ; if(WatchPointsSet == 1) {
00001C5C  0C83 0000 2868          cmp.l     #1,D3
00001C60  0001      
00001C62  6616      2869          bne.s     WatchPointDisplay_6
                    2870   ; printf("\r\nNum     Address") ;
00001C64  4879 0000 2871          pea       @m68kde~2_69.L
00001C68  73F4      
00001C6A  4E92      2872          jsr       (A2)
00001C6C  584F      2873          addq.w    #4,A7
                    2874   ; printf("\r\n---     ---------") ;
00001C6E  4879 0000 2875          pea       @m68kde~2_70.L
00001C72  7406      
00001C74  4E92      2876          jsr       (A2)
00001C76  584F      2877          addq.w    #4,A7
00001C78  600A      2878          bra.s     WatchPointDisplay_7
                    2879   WatchPointDisplay_6:
                    2880   ; }
                    2881   ; else
                    2882   ; printf("\r\nNo WatchPoints Set") ;
00001C7A  4879 0000 2883          pea       @m68kde~2_71.L
00001C7E  741A      
00001C80  4E92      2884          jsr       (A2)
00001C82  584F      2885          addq.w    #4,A7
                    2886   WatchPointDisplay_7:
                    2887   ; for(i = 0; i < 8; i++)  {
00001C84  4282      2888          clr.l     D2
                    2889   WatchPointDisplay_8:
00001C86  0C82 0000 2890          cmp.l     #8,D2
00001C8A  0008      
00001C8C  6C00 0038 2891          bge       WatchPointDisplay_10
                    2892   ; if(WatchPointSetOrCleared[i] == 1)
00001C90  2002      2893          move.l    D2,D0
00001C92  E588      2894          lsl.l     #2,D0
00001C94  41F9 0803 2895          lea       _WatchPointSetOrCleared.L,A0
00001C98  01A2      
00001C9A  2030 0800 2896          move.l    0(A0,D0.L),D0
00001C9E  0C80 0000 2897          cmp.l     #1,D0
00001CA2  0001      
00001CA4  661C      2898          bne.s     WatchPointDisplay_11
                    2899   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CA6  2202      2900          move.l    D2,D1
00001CA8  E589      2901          lsl.l     #2,D1
00001CAA  41F9 0803 2902          lea       _WatchPointAddress.L,A0
00001CAE  0182      
00001CB0  2F30 1800 2903          move.l    0(A0,D1.L),-(A7)
00001CB4  2F02      2904          move.l    D2,-(A7)
00001CB6  4879 0000 2905          pea       @m68kde~2_67.L
00001CBA  73DC      
00001CBC  4E92      2906          jsr       (A2)
00001CBE  DEFC 000C 2907          add.w     #12,A7
                    2908   WatchPointDisplay_11:
00001CC2  5282      2909          addq.l    #1,D2
00001CC4  60C0      2910          bra       WatchPointDisplay_8
                    2911   WatchPointDisplay_10:
                    2912   ; }
                    2913   ; printf("\r\n") ;
00001CC6  4879 0000 2914          pea       @m68kde~2_1.L
00001CCA  6D66      
00001CCC  4E92      2915          jsr       (A2)
00001CCE  584F      2916          addq.w    #4,A7
00001CD0  4CDF 040C 2917          movem.l   (A7)+,D2/D3/A2
00001CD4  4E75      2918          rts
                    2919   ; }
                    2920   ; void BreakPointClear(void)
                    2921   ; {
                    2922   _BreakPointClear:
00001CD6  4E56 FFFC 2923          link      A6,#-4
00001CDA  48E7 2020 2924          movem.l   D2/A2,-(A7)
00001CDE  45F9 0000 2925          lea       _printf.L,A2
00001CE2  63CE      
                    2926   ; unsigned int i ;
                    2927   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2928   ; BreakPointDisplay() ;
00001CE4  4EB8 1B30 2929          jsr       _BreakPointDisplay
                    2930   ; printf("\r\nEnter Break Point Number: ") ;
00001CE8  4879 0000 2931          pea       @m68kde~2_72.L
00001CEC  7430      
00001CEE  4E92      2932          jsr       (A2)
00001CF0  584F      2933          addq.w    #4,A7
                    2934   ; i = xtod(_getch()) ;           // get break pointer number
00001CF2  2F00      2935          move.l    D0,-(A7)
00001CF4  4EB8 0B68 2936          jsr       __getch
00001CF8  2200      2937          move.l    D0,D1
00001CFA  201F      2938          move.l    (A7)+,D0
00001CFC  2F01      2939          move.l    D1,-(A7)
00001CFE  4EB8 0BD2 2940          jsr       _xtod
00001D02  584F      2941          addq.w    #4,A7
00001D04  C0BC 0000 2942          and.l     #255,D0
00001D08  00FF      
00001D0A  2400      2943          move.l    D0,D2
                    2944   ; if((i < 0) || (i > 7))   {
00001D0C  0C82 0000 2945          cmp.l     #0,D2
00001D10  0000      
00001D12  6508      2946          blo.s     BreakPointClear_3
00001D14  0C82 0000 2947          cmp.l     #7,D2
00001D18  0007      
00001D1A  630E      2948          bls.s     BreakPointClear_1
                    2949   BreakPointClear_3:
                    2950   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D1C  4879 0000 2951          pea       @m68kde~2_73.L
00001D20  744E      
00001D22  4E92      2952          jsr       (A2)
00001D24  584F      2953          addq.w    #4,A7
                    2954   ; return ;
00001D26  6000 0080 2955          bra       BreakPointClear_4
                    2956   BreakPointClear_1:
                    2957   ; }
                    2958   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D2A  2002      2959          move.l    D2,D0
00001D2C  E588      2960          lsl.l     #2,D0
00001D2E  41F9 0803 2961          lea       _BreakPointSetOrCleared.L,A0
00001D32  015E      
00001D34  2030 0800 2962          move.l    0(A0,D0.L),D0
00001D38  0C80 0000 2963          cmp.l     #1,D0
00001D3C  0001      
00001D3E  6600 005A 2964          bne       BreakPointClear_5
                    2965   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D42  2002      2966          move.l    D2,D0
00001D44  E588      2967          lsl.l     #2,D0
00001D46  41F9 0803 2968          lea       _BreakPointAddress.L,A0
00001D4A  012E      
00001D4C  2D70 0800 2969          move.l    0(A0,D0.L),-4(A6)
00001D50  FFFC      
                    2970   ; BreakPointAddress[i] = 0 ;
00001D52  2002      2971          move.l    D2,D0
00001D54  E588      2972          lsl.l     #2,D0
00001D56  41F9 0803 2973          lea       _BreakPointAddress.L,A0
00001D5A  012E      
00001D5C  42B0 0800 2974          clr.l     0(A0,D0.L)
                    2975   ; BreakPointSetOrCleared[i] = 0 ;
00001D60  2002      2976          move.l    D2,D0
00001D62  E588      2977          lsl.l     #2,D0
00001D64  41F9 0803 2978          lea       _BreakPointSetOrCleared.L,A0
00001D68  015E      
00001D6A  42B0 0800 2979          clr.l     0(A0,D0.L)
                    2980   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D6E  2002      2981          move.l    D2,D0
00001D70  E388      2982          lsl.l     #1,D0
00001D72  41F9 0803 2983          lea       _BreakPointInstruction.L,A0
00001D76  014E      
00001D78  226E FFFC 2984          move.l    -4(A6),A1
00001D7C  32B0 0800 2985          move.w    0(A0,D0.L),(A1)
                    2986   ; BreakPointInstruction[i] = 0 ;
00001D80  2002      2987          move.l    D2,D0
00001D82  E388      2988          lsl.l     #1,D0
00001D84  41F9 0803 2989          lea       _BreakPointInstruction.L,A0
00001D88  014E      
00001D8A  4270 0800 2990          clr.w     0(A0,D0.L)
                    2991   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001D8E  4879 0000 2992          pea       @m68kde~2_74.L
00001D92  746A      
00001D94  4E92      2993          jsr       (A2)
00001D96  584F      2994          addq.w    #4,A7
00001D98  600A      2995          bra.s     BreakPointClear_6
                    2996   BreakPointClear_5:
                    2997   ; }
                    2998   ; else
                    2999   ; printf("\r\nBreak Point wasn't Set.....") ;
00001D9A  4879 0000 3000          pea       @m68kde~2_75.L
00001D9E  7488      
00001DA0  4E92      3001          jsr       (A2)
00001DA2  584F      3002          addq.w    #4,A7
                    3003   BreakPointClear_6:
                    3004   ; BreakPointDisplay() ;
00001DA4  4EB8 1B30 3005          jsr       _BreakPointDisplay
                    3006   ; return ;
                    3007   BreakPointClear_4:
00001DA8  4CDF 0404 3008          movem.l   (A7)+,D2/A2
00001DAC  4E5E      3009          unlk      A6
00001DAE  4E75      3010          rts
                    3011   ; }
                    3012   ; void WatchPointClear(void)
                    3013   ; {
                    3014   _WatchPointClear:
00001DB0  48E7 2020 3015          movem.l   D2/A2,-(A7)
00001DB4  45F9 0000 3016          lea       _printf.L,A2
00001DB8  63CE      
                    3017   ; unsigned int i ;
                    3018   ; WatchPointDisplay() ;
00001DBA  4EB8 1C2A 3019          jsr       _WatchPointDisplay
                    3020   ; printf("\r\nEnter Watch Point Number: ") ;
00001DBE  4879 0000 3021          pea       @m68kde~2_76.L
00001DC2  74A6      
00001DC4  4E92      3022          jsr       (A2)
00001DC6  584F      3023          addq.w    #4,A7
                    3024   ; i = xtod(_getch()) ;           // get watch pointer number
00001DC8  2F00      3025          move.l    D0,-(A7)
00001DCA  4EB8 0B68 3026          jsr       __getch
00001DCE  2200      3027          move.l    D0,D1
00001DD0  201F      3028          move.l    (A7)+,D0
00001DD2  2F01      3029          move.l    D1,-(A7)
00001DD4  4EB8 0BD2 3030          jsr       _xtod
00001DD8  584F      3031          addq.w    #4,A7
00001DDA  C0BC 0000 3032          and.l     #255,D0
00001DDE  00FF      
00001DE0  2400      3033          move.l    D0,D2
                    3034   ; if((i < 0) || (i > 7))   {
00001DE2  0C82 0000 3035          cmp.l     #0,D2
00001DE6  0000      
00001DE8  6508      3036          blo.s     WatchPointClear_3
00001DEA  0C82 0000 3037          cmp.l     #7,D2
00001DEE  0007      
00001DF0  630E      3038          bls.s     WatchPointClear_1
                    3039   WatchPointClear_3:
                    3040   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001DF2  4879 0000 3041          pea       @m68kde~2_73.L
00001DF6  744E      
00001DF8  4E92      3042          jsr       (A2)
00001DFA  584F      3043          addq.w    #4,A7
                    3044   ; return ;
00001DFC  6000 004E 3045          bra       WatchPointClear_4
                    3046   WatchPointClear_1:
                    3047   ; }
                    3048   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E00  2002      3049          move.l    D2,D0
00001E02  E588      3050          lsl.l     #2,D0
00001E04  41F9 0803 3051          lea       _WatchPointSetOrCleared.L,A0
00001E08  01A2      
00001E0A  2030 0800 3052          move.l    0(A0,D0.L),D0
00001E0E  0C80 0000 3053          cmp.l     #1,D0
00001E12  0001      
00001E14  6628      3054          bne.s     WatchPointClear_5
                    3055   ; WatchPointAddress[i] = 0 ;
00001E16  2002      3056          move.l    D2,D0
00001E18  E588      3057          lsl.l     #2,D0
00001E1A  41F9 0803 3058          lea       _WatchPointAddress.L,A0
00001E1E  0182      
00001E20  42B0 0800 3059          clr.l     0(A0,D0.L)
                    3060   ; WatchPointSetOrCleared[i] = 0 ;
00001E24  2002      3061          move.l    D2,D0
00001E26  E588      3062          lsl.l     #2,D0
00001E28  41F9 0803 3063          lea       _WatchPointSetOrCleared.L,A0
00001E2C  01A2      
00001E2E  42B0 0800 3064          clr.l     0(A0,D0.L)
                    3065   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E32  4879 0000 3066          pea       @m68kde~2_77.L
00001E36  74C4      
00001E38  4E92      3067          jsr       (A2)
00001E3A  584F      3068          addq.w    #4,A7
00001E3C  600A      3069          bra.s     WatchPointClear_6
                    3070   WatchPointClear_5:
                    3071   ; }
                    3072   ; else
                    3073   ; printf("\r\nWatch Point Was not Set.....") ;
00001E3E  4879 0000 3074          pea       @m68kde~2_78.L
00001E42  74E2      
00001E44  4E92      3075          jsr       (A2)
00001E46  584F      3076          addq.w    #4,A7
                    3077   WatchPointClear_6:
                    3078   ; WatchPointDisplay() ;
00001E48  4EB8 1C2A 3079          jsr       _WatchPointDisplay
                    3080   ; return ;
                    3081   WatchPointClear_4:
00001E4C  4CDF 0404 3082          movem.l   (A7)+,D2/A2
00001E50  4E75      3083          rts
                    3084   ; }
                    3085   ; void DisableBreakPoints(void)
                    3086   ; {
                    3087   _DisableBreakPoints:
00001E52  4E56 FFFC 3088          link      A6,#-4
00001E56  2F02      3089          move.l    D2,-(A7)
                    3090   ; int i ;
                    3091   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3092   ; for(i = 0; i < 8; i++)  {
00001E58  4282      3093          clr.l     D2
                    3094   DisableBreakPoints_1:
00001E5A  0C82 0000 3095          cmp.l     #8,D2
00001E5E  0008      
00001E60  6C00 003E 3096          bge       DisableBreakPoints_3
                    3097   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E64  2002      3098          move.l    D2,D0
00001E66  E588      3099          lsl.l     #2,D0
00001E68  41F9 0803 3100          lea       _BreakPointSetOrCleared.L,A0
00001E6C  015E      
00001E6E  2030 0800 3101          move.l    0(A0,D0.L),D0
00001E72  0C80 0000 3102          cmp.l     #1,D0
00001E76  0001      
00001E78  6622      3103          bne.s     DisableBreakPoints_4
                    3104   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E7A  2002      3105          move.l    D2,D0
00001E7C  E588      3106          lsl.l     #2,D0
00001E7E  41F9 0803 3107          lea       _BreakPointAddress.L,A0
00001E82  012E      
00001E84  2D70 0800 3108          move.l    0(A0,D0.L),-4(A6)
00001E88  FFFC      
                    3109   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E8A  2002      3110          move.l    D2,D0
00001E8C  E388      3111          lsl.l     #1,D0
00001E8E  41F9 0803 3112          lea       _BreakPointInstruction.L,A0
00001E92  014E      
00001E94  226E FFFC 3113          move.l    -4(A6),A1
00001E98  32B0 0800 3114          move.w    0(A0,D0.L),(A1)
                    3115   DisableBreakPoints_4:
00001E9C  5282      3116          addq.l    #1,D2
00001E9E  60BA      3117          bra       DisableBreakPoints_1
                    3118   DisableBreakPoints_3:
00001EA0  241F      3119          move.l    (A7)+,D2
00001EA2  4E5E      3120          unlk      A6
00001EA4  4E75      3121          rts
                    3122   ; }
                    3123   ; }
                    3124   ; }
                    3125   ; void EnableBreakPoints(void)
                    3126   ; {
                    3127   _EnableBreakPoints:
00001EA6  4E56 FFFC 3128          link      A6,#-4
00001EAA  2F02      3129          move.l    D2,-(A7)
                    3130   ; int i ;
                    3131   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3132   ; for(i = 0; i < 8; i++)  {
00001EAC  4282      3133          clr.l     D2
                    3134   EnableBreakPoints_1:
00001EAE  0C82 0000 3135          cmp.l     #8,D2
00001EB2  0008      
00001EB4  6C32      3136          bge.s     EnableBreakPoints_3
                    3137   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001EB6  2002      3138          move.l    D2,D0
00001EB8  E588      3139          lsl.l     #2,D0
00001EBA  41F9 0803 3140          lea       _BreakPointSetOrCleared.L,A0
00001EBE  015E      
00001EC0  2030 0800 3141          move.l    0(A0,D0.L),D0
00001EC4  0C80 0000 3142          cmp.l     #1,D0
00001EC8  0001      
00001ECA  6618      3143          bne.s     EnableBreakPoints_4
                    3144   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ECC  2002      3145          move.l    D2,D0
00001ECE  E588      3146          lsl.l     #2,D0
00001ED0  41F9 0803 3147          lea       _BreakPointAddress.L,A0
00001ED4  012E      
00001ED6  2D70 0800 3148          move.l    0(A0,D0.L),-4(A6)
00001EDA  FFFC      
                    3149   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EDC  206E FFFC 3150          move.l    -4(A6),A0
00001EE0  30BC 4E4E 3151          move.w    #20046,(A0)
                    3152   EnableBreakPoints_4:
00001EE4  5282      3153          addq.l    #1,D2
00001EE6  60C6      3154          bra       EnableBreakPoints_1
                    3155   EnableBreakPoints_3:
00001EE8  241F      3156          move.l    (A7)+,D2
00001EEA  4E5E      3157          unlk      A6
00001EEC  4E75      3158          rts
                    3159   ; }
                    3160   ; }
                    3161   ; }
                    3162   ; void KillAllBreakPoints(void)
                    3163   ; {
                    3164   _KillAllBreakPoints:
00001EEE  4E56 FFFC 3165          link      A6,#-4
00001EF2  2F02      3166          move.l    D2,-(A7)
                    3167   ; int i ;
                    3168   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3169   ; for(i = 0; i < 8; i++)  {
00001EF4  4282      3170          clr.l     D2
                    3171   KillAllBreakPoints_1:
00001EF6  0C82 0000 3172          cmp.l     #8,D2
00001EFA  0008      
00001EFC  6C00 0052 3173          bge       KillAllBreakPoints_3
                    3174   ; // clear BP
                    3175   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F00  2002      3176          move.l    D2,D0
00001F02  E588      3177          lsl.l     #2,D0
00001F04  41F9 0803 3178          lea       _BreakPointAddress.L,A0
00001F08  012E      
00001F0A  2D70 0800 3179          move.l    0(A0,D0.L),-4(A6)
00001F0E  FFFC      
                    3180   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F10  2002      3181          move.l    D2,D0
00001F12  E388      3182          lsl.l     #1,D0
00001F14  41F9 0803 3183          lea       _BreakPointInstruction.L,A0
00001F18  014E      
00001F1A  226E FFFC 3184          move.l    -4(A6),A1
00001F1E  32B0 0800 3185          move.w    0(A0,D0.L),(A1)
                    3186   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F22  2002      3187          move.l    D2,D0
00001F24  E588      3188          lsl.l     #2,D0
00001F26  41F9 0803 3189          lea       _BreakPointAddress.L,A0
00001F2A  012E      
00001F2C  42B0 0800 3190          clr.l     0(A0,D0.L)
                    3191   ; BreakPointInstruction[i] = 0 ;
00001F30  2002      3192          move.l    D2,D0
00001F32  E388      3193          lsl.l     #1,D0
00001F34  41F9 0803 3194          lea       _BreakPointInstruction.L,A0
00001F38  014E      
00001F3A  4270 0800 3195          clr.w     0(A0,D0.L)
                    3196   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F3E  2002      3197          move.l    D2,D0
00001F40  E588      3198          lsl.l     #2,D0
00001F42  41F9 0803 3199          lea       _BreakPointSetOrCleared.L,A0
00001F46  015E      
00001F48  42B0 0800 3200          clr.l     0(A0,D0.L)
00001F4C  5282      3201          addq.l    #1,D2
00001F4E  60A6      3202          bra       KillAllBreakPoints_1
                    3203   KillAllBreakPoints_3:
00001F50  241F      3204          move.l    (A7)+,D2
00001F52  4E5E      3205          unlk      A6
00001F54  4E75      3206          rts
                    3207   ; }
                    3208   ; //BreakPointDisplay() ;       // display the break points
                    3209   ; }
                    3210   ; void KillAllWatchPoints(void)
                    3211   ; {
                    3212   _KillAllWatchPoints:
00001F56  2F02      3213          move.l    D2,-(A7)
                    3214   ; int i ;
                    3215   ; for(i = 0; i < 8; i++)  {
00001F58  4282      3216          clr.l     D2
                    3217   KillAllWatchPoints_1:
00001F5A  0C82 0000 3218          cmp.l     #8,D2
00001F5E  0008      
00001F60  6C20      3219          bge.s     KillAllWatchPoints_3
                    3220   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F62  2002      3221          move.l    D2,D0
00001F64  E588      3222          lsl.l     #2,D0
00001F66  41F9 0803 3223          lea       _WatchPointAddress.L,A0
00001F6A  0182      
00001F6C  42B0 0800 3224          clr.l     0(A0,D0.L)
                    3225   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F70  2002      3226          move.l    D2,D0
00001F72  E588      3227          lsl.l     #2,D0
00001F74  41F9 0803 3228          lea       _WatchPointSetOrCleared.L,A0
00001F78  01A2      
00001F7A  42B0 0800 3229          clr.l     0(A0,D0.L)
00001F7E  5282      3230          addq.l    #1,D2
00001F80  60D8      3231          bra       KillAllWatchPoints_1
                    3232   KillAllWatchPoints_3:
00001F82  241F      3233          move.l    (A7)+,D2
00001F84  4E75      3234          rts
                    3235   ; }
                    3236   ; //WatchPointDisplay() ;       // display the break points
                    3237   ; }
                    3238   ; void SetBreakPoint(void)
                    3239   ; {
                    3240   _SetBreakPoint:
00001F86  4E56 FFFC 3241          link      A6,#-4
00001F8A  48E7 3830 3242          movem.l   D2/D3/D4/A2/A3,-(A7)
00001F8E  45F9 0000 3243          lea       _printf.L,A2
00001F92  63CE      
00001F94  47F9 0803 3244          lea       _BreakPointSetOrCleared.L,A3
00001F98  015E      
                    3245   ; int i ;
                    3246   ; int BPNumber;
                    3247   ; int BPAddress;
                    3248   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3249   ; // see if any free break points
                    3250   ; for(i = 0; i < 8; i ++) {
00001F9A  4282      3251          clr.l     D2
                    3252   SetBreakPoint_1:
00001F9C  0C82 0000 3253          cmp.l     #8,D2
00001FA0  0008      
00001FA2  6C10      3254          bge.s     SetBreakPoint_3
                    3255   ; if( BreakPointSetOrCleared[i] == 0)
00001FA4  2002      3256          move.l    D2,D0
00001FA6  E588      3257          lsl.l     #2,D0
00001FA8  2033 0800 3258          move.l    0(A3,D0.L),D0
00001FAC  6602      3259          bne.s     SetBreakPoint_4
                    3260   ; break ;         // if spare BP found allow user to set it
00001FAE  6004      3261          bra.s     SetBreakPoint_3
                    3262   SetBreakPoint_4:
00001FB0  5282      3263          addq.l    #1,D2
00001FB2  60E8      3264          bra       SetBreakPoint_1
                    3265   SetBreakPoint_3:
                    3266   ; }
                    3267   ; if(i == 8) {
00001FB4  0C82 0000 3268          cmp.l     #8,D2
00001FB8  0008      
00001FBA  660E      3269          bne.s     SetBreakPoint_6
                    3270   ; printf("\r\nNo FREE Break Points.....") ;
00001FBC  4879 0000 3271          pea       @m68kde~2_79.L
00001FC0  7502      
00001FC2  4E92      3272          jsr       (A2)
00001FC4  584F      3273          addq.w    #4,A7
                    3274   ; return ;
00001FC6  6000 00EC 3275          bra       SetBreakPoint_15
                    3276   SetBreakPoint_6:
                    3277   ; }
                    3278   ; printf("\r\nBreak Point Address: ") ;
00001FCA  4879 0000 3279          pea       @m68kde~2_80.L
00001FCE  751E      
00001FD0  4E92      3280          jsr       (A2)
00001FD2  584F      3281          addq.w    #4,A7
                    3282   ; BPAddress = Get8HexDigits(0) ;
00001FD4  42A7      3283          clr.l     -(A7)
00001FD6  4EB8 0CA4 3284          jsr       _Get8HexDigits
00001FDA  584F      3285          addq.w    #4,A7
00001FDC  2600      3286          move.l    D0,D3
                    3287   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FDE  2803      3288          move.l    D3,D4
                    3289   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FE0  2003      3290          move.l    D3,D0
00001FE2  C0BC 0000 3291          and.l     #1,D0
00001FE6  0001      
00001FE8  0C80 0000 3292          cmp.l     #1,D0
00001FEC  0001      
00001FEE  660E      3293          bne.s     SetBreakPoint_9
                    3294   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001FF0  4879 0000 3295          pea       @m68kde~2_81.L
00001FF4  7536      
00001FF6  4E92      3296          jsr       (A2)
00001FF8  584F      3297          addq.w    #4,A7
                    3298   ; return ;
00001FFA  6000 00B8 3299          bra       SetBreakPoint_15
                    3300   SetBreakPoint_9:
                    3301   ; }
                    3302   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001FFE  0C83 0000 3303          cmp.l     #32768,D3
00002002  8000      
00002004  640E      3304          bhs.s     SetBreakPoint_11
                    3305   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002006  4879 0000 3306          pea       @m68kde~2_82.L
0000200A  756C      
0000200C  4E92      3307          jsr       (A2)
0000200E  584F      3308          addq.w    #4,A7
                    3309   ; return ;
00002010  6000 00A2 3310          bra       SetBreakPoint_15
                    3311   SetBreakPoint_11:
                    3312   ; }
                    3313   ; // search for first free bp or existing same BP
                    3314   ; for(i = 0; i < 8; i++)  {
00002014  4282      3315          clr.l     D2
                    3316   SetBreakPoint_13:
00002016  0C82 0000 3317          cmp.l     #8,D2
0000201A  0008      
0000201C  6C00 0096 3318          bge       SetBreakPoint_15
                    3319   ; if(BreakPointAddress[i] == BPAddress)   {
00002020  2002      3320          move.l    D2,D0
00002022  E588      3321          lsl.l     #2,D0
00002024  41F9 0803 3322          lea       _BreakPointAddress.L,A0
00002028  012E      
0000202A  B6B0 0800 3323          cmp.l     0(A0,D0.L),D3
0000202E  6610      3324          bne.s     SetBreakPoint_16
                    3325   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002030  2F03      3326          move.l    D3,-(A7)
00002032  4879 0000 3327          pea       @m68kde~2_83.L
00002036  75B4      
00002038  4E92      3328          jsr       (A2)
0000203A  504F      3329          addq.w    #8,A7
                    3330   ; return ;
0000203C  6000 0076 3331          bra       SetBreakPoint_15
                    3332   SetBreakPoint_16:
                    3333   ; }
                    3334   ; if(BreakPointSetOrCleared[i] == 0) {
00002040  2002      3335          move.l    D2,D0
00002042  E588      3336          lsl.l     #2,D0
00002044  2033 0800 3337          move.l    0(A3,D0.L),D0
00002048  6600 0064 3338          bne       SetBreakPoint_18
                    3339   ; // set BP here
                    3340   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000204C  2002      3341          move.l    D2,D0
0000204E  E588      3342          lsl.l     #2,D0
00002050  27BC 0000 3343          move.l    #1,0(A3,D0.L)
00002054  0001 0800 
                    3344   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002058  2044      3345          move.l    D4,A0
0000205A  2002      3346          move.l    D2,D0
0000205C  E388      3347          lsl.l     #1,D0
0000205E  43F9 0803 3348          lea       _BreakPointInstruction.L,A1
00002062  014E      
00002064  3390 0800 3349          move.w    (A0),0(A1,D0.L)
                    3350   ; DisassembleInstruction(ProgramBreakPointAddress) ;
00002068  2F04      3351          move.l    D4,-(A7)
0000206A  4EB9 0000 3352          jsr       _DisassembleInstruction
0000206E  3A50      
00002070  584F      3353          addq.w    #4,A7
                    3354   ; FormatInstructionForTrace() ;
00002072  4EB8 12EA 3355          jsr       _FormatInstructionForTrace
                    3356   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
00002076  4879 0803 3357          pea       _Instruction.L
0000207A  04E2      
0000207C  2F04      3358          move.l    D4,-(A7)
0000207E  4879 0000 3359          pea       @m68kde~2_84.L
00002082  75EC      
00002084  4E92      3360          jsr       (A2)
00002086  DEFC 000C 3361          add.w     #12,A7
                    3362   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000208A  2044      3363          move.l    D4,A0
0000208C  30BC 4E4E 3364          move.w    #20046,(A0)
                    3365   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002090  2002      3366          move.l    D2,D0
00002092  E588      3367          lsl.l     #2,D0
00002094  41F9 0803 3368          lea       _BreakPointAddress.L,A0
00002098  012E      
0000209A  2183 0800 3369          move.l    D3,0(A0,D0.L)
                    3370   ; printf("\r\n") ;
0000209E  4879 0000 3371          pea       @m68kde~2_1.L
000020A2  6D66      
000020A4  4E92      3372          jsr       (A2)
000020A6  584F      3373          addq.w    #4,A7
                    3374   ; BreakPointDisplay() ;       // display the break points
000020A8  4EB8 1B30 3375          jsr       _BreakPointDisplay
                    3376   ; return ;
000020AC  6006      3377          bra.s     SetBreakPoint_15
                    3378   SetBreakPoint_18:
000020AE  5282      3379          addq.l    #1,D2
000020B0  6000 FF64 3380          bra       SetBreakPoint_13
                    3381   SetBreakPoint_15:
000020B4  4CDF 0C1C 3382          movem.l   (A7)+,D2/D3/D4/A2/A3
000020B8  4E5E      3383          unlk      A6
000020BA  4E75      3384          rts
                    3385   ; }
                    3386   ; }
                    3387   ; }
                    3388   ; void SetWatchPoint(void)
                    3389   ; {
                    3390   _SetWatchPoint:
000020BC  4E56 FFF8 3391          link      A6,#-8
000020C0  48E7 3030 3392          movem.l   D2/D3/A2/A3,-(A7)
000020C4  45F9 0000 3393          lea       _printf.L,A2
000020C8  63CE      
000020CA  47F9 0803 3394          lea       _WatchPointSetOrCleared.L,A3
000020CE  01A2      
                    3395   ; int i ;
                    3396   ; int WPNumber;
                    3397   ; int WPAddress;
                    3398   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3399   ; // see if any free break points
                    3400   ; for(i = 0; i < 8; i ++) {
000020D0  4282      3401          clr.l     D2
                    3402   SetWatchPoint_1:
000020D2  0C82 0000 3403          cmp.l     #8,D2
000020D6  0008      
000020D8  6C10      3404          bge.s     SetWatchPoint_3
                    3405   ; if( WatchPointSetOrCleared[i] == 0)
000020DA  2002      3406          move.l    D2,D0
000020DC  E588      3407          lsl.l     #2,D0
000020DE  2033 0800 3408          move.l    0(A3,D0.L),D0
000020E2  6602      3409          bne.s     SetWatchPoint_4
                    3410   ; break ;         // if spare WP found allow user to set it
000020E4  6004      3411          bra.s     SetWatchPoint_3
                    3412   SetWatchPoint_4:
000020E6  5282      3413          addq.l    #1,D2
000020E8  60E8      3414          bra       SetWatchPoint_1
                    3415   SetWatchPoint_3:
                    3416   ; }
                    3417   ; if(i == 8) {
000020EA  0C82 0000 3418          cmp.l     #8,D2
000020EE  0008      
000020F0  660E      3419          bne.s     SetWatchPoint_6
                    3420   ; printf("\r\nNo FREE Watch Points.....") ;
000020F2  4879 0000 3421          pea       @m68kde~2_85.L
000020F6  7624      
000020F8  4E92      3422          jsr       (A2)
000020FA  584F      3423          addq.w    #4,A7
                    3424   ; return ;
000020FC  6000 008C 3425          bra       SetWatchPoint_11
                    3426   SetWatchPoint_6:
                    3427   ; }
                    3428   ; printf("\r\nWatch Point Address: ") ;
00002100  4879 0000 3429          pea       @m68kde~2_86.L
00002104  7640      
00002106  4E92      3430          jsr       (A2)
00002108  584F      3431          addq.w    #4,A7
                    3432   ; WPAddress = Get8HexDigits(0) ;
0000210A  42A7      3433          clr.l     -(A7)
0000210C  4EB8 0CA4 3434          jsr       _Get8HexDigits
00002110  584F      3435          addq.w    #4,A7
00002112  2600      3436          move.l    D0,D3
                    3437   ; // search for first free wp or existing same wp
                    3438   ; for(i = 0; i < 8; i++)  {
00002114  4282      3439          clr.l     D2
                    3440   SetWatchPoint_9:
00002116  0C82 0000 3441          cmp.l     #8,D2
0000211A  0008      
0000211C  6C00 006C 3442          bge       SetWatchPoint_11
                    3443   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002120  2002      3444          move.l    D2,D0
00002122  E588      3445          lsl.l     #2,D0
00002124  41F9 0803 3446          lea       _WatchPointAddress.L,A0
00002128  0182      
0000212A  B6B0 0800 3447          cmp.l     0(A0,D0.L),D3
0000212E  6614      3448          bne.s     SetWatchPoint_12
00002130  4A83      3449          tst.l     D3
00002132  6710      3450          beq.s     SetWatchPoint_12
                    3451   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002134  2F03      3452          move.l    D3,-(A7)
00002136  4879 0000 3453          pea       @m68kde~2_87.L
0000213A  7658      
0000213C  4E92      3454          jsr       (A2)
0000213E  504F      3455          addq.w    #8,A7
                    3456   ; return ;
00002140  6000 0048 3457          bra       SetWatchPoint_11
                    3458   SetWatchPoint_12:
                    3459   ; }
                    3460   ; if(WatchPointSetOrCleared[i] == 0) {
00002144  2002      3461          move.l    D2,D0
00002146  E588      3462          lsl.l     #2,D0
00002148  2033 0800 3463          move.l    0(A3,D0.L),D0
0000214C  6600 0038 3464          bne       SetWatchPoint_14
                    3465   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002150  2002      3466          move.l    D2,D0
00002152  E588      3467          lsl.l     #2,D0
00002154  27BC 0000 3468          move.l    #1,0(A3,D0.L)
00002158  0001 0800 
                    3469   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000215C  2F03      3470          move.l    D3,-(A7)
0000215E  4879 0000 3471          pea       @m68kde~2_88.L
00002162  768E      
00002164  4E92      3472          jsr       (A2)
00002166  504F      3473          addq.w    #8,A7
                    3474   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002168  2002      3475          move.l    D2,D0
0000216A  E588      3476          lsl.l     #2,D0
0000216C  41F9 0803 3477          lea       _WatchPointAddress.L,A0
00002170  0182      
00002172  2183 0800 3478          move.l    D3,0(A0,D0.L)
                    3479   ; printf("\r\n") ;
00002176  4879 0000 3480          pea       @m68kde~2_1.L
0000217A  6D66      
0000217C  4E92      3481          jsr       (A2)
0000217E  584F      3482          addq.w    #4,A7
                    3483   ; WatchPointDisplay() ;       // display the break points
00002180  4EB8 1C2A 3484          jsr       _WatchPointDisplay
                    3485   ; return ;
00002184  6004      3486          bra.s     SetWatchPoint_11
                    3487   SetWatchPoint_14:
00002186  5282      3488          addq.l    #1,D2
00002188  608C      3489          bra       SetWatchPoint_9
                    3490   SetWatchPoint_11:
0000218A  4CDF 0C0C 3491          movem.l   (A7)+,D2/D3/A2/A3
0000218E  4E5E      3492          unlk      A6
00002190  4E75      3493          rts
                    3494   ; }
                    3495   ; }
                    3496   ; }
                    3497   ; void HandleBreakPoint(void)
                    3498   ; {
                    3499   _HandleBreakPoint:
00002192  4E56 FFFC 3500          link      A6,#-4
00002196  48E7 0038 3501          movem.l   A2/A3/A4,-(A7)
0000219A  45F9 0803 3502          lea       _i.L,A2
0000219E  00C4      
000021A0  47F9 0000 3503          lea       _printf.L,A3
000021A4  63CE      
000021A6  49F9 0803 3504          lea       _PC.L,A4
000021AA  0120      
                    3505   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3506   ; // now we have to put the break point back to run the instruction
                    3507   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3508   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021AC  5594      3509          subq.l    #2,(A4)
                    3510   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021AE  4879 0000 3511          pea       @m68kde~2_89.L
000021B2  76B4      
000021B4  4E93      3512          jsr       (A3)
000021B6  584F      3513          addq.w    #4,A7
                    3514   ; printf("\r\nSingle Step : [ON]") ;
000021B8  4879 0000 3515          pea       @m68kde~2_90.L
000021BC  76C8      
000021BE  4E93      3516          jsr       (A3)
000021C0  584F      3517          addq.w    #4,A7
                    3518   ; printf("\r\nBreakPoints : [Enabled]") ;
000021C2  4879 0000 3519          pea       @m68kde~2_91.L
000021C6  76DE      
000021C8  4E93      3520          jsr       (A3)
000021CA  584F      3521          addq.w    #4,A7
                    3522   ; // now clear the break point (put original instruction back)
                    3523   ; ProgramBreakPointAddress = PC ;
000021CC  2D54 FFFC 3524          move.l    (A4),-4(A6)
                    3525   ; for(i = 0; i < 8; i ++) {
000021D0  4292      3526          clr.l     (A2)
                    3527   HandleBreakPoint_1:
000021D2  2012      3528          move.l    (A2),D0
000021D4  0C80 0000 3529          cmp.l     #8,D0
000021D8  0008      
000021DA  6400 0056 3530          bhs       HandleBreakPoint_3
                    3531   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021DE  2012      3532          move.l    (A2),D0
000021E0  E588      3533          lsl.l     #2,D0
000021E2  41F9 0803 3534          lea       _BreakPointAddress.L,A0
000021E6  012E      
000021E8  2230 0800 3535          move.l    0(A0,D0.L),D1
000021EC  B294      3536          cmp.l     (A4),D1
000021EE  6600 003E 3537          bne       HandleBreakPoint_4
                    3538   ; BreakPointAddress[i] = 0 ;
000021F2  2012      3539          move.l    (A2),D0
000021F4  E588      3540          lsl.l     #2,D0
000021F6  41F9 0803 3541          lea       _BreakPointAddress.L,A0
000021FA  012E      
000021FC  42B0 0800 3542          clr.l     0(A0,D0.L)
                    3543   ; BreakPointSetOrCleared[i] = 0 ;
00002200  2012      3544          move.l    (A2),D0
00002202  E588      3545          lsl.l     #2,D0
00002204  41F9 0803 3546          lea       _BreakPointSetOrCleared.L,A0
00002208  015E      
0000220A  42B0 0800 3547          clr.l     0(A0,D0.L)
                    3548   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000220E  2012      3549          move.l    (A2),D0
00002210  E388      3550          lsl.l     #1,D0
00002212  41F9 0803 3551          lea       _BreakPointInstruction.L,A0
00002216  014E      
00002218  226E FFFC 3552          move.l    -4(A6),A1
0000221C  32B0 0800 3553          move.w    0(A0,D0.L),(A1)
                    3554   ; BreakPointInstruction[i] = 0 ;
00002220  2012      3555          move.l    (A2),D0
00002222  E388      3556          lsl.l     #1,D0
00002224  41F9 0803 3557          lea       _BreakPointInstruction.L,A0
00002228  014E      
0000222A  4270 0800 3558          clr.w     0(A0,D0.L)
                    3559   HandleBreakPoint_4:
0000222E  5292      3560          addq.l    #1,(A2)
00002230  60A0      3561          bra       HandleBreakPoint_1
                    3562   HandleBreakPoint_3:
                    3563   ; }
                    3564   ; }
                    3565   ; DumpRegisters() ;
00002232  4EB8 135E 3566          jsr       _DumpRegisters
                    3567   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002236  4879 0000 3568          pea       @m68kde~2_52.L
0000223A  7240      
0000223C  4E93      3569          jsr       (A3)
0000223E  584F      3570          addq.w    #4,A7
                    3571   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002240  4879 0000 3572          pea       @m68kde~2_92.L
00002244  76F8      
00002246  4E93      3573          jsr       (A3)
00002248  584F      3574          addq.w    #4,A7
                    3575   ; menu() ;
0000224A  4EB9 0000 3576          jsr       _menu
0000224E  24A0      
00002250  4CDF 1C00 3577          movem.l   (A7)+,A2/A3/A4
00002254  4E5E      3578          unlk      A6
00002256  4E75      3579          rts
                    3580   ; }
                    3581   ; void UnknownCommand()
                    3582   ; {
                    3583   _UnknownCommand:
                    3584   ; printf("\r\nUnknown Command.....\r\n") ;
00002258  4879 0000 3585          pea       @m68kde~2_93.L
0000225C  7720      
0000225E  4EB9 0000 3586          jsr       _printf
00002262  63CE      
00002264  584F      3587          addq.w    #4,A7
                    3588   ; Help() ;
00002266  4EB9 0000 3589          jsr       _Help
0000226A  23BC      
0000226C  4E75      3590          rts
                    3591   ; }
                    3592   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3593   ; void CallDebugMonitor(void)
                    3594   ; {
                    3595   _CallDebugMonitor:
                    3596   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000226E  4879 0000 3597          pea       @m68kde~2_94.L
00002272  773A      
00002274  4EB9 0000 3598          jsr       _printf
00002278  63CE      
0000227A  584F      3599          addq.w    #4,A7
                    3600   ; menu();
0000227C  4EB9 0000 3601          jsr       _menu
00002280  24A0      
00002282  4E75      3602          rts
                    3603   ; }
                    3604   ; void Breakpoint(void)
                    3605   ; {
                    3606   _Breakpoint:
00002284  2F02      3607          move.l    D2,-(A7)
                    3608   ; char c;
                    3609   ; c = toupper(_getch());
00002286  2F00      3610          move.l    D0,-(A7)
00002288  4EB8 0B68 3611          jsr       __getch
0000228C  2200      3612          move.l    D0,D1
0000228E  201F      3613          move.l    (A7)+,D0
00002290  2F01      3614          move.l    D1,-(A7)
00002292  4EB9 0000 3615          jsr       _toupper
00002296  5AA8      
00002298  584F      3616          addq.w    #4,A7
0000229A  1400      3617          move.b    D0,D2
                    3618   ; if( c == (char)('D'))                                      // BreakPoint Display
0000229C  0C02 0044 3619          cmp.b     #68,D2
000022A0  6608      3620          bne.s     Breakpoint_1
                    3621   ; BreakPointDisplay() ;
000022A2  4EB8 1B30 3622          jsr       _BreakPointDisplay
000022A6  6000 0054 3623          bra       Breakpoint_10
                    3624   Breakpoint_1:
                    3625   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022AA  0C02 004B 3626          cmp.b     #75,D2
000022AE  6630      3627          bne.s     Breakpoint_3
                    3628   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022B0  4879 0000 3629          pea       @m68kde~2_95.L
000022B4  775A      
000022B6  4EB9 0000 3630          jsr       _printf
000022BA  63CE      
000022BC  584F      3631          addq.w    #4,A7
                    3632   ; c = toupper(_getch());
000022BE  2F00      3633          move.l    D0,-(A7)
000022C0  4EB8 0B68 3634          jsr       __getch
000022C4  2200      3635          move.l    D0,D1
000022C6  201F      3636          move.l    (A7)+,D0
000022C8  2F01      3637          move.l    D1,-(A7)
000022CA  4EB9 0000 3638          jsr       _toupper
000022CE  5AA8      
000022D0  584F      3639          addq.w    #4,A7
000022D2  1400      3640          move.b    D0,D2
                    3641   ; if(c == (char)('Y'))
000022D4  0C02 0059 3642          cmp.b     #89,D2
000022D8  6604      3643          bne.s     Breakpoint_5
                    3644   ; KillAllBreakPoints() ;
000022DA  4EB8 1EEE 3645          jsr       _KillAllBreakPoints
                    3646   Breakpoint_5:
000022DE  601C      3647          bra.s     Breakpoint_10
                    3648   Breakpoint_3:
                    3649   ; }
                    3650   ; else if(c == (char)('S')) {
000022E0  0C02 0053 3651          cmp.b     #83,D2
000022E4  6606      3652          bne.s     Breakpoint_7
                    3653   ; SetBreakPoint() ;
000022E6  4EB8 1F86 3654          jsr       _SetBreakPoint
000022EA  6010      3655          bra.s     Breakpoint_10
                    3656   Breakpoint_7:
                    3657   ; }
                    3658   ; else if(c == (char)('C')) {
000022EC  0C02 0043 3659          cmp.b     #67,D2
000022F0  6606      3660          bne.s     Breakpoint_9
                    3661   ; BreakPointClear() ;
000022F2  4EB8 1CD6 3662          jsr       _BreakPointClear
000022F6  6004      3663          bra.s     Breakpoint_10
                    3664   Breakpoint_9:
                    3665   ; }
                    3666   ; else
                    3667   ; UnknownCommand() ;
000022F8  4EB8 2258 3668          jsr       _UnknownCommand
                    3669   Breakpoint_10:
000022FC  241F      3670          move.l    (A7)+,D2
000022FE  4E75      3671          rts
                    3672   ; }
                    3673   ; void Watchpoint(void)
                    3674   ; {
                    3675   _Watchpoint:
00002300  2F02      3676          move.l    D2,-(A7)
                    3677   ; char c;
                    3678   ; c = toupper(_getch());
00002302  2F00      3679          move.l    D0,-(A7)
00002304  4EB8 0B68 3680          jsr       __getch
00002308  2200      3681          move.l    D0,D1
0000230A  201F      3682          move.l    (A7)+,D0
0000230C  2F01      3683          move.l    D1,-(A7)
0000230E  4EB9 0000 3684          jsr       _toupper
00002312  5AA8      
00002314  584F      3685          addq.w    #4,A7
00002316  1400      3686          move.b    D0,D2
                    3687   ; if( c == (char)('D'))                                      // WatchPoint Display
00002318  0C02 0044 3688          cmp.b     #68,D2
0000231C  6608      3689          bne.s     Watchpoint_1
                    3690   ; WatchPointDisplay() ;
0000231E  4EB8 1C2A 3691          jsr       _WatchPointDisplay
00002322  6000 0054 3692          bra       Watchpoint_10
                    3693   Watchpoint_1:
                    3694   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002326  0C02 004B 3695          cmp.b     #75,D2
0000232A  6630      3696          bne.s     Watchpoint_3
                    3697   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000232C  4879 0000 3698          pea       @m68kde~2_96.L
00002330  777C      
00002332  4EB9 0000 3699          jsr       _printf
00002336  63CE      
00002338  584F      3700          addq.w    #4,A7
                    3701   ; c = toupper(_getch());
0000233A  2F00      3702          move.l    D0,-(A7)
0000233C  4EB8 0B68 3703          jsr       __getch
00002340  2200      3704          move.l    D0,D1
00002342  201F      3705          move.l    (A7)+,D0
00002344  2F01      3706          move.l    D1,-(A7)
00002346  4EB9 0000 3707          jsr       _toupper
0000234A  5AA8      
0000234C  584F      3708          addq.w    #4,A7
0000234E  1400      3709          move.b    D0,D2
                    3710   ; if(c == (char)('Y'))
00002350  0C02 0059 3711          cmp.b     #89,D2
00002354  6604      3712          bne.s     Watchpoint_5
                    3713   ; KillAllWatchPoints() ;
00002356  4EB8 1F56 3714          jsr       _KillAllWatchPoints
                    3715   Watchpoint_5:
0000235A  601C      3716          bra.s     Watchpoint_10
                    3717   Watchpoint_3:
                    3718   ; }
                    3719   ; else if(c == (char)('S')) {
0000235C  0C02 0053 3720          cmp.b     #83,D2
00002360  6606      3721          bne.s     Watchpoint_7
                    3722   ; SetWatchPoint() ;
00002362  4EB8 20BC 3723          jsr       _SetWatchPoint
00002366  6010      3724          bra.s     Watchpoint_10
                    3725   Watchpoint_7:
                    3726   ; }
                    3727   ; else if(c == (char)('C')) {
00002368  0C02 0043 3728          cmp.b     #67,D2
0000236C  6606      3729          bne.s     Watchpoint_9
                    3730   ; WatchPointClear() ;
0000236E  4EB8 1DB0 3731          jsr       _WatchPointClear
00002372  6004      3732          bra.s     Watchpoint_10
                    3733   Watchpoint_9:
                    3734   ; }
                    3735   ; else
                    3736   ; UnknownCommand() ;
00002374  4EB8 2258 3737          jsr       _UnknownCommand
                    3738   Watchpoint_10:
00002378  241F      3739          move.l    (A7)+,D2
0000237A  4E75      3740          rts
                    3741   ; }
                    3742   ; void DMenu(void)
                    3743   ; {
                    3744   _DMenu:
0000237C  2F02      3745          move.l    D2,-(A7)
                    3746   ; char c;
                    3747   ; c = toupper(_getch());
0000237E  2F00      3748          move.l    D0,-(A7)
00002380  4EB8 0B68 3749          jsr       __getch
00002384  2200      3750          move.l    D0,D1
00002386  201F      3751          move.l    (A7)+,D0
00002388  2F01      3752          move.l    D1,-(A7)
0000238A  4EB9 0000 3753          jsr       _toupper
0000238E  5AA8      
00002390  584F      3754          addq.w    #4,A7
00002392  1400      3755          move.b    D0,D2
                    3756   ; if( c == (char)('U'))                                     // Dump Memory
00002394  0C02 0055 3757          cmp.b     #85,D2
00002398  6606      3758          bne.s     DMenu_1
                    3759   ; DumpMemory() ;
0000239A  4EB8 0EE0 3760          jsr       _DumpMemory
0000239E  6018      3761          bra.s     DMenu_4
                    3762   DMenu_1:
                    3763   ; else if(c == (char)('I'))   {
000023A0  0C02 0049 3764          cmp.b     #73,D2
000023A4  660E      3765          bne.s     DMenu_3
                    3766   ; DisableBreakPoints() ;
000023A6  4EB8 1E52 3767          jsr       _DisableBreakPoints
                    3768   ; DisassembleProgram() ;
000023AA  4EB8 0D00 3769          jsr       _DisassembleProgram
                    3770   ; EnableBreakPoints() ;
000023AE  4EB8 1EA6 3771          jsr       _EnableBreakPoints
000023B2  6004      3772          bra.s     DMenu_4
                    3773   DMenu_3:
                    3774   ; }
                    3775   ; else
                    3776   ; UnknownCommand() ;
000023B4  4EB8 2258 3777          jsr       _UnknownCommand
                    3778   DMenu_4:
000023B8  241F      3779          move.l    (A7)+,D2
000023BA  4E75      3780          rts
                    3781   ; }
                    3782   ; void Help(void)
                    3783   ; {
                    3784   _Help:
000023BC  48E7 2020 3785          movem.l   D2/A2,-(A7)
000023C0  45F9 0000 3786          lea       _printf.L,A2
000023C4  63CE      
                    3787   ; char *banner = "\r\n----------------------------------------------------------------" ;
000023C6  41F9 0000 3788          lea       @m68kde~2_97.L,A0
000023CA  779E      
000023CC  2408      3789          move.l    A0,D2
                    3790   ; printf(banner) ;
000023CE  2F02      3791          move.l    D2,-(A7)
000023D0  4E92      3792          jsr       (A2)
000023D2  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\n  Debugger Command Summary") ;
000023D4  4879 0000 3795          pea       @m68kde~2_98.L
000023D8  77E2      
000023DA  4E92      3796          jsr       (A2)
000023DC  584F      3797          addq.w    #4,A7
                    3798   ; printf(banner) ;
000023DE  2F02      3799          move.l    D2,-(A7)
000023E0  4E92      3800          jsr       (A2)
000023E2  584F      3801          addq.w    #4,A7
                    3802   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023E4  4879 0000 3803          pea       @m68kde~2_99.L
000023E8  7800      
000023EA  4E92      3804          jsr       (A2)
000023EC  584F      3805          addq.w    #4,A7
                    3806   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000023EE  4879 0000 3807          pea       @m68kde~2_100.L
000023F2  7844      
000023F4  4E92      3808          jsr       (A2)
000023F6  584F      3809          addq.w    #4,A7
                    3810   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000023F8  4879 0000 3811          pea       @m68kde~2_101.L
000023FC  787C      
000023FE  4E92      3812          jsr       (A2)
00002400  584F      3813          addq.w    #4,A7
                    3814   ; printf("\r\n  DI           - Disassemble Program");
00002402  4879 0000 3815          pea       @m68kde~2_102.L
00002406  78B6      
00002408  4E92      3816          jsr       (A2)
0000240A  584F      3817          addq.w    #4,A7
                    3818   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
0000240C  4879 0000 3819          pea       @m68kde~2_103.L
00002410  78DE      
00002412  4E92      3820          jsr       (A2)
00002414  584F      3821          addq.w    #4,A7
                    3822   ; printf("\r\n  E            - Enter String into Memory") ;
00002416  4879 0000 3823          pea       @m68kde~2_104.L
0000241A  7910      
0000241C  4E92      3824          jsr       (A2)
0000241E  584F      3825          addq.w    #4,A7
                    3826   ; printf("\r\n  F            - Fill Memory with Data") ;
00002420  4879 0000 3827          pea       @m68kde~2_105.L
00002424  793C      
00002426  4E92      3828          jsr       (A2)
00002428  584F      3829          addq.w    #4,A7
                    3830   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000242A  2F39 0803 3831          move.l    _PC.L,-(A7)
0000242E  0120      
00002430  4879 0000 3832          pea       @m68kde~2_106.L
00002434  7966      
00002436  4E92      3833          jsr       (A2)
00002438  504F      3834          addq.w    #8,A7
                    3835   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000243A  4879 0000 3836          pea       @m68kde~2_107.L
0000243E  79A0      
00002440  4E92      3837          jsr       (A2)
00002442  584F      3838          addq.w    #4,A7
                    3839   ; printf("\r\n  M            - Memory Examine and Change");
00002444  4879 0000 3840          pea       @m68kde~2_108.L
00002448  79D8      
0000244A  4E92      3841          jsr       (A2)
0000244C  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000244E  4879 0000 3844          pea       @m68kde~2_109.L
00002452  7A06      
00002454  4E92      3845          jsr       (A2)
00002456  584F      3846          addq.w    #4,A7
                    3847   ; printf("\r\n  R            - Display 68000 Registers") ;
00002458  4879 0000 3848          pea       @m68kde~2_110.L
0000245C  7A40      
0000245E  4E92      3849          jsr       (A2)
00002460  584F      3850          addq.w    #4,A7
                    3851   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002462  4879 0000 3852          pea       @m68kde~2_111.L
00002466  7A6C      
00002468  4E92      3853          jsr       (A2)
0000246A  584F      3854          addq.w    #4,A7
                    3855   ; printf("\r\n  TM           - Test Memory") ;
0000246C  4879 0000 3856          pea       @m68kde~2_112.L
00002470  7A9E      
00002472  4E92      3857          jsr       (A2)
00002474  584F      3858          addq.w    #4,A7
                    3859   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002476  4879 0000 3860          pea       @m68kde~2_113.L
0000247A  7ABE      
0000247C  4E92      3861          jsr       (A2)
0000247E  584F      3862          addq.w    #4,A7
                    3863   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002480  4879 0000 3864          pea       @m68kde~2_114.L
00002484  7AE6      
00002486  4E92      3865          jsr       (A2)
00002488  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000248A  4879 0000 3868          pea       @m68kde~2_115.L
0000248E  7B1C      
00002490  4E92      3869          jsr       (A2)
00002492  584F      3870          addq.w    #4,A7
                    3871   ; printf(banner) ;
00002494  2F02      3872          move.l    D2,-(A7)
00002496  4E92      3873          jsr       (A2)
00002498  584F      3874          addq.w    #4,A7
0000249A  4CDF 0404 3875          movem.l   (A7)+,D2/A2
0000249E  4E75      3876          rts
                    3877   ; }
                    3878   ; void menu(void)
                    3879   ; {
                    3880   _menu:
000024A0  48E7 303C 3881          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000024A4  45F9 0000 3882          lea       _printf.L,A2
000024A8  63CE      
000024AA  47F9 0803 3883          lea       _Trace.L,A3
000024AE  00D8      
000024B0  49F9 0803 3884          lea       _x.L,A4
000024B4  00C8      
000024B6  4BF9 0803 3885          lea       _SR.L,A5
000024BA  012C      
                    3886   ; char c,c1 ;
                    3887   ; while(1)    {
                    3888   menu_1:
                    3889   ; FlushKeyboard() ;               // dump unread characters from keyboard
000024BC  4EB8 0BA6 3890          jsr       _FlushKeyboard
                    3891   ; printf("\r\n#") ;
000024C0  4879 0000 3892          pea       @m68kde~2_116.L
000024C4  7B54      
000024C6  4E92      3893          jsr       (A2)
000024C8  584F      3894          addq.w    #4,A7
                    3895   ; c = toupper(_getch());
000024CA  2F00      3896          move.l    D0,-(A7)
000024CC  4EB8 0B68 3897          jsr       __getch
000024D0  2200      3898          move.l    D0,D1
000024D2  201F      3899          move.l    (A7)+,D0
000024D4  2F01      3900          move.l    D1,-(A7)
000024D6  4EB9 0000 3901          jsr       _toupper
000024DA  5AA8      
000024DC  584F      3902          addq.w    #4,A7
000024DE  1400      3903          move.b    D0,D2
                    3904   ; if( c == (char)('L'))                  // load s record file
000024E0  0C02 004C 3905          cmp.b     #76,D2
000024E4  6608      3906          bne.s     menu_4
                    3907   ; Load_SRecordFile() ;
000024E6  4EB8 104A 3908          jsr       _Load_SRecordFile
000024EA  6000 021E 3909          bra       menu_46
                    3910   menu_4:
                    3911   ; else if( c == (char)('D'))             // dump memory
000024EE  0C02 0044 3912          cmp.b     #68,D2
000024F2  6608      3913          bne.s     menu_6
                    3914   ; DMenu() ;
000024F4  4EB8 237C 3915          jsr       _DMenu
000024F8  6000 0210 3916          bra       menu_46
                    3917   menu_6:
                    3918   ; else if( c == (char)('E'))             // Enter String into memory
000024FC  0C02 0045 3919          cmp.b     #69,D2
00002500  660A      3920          bne.s     menu_8
                    3921   ; EnterString() ;
00002502  4EB9 0000 3922          jsr       _EnterString
00002506  2852      
00002508  6000 0200 3923          bra       menu_46
                    3924   menu_8:
                    3925   ; else if( c == (char)('F'))             // fill memory
0000250C  0C02 0046 3926          cmp.b     #70,D2
00002510  6608      3927          bne.s     menu_10
                    3928   ; FillMemory() ;
00002512  4EB8 0FD0 3929          jsr       _FillMemory
00002516  6000 01F2 3930          bra       menu_46
                    3931   menu_10:
                    3932   ; else if( c == (char)('G'))  {           // go user program
0000251A  0C02 0047 3933          cmp.b     #71,D2
0000251E  6626      3934          bne.s     menu_12
                    3935   ; printf("\r\nProgram Running.....") ;
00002520  4879 0000 3936          pea       @m68kde~2_117.L
00002524  7B58      
00002526  4E92      3937          jsr       (A2)
00002528  584F      3938          addq.w    #4,A7
                    3939   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000252A  4879 0000 3940          pea       @m68kde~2_118.L
0000252E  7B70      
00002530  4E92      3941          jsr       (A2)
00002532  584F      3942          addq.w    #4,A7
                    3943   ; GoFlag = 1 ;
00002534  23FC 0000 3944          move.l    #1,_GoFlag.L
00002538  0001 0803 
0000253C  00DC      
                    3945   ; go() ;
0000253E  4EB8 08B8 3946          jsr       _go
00002542  6000 01C6 3947          bra       menu_46
                    3948   menu_12:
                    3949   ; }
                    3950   ; else if( c == (char)('M'))           // memory examine and modify
00002546  0C02 004D 3951          cmp.b     #77,D2
0000254A  6608      3952          bne.s     menu_14
                    3953   ; MemoryChange() ;
0000254C  4EB8 11D8 3954          jsr       _MemoryChange
00002550  6000 01B8 3955          bra       menu_46
                    3956   menu_14:
                    3957   ; else if( c == (char)('P'))            // Program Flash Chip
00002554  0C02 0050 3958          cmp.b     #80,D2
00002558  6608      3959          bne.s     menu_16
                    3960   ; ProgramFlashChip() ;
0000255A  4EB8 12D8 3961          jsr       _ProgramFlashChip
0000255E  6000 01AA 3962          bra       menu_46
                    3963   menu_16:
                    3964   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002562  0C02 0043 3965          cmp.b     #67,D2
00002566  6608      3966          bne.s     menu_18
                    3967   ; LoadFromFlashChip();
00002568  4EB8 12DA 3968          jsr       _LoadFromFlashChip
0000256C  6000 019C 3969          bra       menu_46
                    3970   menu_18:
                    3971   ; else if( c == (char)('R'))             // dump registers
00002570  0C02 0052 3972          cmp.b     #82,D2
00002574  6608      3973          bne.s     menu_20
                    3974   ; DumpRegisters() ;
00002576  4EB8 135E 3975          jsr       _DumpRegisters
0000257A  6000 018E 3976          bra       menu_46
                    3977   menu_20:
                    3978   ; else if( c == (char)('.'))           // change registers
0000257E  0C02 002E 3979          cmp.b     #46,D2
00002582  6608      3980          bne.s     menu_22
                    3981   ; ChangeRegisters() ;
00002584  4EB8 1874 3982          jsr       _ChangeRegisters
00002588  6000 0180 3983          bra       menu_46
                    3984   menu_22:
                    3985   ; else if( c == (char)('B'))              // breakpoint command
0000258C  0C02 0042 3986          cmp.b     #66,D2
00002590  6608      3987          bne.s     menu_24
                    3988   ; Breakpoint() ;
00002592  4EB8 2284 3989          jsr       _Breakpoint
00002596  6000 0172 3990          bra       menu_46
                    3991   menu_24:
                    3992   ; else if( c == (char)('T'))  {          // Test command
0000259A  0C02 0054 3993          cmp.b     #84,D2
0000259E  6600 0046 3994          bne       menu_26
                    3995   ; c1 = toupper(_getch()) ;
000025A2  2F00      3996          move.l    D0,-(A7)
000025A4  4EB8 0B68 3997          jsr       __getch
000025A8  2200      3998          move.l    D0,D1
000025AA  201F      3999          move.l    (A7)+,D0
000025AC  2F01      4000          move.l    D1,-(A7)
000025AE  4EB9 0000 4001          jsr       _toupper
000025B2  5AA8      
000025B4  584F      4002          addq.w    #4,A7
000025B6  1600      4003          move.b    D0,D3
                    4004   ; if(c1 == (char)('M'))                    // memory test
000025B8  0C03 004D 4005          cmp.b     #77,D3
000025BC  6608      4006          bne.s     menu_28
                    4007   ; MemoryTest() ;
000025BE  4EB9 0000 4008          jsr       _MemoryTest
000025C2  28A2      
000025C4  601C      4009          bra.s     menu_33
                    4010   menu_28:
                    4011   ; else if( c1 == (char)('S'))              // Switch Test command
000025C6  0C03 0053 4012          cmp.b     #83,D3
000025CA  6606      4013          bne.s     menu_30
                    4014   ; SwitchTest() ;
000025CC  4EB8 0AA4 4015          jsr       _SwitchTest
000025D0  6010      4016          bra.s     menu_33
                    4017   menu_30:
                    4018   ; else if( c1 == (char)('D'))              // display Test command
000025D2  0C03 0044 4019          cmp.b     #68,D3
000025D6  6606      4020          bne.s     menu_32
                    4021   ; TestLEDS() ;
000025D8  4EB8 0A50 4022          jsr       _TestLEDS
000025DC  6004      4023          bra.s     menu_33
                    4024   menu_32:
                    4025   ; else
                    4026   ; UnknownCommand() ;
000025DE  4EB8 2258 4027          jsr       _UnknownCommand
                    4028   menu_33:
000025E2  6000 0126 4029          bra       menu_46
                    4030   menu_26:
                    4031   ; }
                    4032   ; else if( c == (char)(' ')) {             // Next instruction command
000025E6  0C02 0020 4033          cmp.b     #32,D2
000025EA  6636      4034          bne.s     menu_34
                    4035   ; DisableBreakPoints() ;
000025EC  4EB8 1E52 4036          jsr       _DisableBreakPoints
                    4037   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000025F0  2013      4038          move.l    (A3),D0
000025F2  0C80 0000 4039          cmp.l     #1,D0
000025F6  0001      
000025F8  661A      4040          bne.s     menu_36
000025FA  2039 0803 4041          move.l    _GoFlag.L,D0
000025FE  00DC      
00002600  0C80 0000 4042          cmp.l     #1,D0
00002604  0001      
00002606  660C      4043          bne.s     menu_36
                    4044   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002608  13FC 0001 4045          move.b    #1,4194314
0000260C  0040 000A 
                    4046   ; return ;
00002610  6000 00FC 4047          bra       menu_38
                    4048   menu_36:
                    4049   ; }
                    4050   ; else
                    4051   ; printf("\r\nError: Press 'G' first to start program") ;
00002614  4879 0000 4052          pea       @m68kde~2_119.L
00002618  7B9E      
0000261A  4E92      4053          jsr       (A2)
0000261C  584F      4054          addq.w    #4,A7
0000261E  6000 00EA 4055          bra       menu_46
                    4056   menu_34:
                    4057   ; }
                    4058   ; else if( c == (char)('S')) {             // single step
00002622  0C02 0053 4059          cmp.b     #83,D2
00002626  6600 008C 4060          bne       menu_39
                    4061   ; if(Trace == 0) {
0000262A  2013      4062          move.l    (A3),D0
0000262C  6600 0050 4063          bne       menu_41
                    4064   ; DisableBreakPoints() ;
00002630  4EB8 1E52 4065          jsr       _DisableBreakPoints
                    4066   ; printf("\r\nSingle Step  :[ON]") ;
00002634  4879 0000 4067          pea       @m68kde~2_120.L
00002638  7BC8      
0000263A  4E92      4068          jsr       (A2)
0000263C  584F      4069          addq.w    #4,A7
                    4070   ; printf("\r\nBreak Points :[Disabled]") ;
0000263E  4879 0000 4071          pea       @m68kde~2_51.L
00002642  7224      
00002644  4E92      4072          jsr       (A2)
00002646  584F      4073          addq.w    #4,A7
                    4074   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002648  0055 8000 4075          or.w      #32768,(A5)
                    4076   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000264C  2F39 0803 4077          move.l    _PC.L,-(A7)
00002650  0120      
00002652  4879 0000 4078          pea       @m68kde~2_121.L
00002656  7BDE      
00002658  4E92      4079          jsr       (A2)
0000265A  504F      4080          addq.w    #8,A7
                    4081   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000265C  4879 0000 4082          pea       @m68kde~2_122.L
00002660  7C12      
00002662  4E92      4083          jsr       (A2)
00002664  584F      4084          addq.w    #4,A7
                    4085   ; DumpRegisters() ;
00002666  4EB8 135E 4086          jsr       _DumpRegisters
                    4087   ; Trace = 1;
0000266A  26BC 0000 4088          move.l    #1,(A3)
0000266E  0001      
                    4089   ; TraceException = 1;
00002670  13FC 0001 4090          move.b    #1,4194314
00002674  0040 000A 
                    4091   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002678  28B8 0074 4092          move.l    116,(A4)
0000267C  6032      4093          bra.s     menu_42
                    4094   menu_41:
                    4095   ; }
                    4096   ; else {
                    4097   ; Trace = 0 ;
0000267E  4293      4098          clr.l     (A3)
                    4099   ; TraceException = 0 ;
00002680  4239 0040 4100          clr.b     4194314
00002684  000A      
                    4101   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002686  28B8 0074 4102          move.l    116,(A4)
                    4103   ; EnableBreakPoints() ;
0000268A  4EB8 1EA6 4104          jsr       _EnableBreakPoints
                    4105   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000268E  0255 7FFF 4106          and.w     #32767,(A5)
                    4107   ; printf("\r\nSingle Step : [OFF]") ;
00002692  4879 0000 4108          pea       @m68kde~2_123.L
00002696  7C36      
00002698  4E92      4109          jsr       (A2)
0000269A  584F      4110          addq.w    #4,A7
                    4111   ; printf("\r\nBreak Points :[Enabled]") ;
0000269C  4879 0000 4112          pea       @m68kde~2_124.L
000026A0  7C4C      
000026A2  4E92      4113          jsr       (A2)
000026A4  584F      4114          addq.w    #4,A7
                    4115   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000026A6  4879 0000 4116          pea       @m68kde~2_125.L
000026AA  7C66      
000026AC  4E92      4117          jsr       (A2)
000026AE  584F      4118          addq.w    #4,A7
                    4119   menu_42:
000026B0  6000 0058 4120          bra       menu_46
                    4121   menu_39:
                    4122   ; }
                    4123   ; }
                    4124   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000026B4  0C02 001B 4125          cmp.b     #27,D2
000026B8  6600 0040 4126          bne       menu_43
                    4127   ; Trace = 0;
000026BC  4293      4128          clr.l     (A3)
                    4129   ; TraceException = 0;
000026BE  4239 0040 4130          clr.b     4194314
000026C2  000A      
                    4131   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000026C4  28B8 0074 4132          move.l    116,(A4)
                    4133   ; EnableBreakPoints() ;
000026C8  4EB8 1EA6 4134          jsr       _EnableBreakPoints
                    4135   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026CC  0255 7FFF 4136          and.w     #32767,(A5)
                    4137   ; printf("\r\nSingle Step  :[OFF]") ;
000026D0  4879 0000 4138          pea       @m68kde~2_126.L
000026D4  7C90      
000026D6  4E92      4139          jsr       (A2)
000026D8  584F      4140          addq.w    #4,A7
                    4141   ; printf("\r\nBreak Points :[Enabled]");
000026DA  4879 0000 4142          pea       @m68kde~2_124.L
000026DE  7C4C      
000026E0  4E92      4143          jsr       (A2)
000026E2  584F      4144          addq.w    #4,A7
                    4145   ; printf("\r\nProgram Running.....") ;
000026E4  4879 0000 4146          pea       @m68kde~2_117.L
000026E8  7B58      
000026EA  4E92      4147          jsr       (A2)
000026EC  584F      4148          addq.w    #4,A7
                    4149   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000026EE  4879 0000 4150          pea       @m68kde~2_118.L
000026F2  7B70      
000026F4  4E92      4151          jsr       (A2)
000026F6  584F      4152          addq.w    #4,A7
                    4153   ; return ;
000026F8  6014      4154          bra.s     menu_38
                    4155   menu_43:
                    4156   ; }
                    4157   ; else if( c == (char)('W'))              // Watchpoint command
000026FA  0C02 0057 4158          cmp.b     #87,D2
000026FE  6606      4159          bne.s     menu_45
                    4160   ; Watchpoint() ;
00002700  4EB8 2300 4161          jsr       _Watchpoint
00002704  6004      4162          bra.s     menu_46
                    4163   menu_45:
                    4164   ; else
                    4165   ; UnknownCommand() ;
00002706  4EB8 2258 4166          jsr       _UnknownCommand
                    4167   menu_46:
0000270A  6000 FDB0 4168          bra       menu_1
                    4169   menu_38:
0000270E  4CDF 3C0C 4170          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002712  4E75      4171          rts
                    4172   ; }
                    4173   ; }
                    4174   ; void PrintErrorMessageandAbort(char *string) {
                    4175   _PrintErrorMessageandAbort:
00002714  4E56 0000 4176          link      A6,#0
                    4177   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002718  4879 0000 4178          pea       @m68kde~2_127.L
0000271C  7CA6      
0000271E  4EB9 0000 4179          jsr       _printf
00002722  63CE      
00002724  584F      4180          addq.w    #4,A7
                    4181   ; printf("%s\r\n", string) ;
00002726  2F2E 0008 4182          move.l    8(A6),-(A7)
0000272A  4879 0000 4183          pea       @m68kde~2_128.L
0000272E  7CC2      
00002730  4EB9 0000 4184          jsr       _printf
00002734  63CE      
00002736  504F      4185          addq.w    #8,A7
                    4186   ; menu() ;
00002738  4EB8 24A0 4187          jsr       _menu
0000273C  4E5E      4188          unlk      A6
0000273E  4E75      4189          rts
                    4190   ; }
                    4191   ; void IRQMessage(int level) {
                    4192   _IRQMessage:
00002740  4E56 0000 4193          link      A6,#0
                    4194   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002744  4879 0000 4195          pea       @m68kde~2_129.L
00002748  7CC8      
0000274A  4EB9 0000 4196          jsr       _printf
0000274E  63CE      
00002750  584F      4197          addq.w    #4,A7
                    4198   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002752  2F2E 0008 4199          move.l    8(A6),-(A7)
00002756  4879 0000 4200          pea       @m68kde~2_130.L
0000275A  7CE0      
0000275C  4EB9 0000 4201          jsr       _printf
00002760  63CE      
00002762  504F      4202          addq.w    #8,A7
                    4203   ; menu() ;
00002764  4EB8 24A0 4204          jsr       _menu
00002768  4E5E      4205          unlk      A6
0000276A  4E75      4206          rts
                    4207   ; }
                    4208   ; void UnhandledIRQ1(void) {
                    4209   _UnhandledIRQ1:
                    4210   ; IRQMessage(1);
0000276C  4878 0001 4211          pea       1
00002770  4EB8 2740 4212          jsr       _IRQMessage
00002774  584F      4213          addq.w    #4,A7
00002776  4E75      4214          rts
                    4215   ; }
                    4216   ; void UnhandledIRQ2(void) {
                    4217   _UnhandledIRQ2:
                    4218   ; IRQMessage(2);
00002778  4878 0002 4219          pea       2
0000277C  4EB8 2740 4220          jsr       _IRQMessage
00002780  584F      4221          addq.w    #4,A7
00002782  4E75      4222          rts
                    4223   ; }
                    4224   ; void UnhandledIRQ3(void){
                    4225   _UnhandledIRQ3:
                    4226   ; IRQMessage(3);
00002784  4878 0003 4227          pea       3
00002788  4EB8 2740 4228          jsr       _IRQMessage
0000278C  584F      4229          addq.w    #4,A7
0000278E  4E75      4230          rts
                    4231   ; }
                    4232   ; void UnhandledIRQ4(void) {
                    4233   _UnhandledIRQ4:
                    4234   ; IRQMessage(4);
00002790  4878 0004 4235          pea       4
00002794  4EB8 2740 4236          jsr       _IRQMessage
00002798  584F      4237          addq.w    #4,A7
0000279A  4E75      4238          rts
                    4239   ; }
                    4240   ; void UnhandledIRQ5(void) {
                    4241   _UnhandledIRQ5:
                    4242   ; IRQMessage(5);
0000279C  4878 0005 4243          pea       5
000027A0  4EB8 2740 4244          jsr       _IRQMessage
000027A4  584F      4245          addq.w    #4,A7
000027A6  4E75      4246          rts
                    4247   ; }
                    4248   ; void UnhandledIRQ6(void) {
                    4249   _UnhandledIRQ6:
                    4250   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000027A8  4879 0000 4251          pea       @m68kde~2_131.L
000027AC  7D04      
000027AE  4EB8 2714 4252          jsr       _PrintErrorMessageandAbort
000027B2  584F      4253          addq.w    #4,A7
                    4254   ; menu() ;
000027B4  4EB8 24A0 4255          jsr       _menu
000027B8  4E75      4256          rts
                    4257   ; }
                    4258   ; void UnhandledIRQ7(void) {
                    4259   _UnhandledIRQ7:
                    4260   ; IRQMessage(7);
000027BA  4878 0007 4261          pea       7
000027BE  4EB8 2740 4262          jsr       _IRQMessage
000027C2  584F      4263          addq.w    #4,A7
000027C4  4E75      4264          rts
                    4265   ; }
                    4266   ; void UnhandledTrap(void) {
                    4267   _UnhandledTrap:
                    4268   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000027C6  4879 0000 4269          pea       @m68kde~2_132.L
000027CA  7D44      
000027CC  4EB8 2714 4270          jsr       _PrintErrorMessageandAbort
000027D0  584F      4271          addq.w    #4,A7
000027D2  4E75      4272          rts
                    4273   ; }
                    4274   ; void BusError() {
                    4275   _BusError:
                    4276   ; PrintErrorMessageandAbort("BUS Error!") ;
000027D4  4879 0000 4277          pea       @m68kde~2_133.L
000027D8  7D5A      
000027DA  4EB8 2714 4278          jsr       _PrintErrorMessageandAbort
000027DE  584F      4279          addq.w    #4,A7
000027E0  4E75      4280          rts
                    4281   ; }
                    4282   ; void AddressError() {
                    4283   _AddressError:
                    4284   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000027E2  4879 0000 4285          pea       @m68kde~2_134.L
000027E6  7D66      
000027E8  4EB8 2714 4286          jsr       _PrintErrorMessageandAbort
000027EC  584F      4287          addq.w    #4,A7
000027EE  4E75      4288          rts
                    4289   ; }
                    4290   ; void IllegalInstruction() {
                    4291   _IllegalInstruction:
                    4292   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000027F0  4879 0000 4293          pea       @m68kde~2_135.L
000027F4  7D76      
000027F6  4EB8 2714 4294          jsr       _PrintErrorMessageandAbort
000027FA  584F      4295          addq.w    #4,A7
000027FC  4E75      4296          rts
                    4297   ; }
                    4298   ; void Dividebyzero() {
                    4299   _Dividebyzero:
                    4300   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000027FE  4879 0000 4301          pea       @m68kde~2_136.L
00002802  7D8A      
00002804  4EB8 2714 4302          jsr       _PrintErrorMessageandAbort
00002808  584F      4303          addq.w    #4,A7
0000280A  4E75      4304          rts
                    4305   ; }
                    4306   ; void Check() {
                    4307   _Check:
                    4308   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000280C  4879 0000 4309          pea       @m68kde~2_137.L
00002810  7D9A      
00002812  4EB8 2714 4310          jsr       _PrintErrorMessageandAbort
00002816  584F      4311          addq.w    #4,A7
00002818  4E75      4312          rts
                    4313   ; }
                    4314   ; void Trapv() {
                    4315   _Trapv:
                    4316   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000281A  4879 0000 4317          pea       @m68kde~2_138.L
0000281E  7DAC      
00002820  4EB8 2714 4318          jsr       _PrintErrorMessageandAbort
00002824  584F      4319          addq.w    #4,A7
00002826  4E75      4320          rts
                    4321   ; }
                    4322   ; void PrivError() {
                    4323   _PrivError:
                    4324   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002828  4879 0000 4325          pea       @m68kde~2_139.L
0000282C  7DBE      
0000282E  4EB8 2714 4326          jsr       _PrintErrorMessageandAbort
00002832  584F      4327          addq.w    #4,A7
00002834  4E75      4328          rts
                    4329   ; }
                    4330   ; void UnitIRQ() {
                    4331   _UnitIRQ:
                    4332   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002836  4879 0000 4333          pea       @m68kde~2_140.L
0000283A  7DD2      
0000283C  4EB8 2714 4334          jsr       _PrintErrorMessageandAbort
00002840  584F      4335          addq.w    #4,A7
00002842  4E75      4336          rts
                    4337   ; }
                    4338   ; void Spurious() {
                    4339   _Spurious:
                    4340   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002844  4879 0000 4341          pea       @m68kde~2_141.L
00002848  7DE4      
0000284A  4EB8 2714 4342          jsr       _PrintErrorMessageandAbort
0000284E  584F      4343          addq.w    #4,A7
00002850  4E75      4344          rts
                    4345   ; }
                    4346   ; void EnterString(void)
                    4347   ; {
                    4348   _EnterString:
00002852  4E56 FFFC 4349          link      A6,#-4
00002856  2F02      4350          move.l    D2,-(A7)
                    4351   ; unsigned char *Start;
                    4352   ; unsigned char c;
                    4353   ; printf("\r\nStart Address in Memory: ") ;
00002858  4879 0000 4354          pea       @m68kde~2_142.L
0000285C  7DF2      
0000285E  4EB9 0000 4355          jsr       _printf
00002862  63CE      
00002864  584F      4356          addq.w    #4,A7
                    4357   ; Start = Get8HexDigits(0) ;
00002866  42A7      4358          clr.l     -(A7)
00002868  4EB8 0CA4 4359          jsr       _Get8HexDigits
0000286C  584F      4360          addq.w    #4,A7
0000286E  2400      4361          move.l    D0,D2
                    4362   ; printf("\r\nEnter String (ESC to end) :") ;
00002870  4879 0000 4363          pea       @m68kde~2_143.L
00002874  7E0E      
00002876  4EB9 0000 4364          jsr       _printf
0000287A  63CE      
0000287C  584F      4365          addq.w    #4,A7
                    4366   ; while((c = getchar()) != 0x1b)
                    4367   EnterString_1:
0000287E  4EB9 0000 4368          jsr       _getch
00002882  5A0C      
00002884  1D40 FFFF 4369          move.b    D0,-1(A6)
00002888  0C00 001B 4370          cmp.b     #27,D0
0000288C  670A      4371          beq.s     EnterString_3
                    4372   ; *Start++ = c ;
0000288E  2042      4373          move.l    D2,A0
00002890  5282      4374          addq.l    #1,D2
00002892  10AE FFFF 4375          move.b    -1(A6),(A0)
00002896  60E6      4376          bra       EnterString_1
                    4377   EnterString_3:
                    4378   ; *Start = 0x00;  // terminate with a null
00002898  2042      4379          move.l    D2,A0
0000289A  4210      4380          clr.b     (A0)
0000289C  241F      4381          move.l    (A7)+,D2
0000289E  4E5E      4382          unlk      A6
000028A0  4E75      4383          rts
                    4384   ; }
                    4385   ; void MemoryTest(void)
                    4386   ; {
                    4387   _MemoryTest:
000028A2  4E56 FFE8 4388          link      A6,#-24
000028A6  48E7 383C 4389          movem.l   D2/D3/D4/A2/A3/A4/A5,-(A7)
000028AA  45F9 0000 4390          lea       _printf.L,A2
000028AE  63CE      
000028B0  47F9 0000 4391          lea       _scanflush.L,A3
000028B4  5D6E      
000028B6  49F9 0000 4392          lea       _scanf.L,A4
000028BA  5AC4      
000028BC  4BEE FFF8 4393          lea       -8(A6),A5
                    4394   ; unsigned char * RamWriter;
                    4395   ; unsigned char * start_address = 0;
000028C0  42AE FFEC 4396          clr.l     -20(A6)
                    4397   ; unsigned char * end_address = 0;
000028C4  42AE FFF0 4398          clr.l     -16(A6)
                    4399   ; unsigned int test_type = 0;
000028C8  42AE FFF4 4400          clr.l     -12(A6)
                    4401   ; unsigned int user_data = 0;
000028CC  4295      4402          clr.l     (A5)
                    4403   ; unsigned char * current_address;
                    4404   ; unsigned char *  intermediate_address;
                    4405   ; int address_increment;
                    4406   ; int mem_error_flag;
                    4407   ; printf("\r\nSpecify the memory test type. Input '0' for Bytes, '1' for Word, and '2' for Long Word: ");
000028CE  4879 0000 4408          pea       @m68kde~2_144.L
000028D2  7E2C      
000028D4  4E92      4409          jsr       (A2)
000028D6  584F      4410          addq.w    #4,A7
                    4411   ; scanflush();
000028D8  4E93      4412          jsr       (A3)
                    4413   ; scanf("%u", &test_type);
000028DA  486E FFF4 4414          pea       -12(A6)
000028DE  4879 0000 4415          pea       @m68kde~2_145.L
000028E2  7E88      
000028E4  4E94      4416          jsr       (A4)
000028E6  504F      4417          addq.w    #8,A7
                    4418   ; while (test_type > 2) // execute here only if input is invalid
                    4419   MemoryTest_1:
000028E8  202E FFF4 4420          move.l    -12(A6),D0
000028EC  0C80 0000 4421          cmp.l     #2,D0
000028F0  0002      
000028F2  6326      4422          bls.s     MemoryTest_3
                    4423   ; {
                    4424   ; printf("\r\nInvalid Input!");
000028F4  4879 0000 4425          pea       @m68kde~2_146.L
000028F8  7E8C      
000028FA  4E92      4426          jsr       (A2)
000028FC  584F      4427          addq.w    #4,A7
                    4428   ; printf("\r\nSpecify the memory test type. Input '0' for Bytes, '1' for Word, and '2' for Long Word: ");
000028FE  4879 0000 4429          pea       @m68kde~2_144.L
00002902  7E2C      
00002904  4E92      4430          jsr       (A2)
00002906  584F      4431          addq.w    #4,A7
                    4432   ; scanflush();
00002908  4E93      4433          jsr       (A3)
                    4434   ; scanf("%u", &test_type);
0000290A  486E FFF4 4435          pea       -12(A6)
0000290E  4879 0000 4436          pea       @m68kde~2_145.L
00002912  7E88      
00002914  4E94      4437          jsr       (A4)
00002916  504F      4438          addq.w    #8,A7
00002918  60CE      4439          bra       MemoryTest_1
                    4440   MemoryTest_3:
                    4441   ; }
                    4442   ; // valid input at this point
                    4443   ; // 1 Byte
                    4444   ; if (test_type == 0)
0000291A  202E FFF4 4445          move.l    -12(A6),D0
0000291E  6600 0056 4446          bne       MemoryTest_4
                    4447   ; {
                    4448   ; printf("\r\nEnter the data in format XX: ");
00002922  4879 0000 4449          pea       @m68kde~2_147.L
00002926  7E9E      
00002928  4E92      4450          jsr       (A2)
0000292A  584F      4451          addq.w    #4,A7
                    4452   ; scanflush();
0000292C  4E93      4453          jsr       (A3)
                    4454   ; scanf("%x", &user_data);
0000292E  2F0D      4455          move.l    A5,-(A7)
00002930  4879 0000 4456          pea       @m68kde~2_148.L
00002934  7EBE      
00002936  4E94      4457          jsr       (A4)
00002938  504F      4458          addq.w    #8,A7
                    4459   ; while (user_data < 0 || user_data > 255) // out of range/bounds
                    4460   MemoryTest_6:
0000293A  2015      4461          move.l    (A5),D0
0000293C  0C80 0000 4462          cmp.l     #0,D0
00002940  0000      
00002942  650A      4463          blo.s     MemoryTest_9
00002944  2015      4464          move.l    (A5),D0
00002946  0C80 0000 4465          cmp.l     #255,D0
0000294A  00FF      
0000294C  6324      4466          bls.s     MemoryTest_8
                    4467   MemoryTest_9:
                    4468   ; {
                    4469   ; scanflush();
0000294E  4E93      4470          jsr       (A3)
                    4471   ; printf("\rData larger than byte!\n");
00002950  4879 0000 4472          pea       @m68kde~2_149.L
00002954  7EC2      
00002956  4E92      4473          jsr       (A2)
00002958  584F      4474          addq.w    #4,A7
                    4475   ; printf("\rEnter the data in format XX: ");
0000295A  4879 0000 4476          pea       @m68kde~2_150.L
0000295E  7EDC      
00002960  4E92      4477          jsr       (A2)
00002962  584F      4478          addq.w    #4,A7
                    4479   ; scanf("%x", &user_data);
00002964  2F0D      4480          move.l    A5,-(A7)
00002966  4879 0000 4481          pea       @m68kde~2_148.L
0000296A  7EBE      
0000296C  4E94      4482          jsr       (A4)
0000296E  504F      4483          addq.w    #8,A7
00002970  60C8      4484          bra       MemoryTest_6
                    4485   MemoryTest_8:
00002972  6000 00C2 4486          bra       MemoryTest_20
                    4487   MemoryTest_4:
                    4488   ; }
                    4489   ; }
                    4490   ; // 1 Word -- 2 Bytes
                    4491   ; else if (test_type == 1)
00002976  202E FFF4 4492          move.l    -12(A6),D0
0000297A  0C80 0000 4493          cmp.l     #1,D0
0000297E  0001      
00002980  6600 0056 4494          bne       MemoryTest_10
                    4495   ; {
                    4496   ; scanflush();
00002984  4E93      4497          jsr       (A3)
                    4498   ; printf("\r\nEnter the data in format XXXX: ");
00002986  4879 0000 4499          pea       @m68kde~2_151.L
0000298A  7EFC      
0000298C  4E92      4500          jsr       (A2)
0000298E  584F      4501          addq.w    #4,A7
                    4502   ; scanf("%x", &user_data);
00002990  2F0D      4503          move.l    A5,-(A7)
00002992  4879 0000 4504          pea       @m68kde~2_148.L
00002996  7EBE      
00002998  4E94      4505          jsr       (A4)
0000299A  504F      4506          addq.w    #8,A7
                    4507   ; while (user_data < 0 || user_data > 65535) // out of range/bounds
                    4508   MemoryTest_12:
0000299C  2015      4509          move.l    (A5),D0
0000299E  0C80 0000 4510          cmp.l     #0,D0
000029A2  0000      
000029A4  650A      4511          blo.s     MemoryTest_15
000029A6  2015      4512          move.l    (A5),D0
000029A8  0C80 0000 4513          cmp.l     #65535,D0
000029AC  FFFF      
000029AE  6324      4514          bls.s     MemoryTest_14
                    4515   MemoryTest_15:
                    4516   ; {
                    4517   ; printf("\r\nData larger than a word!");
000029B0  4879 0000 4518          pea       @m68kde~2_152.L
000029B4  7F1E      
000029B6  4E92      4519          jsr       (A2)
000029B8  584F      4520          addq.w    #4,A7
                    4521   ; printf("\r\nEnter the data in format XXXX: ");
000029BA  4879 0000 4522          pea       @m68kde~2_151.L
000029BE  7EFC      
000029C0  4E92      4523          jsr       (A2)
000029C2  584F      4524          addq.w    #4,A7
                    4525   ; scanflush();
000029C4  4E93      4526          jsr       (A3)
                    4527   ; scanf("%x", &user_data);
000029C6  2F0D      4528          move.l    A5,-(A7)
000029C8  4879 0000 4529          pea       @m68kde~2_148.L
000029CC  7EBE      
000029CE  4E94      4530          jsr       (A4)
000029D0  504F      4531          addq.w    #8,A7
000029D2  60C8      4532          bra       MemoryTest_12
                    4533   MemoryTest_14:
000029D4  6000 0060 4534          bra       MemoryTest_20
                    4535   MemoryTest_10:
                    4536   ; }
                    4537   ; }
                    4538   ; // Long Word -- 2 words
                    4539   ; else if (test_type == 2)
000029D8  202E FFF4 4540          move.l    -12(A6),D0
000029DC  0C80 0000 4541          cmp.l     #2,D0
000029E0  0002      
000029E2  6600 0052 4542          bne       MemoryTest_20
                    4543   ; {
                    4544   ; scanflush();
000029E6  4E93      4545          jsr       (A3)
                    4546   ; printf("\rEnter the data in format XXXXXXXX: ");
000029E8  4879 0000 4547          pea       @m68kde~2_153.L
000029EC  7F3A      
000029EE  4E92      4548          jsr       (A2)
000029F0  584F      4549          addq.w    #4,A7
                    4550   ; scanf("%x", &user_data);
000029F2  2F0D      4551          move.l    A5,-(A7)
000029F4  4879 0000 4552          pea       @m68kde~2_148.L
000029F8  7EBE      
000029FA  4E94      4553          jsr       (A4)
000029FC  504F      4554          addq.w    #8,A7
                    4555   ; while (user_data < 0 || user_data > 4294967295) // out of range/bounds
                    4556   MemoryTest_18:
000029FE  2015      4557          move.l    (A5),D0
00002A00  0C80 0000 4558          cmp.l     #0,D0
00002A04  0000      
00002A06  650A      4559          blo.s     MemoryTest_21
00002A08  2015      4560          move.l    (A5),D0
00002A0A  0C80 FFFF 4561          cmp.l     #-1,D0
00002A0E  FFFF      
00002A10  6324      4562          bls.s     MemoryTest_20
                    4563   MemoryTest_21:
                    4564   ; {
                    4565   ; scanflush();
00002A12  4E93      4566          jsr       (A3)
                    4567   ; printf("\r\nData larger than a long word!");
00002A14  4879 0000 4568          pea       @m68kde~2_154.L
00002A18  7F60      
00002A1A  4E92      4569          jsr       (A2)
00002A1C  584F      4570          addq.w    #4,A7
                    4571   ; printf("\r\nEnter the data in format XXXXXXXX: ");
00002A1E  4879 0000 4572          pea       @m68kde~2_155.L
00002A22  7F80      
00002A24  4E92      4573          jsr       (A2)
00002A26  584F      4574          addq.w    #4,A7
                    4575   ; scanf("%x", &user_data);
00002A28  2F0D      4576          move.l    A5,-(A7)
00002A2A  4879 0000 4577          pea       @m68kde~2_148.L
00002A2E  7EBE      
00002A30  4E94      4578          jsr       (A4)
00002A32  504F      4579          addq.w    #8,A7
00002A34  60C8      4580          bra       MemoryTest_18
                    4581   MemoryTest_20:
                    4582   ; }
                    4583   ; }
                    4584   ; scanflush();
00002A36  4E93      4585          jsr       (A3)
                    4586   ; printf("\r\nProvide a start address for your data: ");
00002A38  4879 0000 4587          pea       @m68kde~2_156.L
00002A3C  7FA6      
00002A3E  4E92      4588          jsr       (A2)
00002A40  584F      4589          addq.w    #4,A7
                    4590   ; scanf("%x", &start_address);
00002A42  486E FFEC 4591          pea       -20(A6)
00002A46  4879 0000 4592          pea       @m68kde~2_148.L
00002A4A  7EBE      
00002A4C  4E94      4593          jsr       (A4)
00002A4E  504F      4594          addq.w    #8,A7
                    4595   ; if (test_type != 0) // check that we're aligned properly for start address for word and long word
00002A50  202E FFF4 4596          move.l    -12(A6),D0
00002A54  6700 0040 4597          beq       MemoryTest_26
                    4598   ; {
                    4599   ; while ((unsigned int)start_address % 2) // odd number address
                    4600   MemoryTest_24:
00002A58  2F2E FFEC 4601          move.l    -20(A6),-(A7)
00002A5C  4878 0002 4602          pea       2
00002A60  4EB9 0000 4603          jsr       ULDIV
00002A64  5902      
00002A66  202F 0004 4604          move.l    4(A7),D0
00002A6A  504F      4605          addq.w    #8,A7
00002A6C  4A80      4606          tst.l     D0
00002A6E  6726      4607          beq.s     MemoryTest_26
                    4608   ; {
                    4609   ; printf("\r\n Odd address is not allowed for word or long word!");
00002A70  4879 0000 4610          pea       @m68kde~2_157.L
00002A74  7FD0      
00002A76  4E92      4611          jsr       (A2)
00002A78  584F      4612          addq.w    #4,A7
                    4613   ; scanflush();
00002A7A  4E93      4614          jsr       (A3)
                    4615   ; printf("\r\nProvide a start address for your data: ");
00002A7C  4879 0000 4616          pea       @m68kde~2_156.L
00002A80  7FA6      
00002A82  4E92      4617          jsr       (A2)
00002A84  584F      4618          addq.w    #4,A7
                    4619   ; scanf("%x", &start_address);
00002A86  486E FFEC 4620          pea       -20(A6)
00002A8A  4879 0000 4621          pea       @m68kde~2_148.L
00002A8E  7EBE      
00002A90  4E94      4622          jsr       (A4)
00002A92  504F      4623          addq.w    #8,A7
00002A94  60C2      4624          bra       MemoryTest_24
                    4625   MemoryTest_26:
                    4626   ; }
                    4627   ; }
                    4628   ; while (start_address < 0x08020000 || start_address > 0x08030000) //protect data leak into other memories
                    4629   MemoryTest_27:
00002A96  202E FFEC 4630          move.l    -20(A6),D0
00002A9A  0C80 0802 4631          cmp.l     #134348800,D0
00002A9E  0000      
00002AA0  650E      4632          blo.s     MemoryTest_30
00002AA2  202E FFEC 4633          move.l    -20(A6),D0
00002AA6  0C80 0803 4634          cmp.l     #134414336,D0
00002AAA  0000      
00002AAC  6300 0036 4635          bls       MemoryTest_29
                    4636   MemoryTest_30:
                    4637   ; {
                    4638   ; scanflush();
00002AB0  4E93      4639          jsr       (A3)
                    4640   ; printf("\r\nInvalid address!");
00002AB2  4879 0000 4641          pea       @m68kde~2_158.L
00002AB6  8006      
00002AB8  4E92      4642          jsr       (A2)
00002ABA  584F      4643          addq.w    #4,A7
                    4644   ; printf("\r\nYou have entered %x for the start address", start_address);
00002ABC  2F2E FFEC 4645          move.l    -20(A6),-(A7)
00002AC0  4879 0000 4646          pea       @m68kde~2_159.L
00002AC4  801A      
00002AC6  4E92      4647          jsr       (A2)
00002AC8  504F      4648          addq.w    #8,A7
                    4649   ; printf("\r\nProvide a start address for your data: ");
00002ACA  4879 0000 4650          pea       @m68kde~2_156.L
00002ACE  7FA6      
00002AD0  4E92      4651          jsr       (A2)
00002AD2  584F      4652          addq.w    #4,A7
                    4653   ; scanf("%x", &start_address);
00002AD4  486E FFEC 4654          pea       -20(A6)
00002AD8  4879 0000 4655          pea       @m68kde~2_148.L
00002ADC  7EBE      
00002ADE  4E94      4656          jsr       (A4)
00002AE0  504F      4657          addq.w    #8,A7
00002AE2  60B2      4658          bra       MemoryTest_27
                    4659   MemoryTest_29:
                    4660   ; }
                    4661   ; printf("\r\nYou have entered %x for the start address", start_address);
00002AE4  2F2E FFEC 4662          move.l    -20(A6),-(A7)
00002AE8  4879 0000 4663          pea       @m68kde~2_159.L
00002AEC  801A      
00002AEE  4E92      4664          jsr       (A2)
00002AF0  504F      4665          addq.w    #8,A7
                    4666   ; scanflush();
00002AF2  4E93      4667          jsr       (A3)
                    4668   ; printf("\r\nProvide an end address for your data: "); //protect data leak into other memories
00002AF4  4879 0000 4669          pea       @m68kde~2_160.L
00002AF8  8046      
00002AFA  4E92      4670          jsr       (A2)
00002AFC  584F      4671          addq.w    #4,A7
                    4672   ; scanf("%x", &end_address); //protect data leak into other memories
00002AFE  486E FFF0 4673          pea       -16(A6)
00002B02  4879 0000 4674          pea       @m68kde~2_148.L
00002B06  7EBE      
00002B08  4E94      4675          jsr       (A4)
00002B0A  504F      4676          addq.w    #8,A7
                    4677   ; while (end_address < start_address || end_address > 0x08030000)
                    4678   MemoryTest_31:
00002B0C  202E FFF0 4679          move.l    -16(A6),D0
00002B10  B0AE FFEC 4680          cmp.l     -20(A6),D0
00002B14  650C      4681          blo.s     MemoryTest_34
00002B16  202E FFF0 4682          move.l    -16(A6),D0
00002B1A  0C80 0803 4683          cmp.l     #134414336,D0
00002B1E  0000      
00002B20  6328      4684          bls.s     MemoryTest_33
                    4685   MemoryTest_34:
                    4686   ; {
                    4687   ; scanflush();
00002B22  4E93      4688          jsr       (A3)
                    4689   ; printf("\r\nInvalid address!");
00002B24  4879 0000 4690          pea       @m68kde~2_158.L
00002B28  8006      
00002B2A  4E92      4691          jsr       (A2)
00002B2C  584F      4692          addq.w    #4,A7
                    4693   ; printf("\r\nProvide an end address for your data: "); //protect data leak into other memories
00002B2E  4879 0000 4694          pea       @m68kde~2_160.L
00002B32  8046      
00002B34  4E92      4695          jsr       (A2)
00002B36  584F      4696          addq.w    #4,A7
                    4697   ; scanflush();
00002B38  4E93      4698          jsr       (A3)
                    4699   ; scanf("%x", &end_address); //protect data leak into other memories
00002B3A  486E FFF0 4700          pea       -16(A6)
00002B3E  4879 0000 4701          pea       @m68kde~2_148.L
00002B42  7EBE      
00002B44  4E94      4702          jsr       (A4)
00002B46  504F      4703          addq.w    #8,A7
00002B48  60C2      4704          bra       MemoryTest_31
                    4705   MemoryTest_33:
                    4706   ; }
                    4707   ; if (test_type != 0) // check that we're aligned properly for start address for word and long word
00002B4A  202E FFF4 4708          move.l    -12(A6),D0
00002B4E  6700 0040 4709          beq       MemoryTest_39
                    4710   ; {
                    4711   ; while ((unsigned int)end_address % 2) // odd number address
                    4712   MemoryTest_37:
00002B52  2F2E FFF0 4713          move.l    -16(A6),-(A7)
00002B56  4878 0002 4714          pea       2
00002B5A  4EB9 0000 4715          jsr       ULDIV
00002B5E  5902      
00002B60  202F 0004 4716          move.l    4(A7),D0
00002B64  504F      4717          addq.w    #8,A7
00002B66  4A80      4718          tst.l     D0
00002B68  6726      4719          beq.s     MemoryTest_39
                    4720   ; {
                    4721   ; printf("\r\n Odd address is not allowed for word or long word!");
00002B6A  4879 0000 4722          pea       @m68kde~2_157.L
00002B6E  7FD0      
00002B70  4E92      4723          jsr       (A2)
00002B72  584F      4724          addq.w    #4,A7
                    4725   ; scanflush();
00002B74  4E93      4726          jsr       (A3)
                    4727   ; printf("\r\nProvide an end address for your data: ");
00002B76  4879 0000 4728          pea       @m68kde~2_160.L
00002B7A  8046      
00002B7C  4E92      4729          jsr       (A2)
00002B7E  584F      4730          addq.w    #4,A7
                    4731   ; scanf("%x", &end_address);
00002B80  486E FFF0 4732          pea       -16(A6)
00002B84  4879 0000 4733          pea       @m68kde~2_148.L
00002B88  7EBE      
00002B8A  4E94      4734          jsr       (A4)
00002B8C  504F      4735          addq.w    #8,A7
00002B8E  60C2      4736          bra       MemoryTest_37
                    4737   MemoryTest_39:
                    4738   ; }
                    4739   ; }
                    4740   ; // input long word
                    4741   ; // start_address 0802_0002
                    4742   ; // end_address 0802_000a
                    4743   ; switch (test_type) { // check if byte, word, or long word
00002B90  202E FFF4 4744          move.l    -12(A6),D0
00002B94  0C80 0000 4745          cmp.l     #1,D0
00002B98  0001      
00002B9A  6716      4746          beq.s     MemoryTest_43
00002B9C  6206      4747          bhi.s     MemoryTest_46
00002B9E  4A80      4748          tst.l     D0
00002BA0  670C      4749          beq.s     MemoryTest_42
00002BA2  6020      4750          bra.s     MemoryTest_40
                    4751   MemoryTest_46:
00002BA4  0C80 0000 4752          cmp.l     #2,D0
00002BA8  0002      
00002BAA  6714      4753          beq.s     MemoryTest_44
00002BAC  6016      4754          bra.s     MemoryTest_40
                    4755   MemoryTest_42:
                    4756   ; case 0:
                    4757   ; address_increment = 1; // byte
00002BAE  7801      4758          moveq     #1,D4
                    4759   ; break;
00002BB0  6014      4760          bra.s     MemoryTest_41
                    4761   MemoryTest_43:
                    4762   ; case 1:
                    4763   ; address_increment = 2; // word
00002BB2  7802      4764          moveq     #2,D4
                    4765   ; user_data = 0x0000 + user_data;
00002BB4  4200      4766          clr.b     D0
00002BB6  4880      4767          ext.w     D0
00002BB8  48C0      4768          ext.l     D0
00002BBA  D095      4769          add.l     (A5),D0
00002BBC  2A80      4770          move.l    D0,(A5)
                    4771   ; break;
00002BBE  6006      4772          bra.s     MemoryTest_41
                    4773   MemoryTest_44:
                    4774   ; case 2:
                    4775   ; address_increment = 4; // long word
00002BC0  7804      4776          moveq     #4,D4
                    4777   ; break;
00002BC2  6002      4778          bra.s     MemoryTest_41
                    4779   MemoryTest_40:
                    4780   ; default:
                    4781   ; address_increment = 1; // byte
00002BC4  7801      4782          moveq     #1,D4
                    4783   MemoryTest_41:
                    4784   ; }
                    4785   ; // test for byte first, then check alignment
                    4786   ; // test case: current is 0x0802_0000, end is 0x0802_000a (end-start = 10 in decimals)
                    4787   ; // byte --> just 8 bits
                    4788   ; // 16b'1111_1111_1111_1111
                    4789   ; // 16b'0000_0000_1011_1100 input
                    4790   ; //and  16b'0000_0000_1011_1100
                    4791   ; //>>8  16b
                    4792   ; mem_error_flag = 0;
00002BC6  4283      4793          clr.l     D3
                    4794   ; for(current_address = start_address; current_address < end_address; current_address += address_increment){
00002BC8  242E FFEC 4795          move.l    -20(A6),D2
                    4796   MemoryTest_47:
00002BCC  B4AE FFF0 4797          cmp.l     -16(A6),D2
00002BD0  6400 027C 4798          bhs       MemoryTest_49
                    4799   ; if((current_address - start_address)%10000 == 0){
00002BD4  2002      4800          move.l    D2,D0
00002BD6  90AE FFEC 4801          sub.l     -20(A6),D0
00002BDA  2F00      4802          move.l    D0,-(A7)
00002BDC  4878 2710 4803          pea       10000
00002BE0  4EB9 0000 4804          jsr       LDIV
00002BE4  5914      
00002BE6  202F 0004 4805          move.l    4(A7),D0
00002BEA  504F      4806          addq.w    #8,A7
00002BEC  4A80      4807          tst.l     D0
00002BEE  6610      4808          bne.s     MemoryTest_50
                    4809   ; printf("\r\nWriting %x at location %x", user_data, current_address); // Reports the progress every 10k (0x2800) locations
00002BF0  2F02      4810          move.l    D2,-(A7)
00002BF2  2F15      4811          move.l    (A5),-(A7)
00002BF4  4879 0000 4812          pea       @m68kde~2_161.L
00002BF8  8070      
00002BFA  4E92      4813          jsr       (A2)
00002BFC  DEFC 000C 4814          add.w     #12,A7
                    4815   MemoryTest_50:
                    4816   ; }
                    4817   ; if(test_type == 0){
00002C00  202E FFF4 4818          move.l    -12(A6),D0
00002C04  6600 0030 4819          bne       MemoryTest_52
                    4820   ; *(current_address) = user_data;
00002C08  2015      4821          move.l    (A5),D0
00002C0A  2042      4822          move.l    D2,A0
00002C0C  1080      4823          move.b    D0,(A0)
                    4824   ; if (*(current_address) != user_data) //read the data and confirm if it is written correctly
00002C0E  2042      4825          move.l    D2,A0
00002C10  1010      4826          move.b    (A0),D0
00002C12  C0BC 0000 4827          and.l     #255,D0
00002C16  00FF      
00002C18  B095      4828          cmp.l     (A5),D0
00002C1A  6716      4829          beq.s     MemoryTest_54
                    4830   ; {
                    4831   ; printf("\r\nError writing %x to address %x", user_data, current_address);
00002C1C  2F02      4832          move.l    D2,-(A7)
00002C1E  2F15      4833          move.l    (A5),-(A7)
00002C20  4879 0000 4834          pea       @m68kde~2_162.L
00002C24  808C      
00002C26  4E92      4835          jsr       (A2)
00002C28  DEFC 000C 4836          add.w     #12,A7
                    4837   ; mem_error_flag = 1;
00002C2C  7601      4838          moveq     #1,D3
                    4839   ; break;
00002C2E  6000 021E 4840          bra       MemoryTest_49
                    4841   MemoryTest_54:
00002C32  6000 0214 4842          bra       MemoryTest_72
                    4843   MemoryTest_52:
                    4844   ; }
                    4845   ; }
                    4846   ; else if(test_type == 1){
00002C36  202E FFF4 4847          move.l    -12(A6),D0
00002C3A  0C80 0000 4848          cmp.l     #1,D0
00002C3E  0001      
00002C40  6600 00A0 4849          bne       MemoryTest_56
                    4850   ; *(current_address) = (0xFF00 & user_data) >> 8;
00002C44  303C FF00 4851          move.w    #65280,D0
00002C48  C0BC 0000 4852          and.l     #65535,D0
00002C4C  FFFF      
00002C4E  C095      4853          and.l     (A5),D0
00002C50  E088      4854          lsr.l     #8,D0
00002C52  2042      4855          move.l    D2,A0
00002C54  1080      4856          move.b    D0,(A0)
                    4857   ; if (*(current_address) != ((0xFF00 & user_data) >> 8)) //read the data and confirm if it is written correctly
00002C56  2042      4858          move.l    D2,A0
00002C58  1010      4859          move.b    (A0),D0
00002C5A  C0BC 0000 4860          and.l     #255,D0
00002C5E  00FF      
00002C60  323C FF00 4861          move.w    #65280,D1
00002C64  C2BC 0000 4862          and.l     #65535,D1
00002C68  FFFF      
00002C6A  C295      4863          and.l     (A5),D1
00002C6C  E089      4864          lsr.l     #8,D1
00002C6E  B081      4865          cmp.l     D1,D0
00002C70  6724      4866          beq.s     MemoryTest_58
                    4867   ; {
                    4868   ; printf("\r\nError writing %x to address %x", (0xFF00 & user_data) >> 8, current_address);
00002C72  2F02      4869          move.l    D2,-(A7)
00002C74  323C FF00 4870          move.w    #65280,D1
00002C78  C2BC 0000 4871          and.l     #65535,D1
00002C7C  FFFF      
00002C7E  C295      4872          and.l     (A5),D1
00002C80  E089      4873          lsr.l     #8,D1
00002C82  2F01      4874          move.l    D1,-(A7)
00002C84  4879 0000 4875          pea       @m68kde~2_162.L
00002C88  808C      
00002C8A  4E92      4876          jsr       (A2)
00002C8C  DEFC 000C 4877          add.w     #12,A7
                    4878   ; mem_error_flag = 1;
00002C90  7601      4879          moveq     #1,D3
                    4880   ; break;
00002C92  6000 01BA 4881          bra       MemoryTest_49
                    4882   MemoryTest_58:
                    4883   ; }
                    4884   ; *(current_address + 1) = (0x00FF & user_data);
00002C96  303C 00FF 4885          move.w    #255,D0
00002C9A  48C0      4886          ext.l     D0
00002C9C  C095      4887          and.l     (A5),D0
00002C9E  2042      4888          move.l    D2,A0
00002CA0  1140 0001 4889          move.b    D0,1(A0)
                    4890   ; if (*(current_address + 1) != (0x00FF & user_data)) //read the data and confirm if it is written correctly
00002CA4  2042      4891          move.l    D2,A0
00002CA6  1028 0001 4892          move.b    1(A0),D0
00002CAA  C0BC 0000 4893          and.l     #255,D0
00002CAE  00FF      
00002CB0  323C 00FF 4894          move.w    #255,D1
00002CB4  48C1      4895          ext.l     D1
00002CB6  C295      4896          and.l     (A5),D1
00002CB8  B081      4897          cmp.l     D1,D0
00002CBA  6722      4898          beq.s     MemoryTest_60
                    4899   ; {
                    4900   ; printf("\r\nError writing %x to address %x", (0x00FF & user_data), (current_address+1));
00002CBC  2202      4901          move.l    D2,D1
00002CBE  5281      4902          addq.l    #1,D1
00002CC0  2F01      4903          move.l    D1,-(A7)
00002CC2  323C 00FF 4904          move.w    #255,D1
00002CC6  48C1      4905          ext.l     D1
00002CC8  C295      4906          and.l     (A5),D1
00002CCA  2F01      4907          move.l    D1,-(A7)
00002CCC  4879 0000 4908          pea       @m68kde~2_162.L
00002CD0  808C      
00002CD2  4E92      4909          jsr       (A2)
00002CD4  DEFC 000C 4910          add.w     #12,A7
                    4911   ; mem_error_flag = 1;
00002CD8  7601      4912          moveq     #1,D3
                    4913   ; break;
00002CDA  6000 0172 4914          bra       MemoryTest_49
                    4915   MemoryTest_60:
00002CDE  6000 0168 4916          bra       MemoryTest_72
                    4917   MemoryTest_56:
                    4918   ; }
                    4919   ; }
                    4920   ; else if(test_type == 2)
00002CE2  202E FFF4 4921          move.l    -12(A6),D0
00002CE6  0C80 0000 4922          cmp.l     #2,D0
00002CEA  0002      
00002CEC  6600 015A 4923          bne       MemoryTest_72
                    4924   ; {
                    4925   ; if( (end_address - current_address) < 3){ //  to ensure we do not go past end address
00002CF0  202E FFF0 4926          move.l    -16(A6),D0
00002CF4  9082      4927          sub.l     D2,D0
00002CF6  0C80 0000 4928          cmp.l     #3,D0
00002CFA  0003      
00002CFC  6C04      4929          bge.s     MemoryTest_64
                    4930   ; break;
00002CFE  6000 014E 4931          bra       MemoryTest_49
                    4932   MemoryTest_64:
                    4933   ; }
                    4934   ; *(current_address) = (0xFF000000 & user_data) >> 24;
00002D02  203C FF00 4935          move.l    #-16777216,D0
00002D06  0000      
00002D08  C095      4936          and.l     (A5),D0
00002D0A  E088      4937          lsr.l     #8,D0
00002D0C  E088      4938          lsr.l     #8,D0
00002D0E  E088      4939          lsr.l     #8,D0
00002D10  2042      4940          move.l    D2,A0
00002D12  1080      4941          move.b    D0,(A0)
                    4942   ; if (*(current_address) != ((0xFF000000 & user_data) >> 24)) //read the data and confirm if it is written correctly
00002D14  2042      4943          move.l    D2,A0
00002D16  1010      4944          move.b    (A0),D0
00002D18  C0BC 0000 4945          and.l     #255,D0
00002D1C  00FF      
00002D1E  223C FF00 4946          move.l    #-16777216,D1
00002D22  0000      
00002D24  C295      4947          and.l     (A5),D1
00002D26  E089      4948          lsr.l     #8,D1
00002D28  E089      4949          lsr.l     #8,D1
00002D2A  E089      4950          lsr.l     #8,D1
00002D2C  B081      4951          cmp.l     D1,D0
00002D2E  6724      4952          beq.s     MemoryTest_66
                    4953   ; {
                    4954   ; printf("\r\nError writing %x to address %x", (0xFF000000 & user_data) >> 24, current_address);
00002D30  2F02      4955          move.l    D2,-(A7)
00002D32  223C FF00 4956          move.l    #-16777216,D1
00002D36  0000      
00002D38  C295      4957          and.l     (A5),D1
00002D3A  E089      4958          lsr.l     #8,D1
00002D3C  E089      4959          lsr.l     #8,D1
00002D3E  E089      4960          lsr.l     #8,D1
00002D40  2F01      4961          move.l    D1,-(A7)
00002D42  4879 0000 4962          pea       @m68kde~2_162.L
00002D46  808C      
00002D48  4E92      4963          jsr       (A2)
00002D4A  DEFC 000C 4964          add.w     #12,A7
                    4965   ; mem_error_flag = 1;
00002D4E  7601      4966          moveq     #1,D3
                    4967   ; break;
00002D50  6000 00FC 4968          bra       MemoryTest_49
                    4969   MemoryTest_66:
                    4970   ; }
                    4971   ; *(current_address + 1) = (0x00FF0000 & user_data) >> 16;
00002D54  203C 00FF 4972          move.l    #16711680,D0
00002D58  0000      
00002D5A  C095      4973          and.l     (A5),D0
00002D5C  E088      4974          lsr.l     #8,D0
00002D5E  E088      4975          lsr.l     #8,D0
00002D60  2042      4976          move.l    D2,A0
00002D62  1140 0001 4977          move.b    D0,1(A0)
                    4978   ; if (*(current_address + 1) != ((0x00FF0000 & user_data) >> 16)) //read the data and confirm if it is written correctly
00002D66  2042      4979          move.l    D2,A0
00002D68  1028 0001 4980          move.b    1(A0),D0
00002D6C  C0BC 0000 4981          and.l     #255,D0
00002D70  00FF      
00002D72  223C 00FF 4982          move.l    #16711680,D1
00002D76  0000      
00002D78  C295      4983          and.l     (A5),D1
00002D7A  E089      4984          lsr.l     #8,D1
00002D7C  E089      4985          lsr.l     #8,D1
00002D7E  B081      4986          cmp.l     D1,D0
00002D80  6726      4987          beq.s     MemoryTest_68
                    4988   ; {
                    4989   ; printf("\r\nError writing %x to address %x", (0x00FF0000 & user_data) >> 16, (current_address+1));
00002D82  2202      4990          move.l    D2,D1
00002D84  5281      4991          addq.l    #1,D1
00002D86  2F01      4992          move.l    D1,-(A7)
00002D88  223C 00FF 4993          move.l    #16711680,D1
00002D8C  0000      
00002D8E  C295      4994          and.l     (A5),D1
00002D90  E089      4995          lsr.l     #8,D1
00002D92  E089      4996          lsr.l     #8,D1
00002D94  2F01      4997          move.l    D1,-(A7)
00002D96  4879 0000 4998          pea       @m68kde~2_162.L
00002D9A  808C      
00002D9C  4E92      4999          jsr       (A2)
00002D9E  DEFC 000C 5000          add.w     #12,A7
                    5001   ; mem_error_flag = 1;
00002DA2  7601      5002          moveq     #1,D3
                    5003   ; break;
00002DA4  6000 00A8 5004          bra       MemoryTest_49
                    5005   MemoryTest_68:
                    5006   ; }
                    5007   ; *(current_address + 2) = (0x0000FF00 & user_data) >> 8;
00002DA8  303C FF00 5008          move.w    #65280,D0
00002DAC  C0BC 0000 5009          and.l     #65535,D0
00002DB0  FFFF      
00002DB2  C095      5010          and.l     (A5),D0
00002DB4  E088      5011          lsr.l     #8,D0
00002DB6  2042      5012          move.l    D2,A0
00002DB8  1140 0002 5013          move.b    D0,2(A0)
                    5014   ; if (*(current_address + 2) != ((0x0000FF00 & user_data) >> 8)) //read the data and confirm if it is written correctly
00002DBC  2042      5015          move.l    D2,A0
00002DBE  1028 0002 5016          move.b    2(A0),D0
00002DC2  C0BC 0000 5017          and.l     #255,D0
00002DC6  00FF      
00002DC8  323C FF00 5018          move.w    #65280,D1
00002DCC  C2BC 0000 5019          and.l     #65535,D1
00002DD0  FFFF      
00002DD2  C295      5020          and.l     (A5),D1
00002DD4  E089      5021          lsr.l     #8,D1
00002DD6  B081      5022          cmp.l     D1,D0
00002DD8  6728      5023          beq.s     MemoryTest_70
                    5024   ; {
                    5025   ; printf("\r\nError writing %x to address %x", (0x0000FF00 & user_data) >> 8, (current_address+2));
00002DDA  2202      5026          move.l    D2,D1
00002DDC  5481      5027          addq.l    #2,D1
00002DDE  2F01      5028          move.l    D1,-(A7)
00002DE0  323C FF00 5029          move.w    #65280,D1
00002DE4  C2BC 0000 5030          and.l     #65535,D1
00002DE8  FFFF      
00002DEA  C295      5031          and.l     (A5),D1
00002DEC  E089      5032          lsr.l     #8,D1
00002DEE  2F01      5033          move.l    D1,-(A7)
00002DF0  4879 0000 5034          pea       @m68kde~2_162.L
00002DF4  808C      
00002DF6  4E92      5035          jsr       (A2)
00002DF8  DEFC 000C 5036          add.w     #12,A7
                    5037   ; mem_error_flag = 1;
00002DFC  7601      5038          moveq     #1,D3
                    5039   ; break;
00002DFE  6000 004E 5040          bra       MemoryTest_49
                    5041   MemoryTest_70:
                    5042   ; }
                    5043   ; *(current_address + 3) = (0x000000FF) & user_data;
00002E02  303C 00FF 5044          move.w    #255,D0
00002E06  48C0      5045          ext.l     D0
00002E08  C095      5046          and.l     (A5),D0
00002E0A  2042      5047          move.l    D2,A0
00002E0C  1140 0003 5048          move.b    D0,3(A0)
                    5049   ; if (*(current_address + 3) != ((0x000000FF) & user_data)) //read the data and confirm if it is written correctly
00002E10  2042      5050          move.l    D2,A0
00002E12  1028 0003 5051          move.b    3(A0),D0
00002E16  C0BC 0000 5052          and.l     #255,D0
00002E1A  00FF      
00002E1C  323C 00FF 5053          move.w    #255,D1
00002E20  48C1      5054          ext.l     D1
00002E22  C295      5055          and.l     (A5),D1
00002E24  B081      5056          cmp.l     D1,D0
00002E26  6720      5057          beq.s     MemoryTest_72
                    5058   ; {
                    5059   ; printf("\r\nError writing %x to address %x", (0x000000FF) & user_data, (current_address+3));
00002E28  2202      5060          move.l    D2,D1
00002E2A  5681      5061          addq.l    #3,D1
00002E2C  2F01      5062          move.l    D1,-(A7)
00002E2E  323C 00FF 5063          move.w    #255,D1
00002E32  48C1      5064          ext.l     D1
00002E34  C295      5065          and.l     (A5),D1
00002E36  2F01      5066          move.l    D1,-(A7)
00002E38  4879 0000 5067          pea       @m68kde~2_162.L
00002E3C  808C      
00002E3E  4E92      5068          jsr       (A2)
00002E40  DEFC 000C 5069          add.w     #12,A7
                    5070   ; mem_error_flag = 1;
00002E44  7601      5071          moveq     #1,D3
                    5072   ; break;
00002E46  6006      5073          bra.s     MemoryTest_49
                    5074   MemoryTest_72:
00002E48  D484      5075          add.l     D4,D2
00002E4A  6000 FD80 5076          bra       MemoryTest_47
                    5077   MemoryTest_49:
                    5078   ; }
                    5079   ; }
                    5080   ; }
                    5081   ; if(mem_error_flag == 0){
00002E4E  4A83      5082          tst.l     D3
00002E50  660C      5083          bne.s     MemoryTest_74
                    5084   ; printf("\r\nWriting finished at %08x", current_address);
00002E52  2F02      5085          move.l    D2,-(A7)
00002E54  4879 0000 5086          pea       @m68kde~2_163.L
00002E58  80AE      
00002E5A  4E92      5087          jsr       (A2)
00002E5C  504F      5088          addq.w    #8,A7
                    5089   MemoryTest_74:
00002E5E  4CDF 3C1C 5090          movem.l   (A7)+,D2/D3/D4/A2/A3/A4/A5
00002E62  4E5E      5091          unlk      A6
00002E64  4E75      5092          rts
                    5093   ; }
                    5094   ; }
                    5095   ; void main(void)
                    5096   ; {
                    5097   _main:
00002E66  4E56 FFF4 5098          link      A6,#-12
00002E6A  48E7 3030 5099          movem.l   D2/D3/A2/A3,-(A7)
00002E6E  45F8 0A30 5100          lea       _InstallExceptionHandler.L,A2
00002E72  47F9 0000 5101          lea       _printf.L,A3
00002E76  63CE      
                    5102   ; char c ;
                    5103   ; int i, j ;
                    5104   ; char *student_names = "Saif Abdelazim and Jinil Patel"; // change this + variable name to student name
00002E78  41F9 0000 5105          lea       @m68kde~2_164.L,A0
00002E7C  80CA      
00002E7E  2608      5106          move.l    A0,D3
                    5107   ; char *student_number = "Student #: 62639422 and 3824072"; // change this + variable name to student number
00002E80  41F9 0000 5108          lea       @m68kde~2_165.L,A0
00002E84  80EA      
00002E86  2D48 FFFC 5109          move.l    A0,-4(A6)
                    5110   ; KillAllBreakPoints() ;
00002E8A  4EB8 1EEE 5111          jsr       _KillAllBreakPoints
                    5112   ; i = x = y = z = PortA_Count = 0;
00002E8E  42B9 0803 5113          clr.l     _PortA_Count.L
00002E92  00D4      
00002E94  42B9 0803 5114          clr.l     _z.L
00002E98  00D0      
00002E9A  42B9 0803 5115          clr.l     _y.L
00002E9E  00CC      
00002EA0  42B9 0803 5116          clr.l     _x.L
00002EA4  00C8      
00002EA6  4282      5117          clr.l     D2
                    5118   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002EA8  42B9 0803 5119          clr.l     _GoFlag.L
00002EAC  00DC      
00002EAE  42B9 0803 5120          clr.l     _Trace.L
00002EB2  00D8      
                    5121   ; Echo = 1 ;
00002EB4  23FC 0000 5122          move.l    #1,_Echo.L
00002EB8  0001 0803 
00002EBC  00E0      
                    5123   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002EBE  42B9 0803 5124          clr.l     _d7.L
00002EC2  0100      
00002EC4  42B9 0803 5125          clr.l     _d6.L
00002EC8  00FC      
00002ECA  42B9 0803 5126          clr.l     _d5.L
00002ECE  00F8      
00002ED0  42B9 0803 5127          clr.l     _d4.L
00002ED4  00F4      
00002ED6  42B9 0803 5128          clr.l     _d3.L
00002EDA  00F0      
00002EDC  42B9 0803 5129          clr.l     _d2.L
00002EE0  00EC      
00002EE2  42B9 0803 5130          clr.l     _d1.L
00002EE6  00E8      
00002EE8  42B9 0803 5131          clr.l     _d0.L
00002EEC  00E4      
                    5132   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002EEE  42B9 0803 5133          clr.l     _a6.L
00002EF2  011C      
00002EF4  42B9 0803 5134          clr.l     _a5.L
00002EF8  0118      
00002EFA  42B9 0803 5135          clr.l     _a4.L
00002EFE  0114      
00002F00  42B9 0803 5136          clr.l     _a3.L
00002F04  0110      
00002F06  42B9 0803 5137          clr.l     _a2.L
00002F0A  010C      
00002F0C  42B9 0803 5138          clr.l     _a1.L
00002F10  0108      
00002F12  42B9 0803 5139          clr.l     _a0.L
00002F16  0104      
                    5140   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002F18  23FC 0800 5141          move.l    #134217728,_PC.L
00002F1C  0000 0803 
00002F20  0120      
00002F22  23FC 0804 5142          move.l    #134479872,_SSP.L
00002F26  0000 0803 
00002F2A  0124      
00002F2C  23FC 0804 5143          move.l    #134479872,_USP.L
00002F30  0000 0803 
00002F34  0128      
                    5144   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002F36  33FC 2000 5145          move.w    #8192,_SR.L
00002F3A  0803 012C 
                    5146   ; // Initialise Breakpoint variables
                    5147   ; for(i = 0; i < 8; i++)  {
00002F3E  4282      5148          clr.l     D2
                    5149   main_1:
00002F40  0C82 0000 5150          cmp.l     #8,D2
00002F44  0008      
00002F46  6C00 004C 5151          bge       main_3
                    5152   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002F4A  2002      5153          move.l    D2,D0
00002F4C  E588      5154          lsl.l     #2,D0
00002F4E  41F9 0803 5155          lea       _BreakPointAddress.L,A0
00002F52  012E      
00002F54  42B0 0800 5156          clr.l     0(A0,D0.L)
                    5157   ; WatchPointAddress[i] = 0 ;
00002F58  2002      5158          move.l    D2,D0
00002F5A  E588      5159          lsl.l     #2,D0
00002F5C  41F9 0803 5160          lea       _WatchPointAddress.L,A0
00002F60  0182      
00002F62  42B0 0800 5161          clr.l     0(A0,D0.L)
                    5162   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002F66  2002      5163          move.l    D2,D0
00002F68  E388      5164          lsl.l     #1,D0
00002F6A  41F9 0803 5165          lea       _BreakPointInstruction.L,A0
00002F6E  014E      
00002F70  4270 0800 5166          clr.w     0(A0,D0.L)
                    5167   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002F74  2002      5168          move.l    D2,D0
00002F76  E588      5169          lsl.l     #2,D0
00002F78  41F9 0803 5170          lea       _BreakPointSetOrCleared.L,A0
00002F7C  015E      
00002F7E  42B0 0800 5171          clr.l     0(A0,D0.L)
                    5172   ; WatchPointSetOrCleared[i] = 0;
00002F82  2002      5173          move.l    D2,D0
00002F84  E588      5174          lsl.l     #2,D0
00002F86  41F9 0803 5175          lea       _WatchPointSetOrCleared.L,A0
00002F8A  01A2      
00002F8C  42B0 0800 5176          clr.l     0(A0,D0.L)
00002F90  5282      5177          addq.l    #1,D2
00002F92  60AC      5178          bra       main_1
                    5179   main_3:
                    5180   ; }
                    5181   ; Init_RS232() ;     // initialise the RS232 port
00002F94  4EB8 0B12 5182          jsr       _Init_RS232
                    5183   ; Init_LCD() ;
00002F98  4EB8 095E 5184          jsr       _Init_LCD
                    5185   ; for( i = 32; i < 48; i++)
00002F9C  7420      5186          moveq     #32,D2
                    5187   main_4:
00002F9E  0C82 0000 5188          cmp.l     #48,D2
00002FA2  0030      
00002FA4  6C0E      5189          bge.s     main_6
                    5190   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002FA6  2F02      5191          move.l    D2,-(A7)
00002FA8  4878 27C6 5192          pea       _UnhandledTrap.L
00002FAC  4E92      5193          jsr       (A2)
00002FAE  504F      5194          addq.w    #8,A7
00002FB0  5282      5195          addq.l    #1,D2
00002FB2  60EA      5196          bra       main_4
                    5197   main_6:
                    5198   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002FB4  4878 002F 5199          pea       47
00002FB8  4878 24A0 5200          pea       _menu.L
00002FBC  4E92      5201          jsr       (A2)
00002FBE  504F      5202          addq.w    #8,A7
                    5203   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002FC0  4878 0019 5204          pea       25
00002FC4  4878 276C 5205          pea       _UnhandledIRQ1.L
00002FC8  4E92      5206          jsr       (A2)
00002FCA  504F      5207          addq.w    #8,A7
                    5208   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002FCC  4878 001A 5209          pea       26
00002FD0  4878 2778 5210          pea       _UnhandledIRQ2.L
00002FD4  4E92      5211          jsr       (A2)
00002FD6  504F      5212          addq.w    #8,A7
                    5213   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002FD8  4878 001B 5214          pea       27
00002FDC  4878 2784 5215          pea       _UnhandledIRQ3.L
00002FE0  4E92      5216          jsr       (A2)
00002FE2  504F      5217          addq.w    #8,A7
                    5218   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002FE4  4878 001C 5219          pea       28
00002FE8  4878 2790 5220          pea       _UnhandledIRQ4.L
00002FEC  4E92      5221          jsr       (A2)
00002FEE  504F      5222          addq.w    #8,A7
                    5223   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002FF0  4878 001D 5224          pea       29
00002FF4  4878 279C 5225          pea       _UnhandledIRQ5.L
00002FF8  4E92      5226          jsr       (A2)
00002FFA  504F      5227          addq.w    #8,A7
                    5228   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002FFC  4878 001E 5229          pea       30
00003000  4878 27A8 5230          pea       _UnhandledIRQ6.L
00003004  4E92      5231          jsr       (A2)
00003006  504F      5232          addq.w    #8,A7
                    5233   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00003008  4878 001F 5234          pea       31
0000300C  4878 27BA 5235          pea       _UnhandledIRQ7.L
00003010  4E92      5236          jsr       (A2)
00003012  504F      5237          addq.w    #8,A7
                    5238   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00003014  4878 002E 5239          pea       46
00003018  4878 2192 5240          pea       _HandleBreakPoint.L
0000301C  4E92      5241          jsr       (A2)
0000301E  504F      5242          addq.w    #8,A7
                    5243   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00003020  4878 001D 5244          pea       29
00003024  4878 1836 5245          pea       _DumpRegistersandPause.L
00003028  4E92      5246          jsr       (A2)
0000302A  504F      5247          addq.w    #8,A7
                    5248   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
0000302C  4878 0002 5249          pea       2
00003030  4878 27D4 5250          pea       _BusError.L
00003034  4E92      5251          jsr       (A2)
00003036  504F      5252          addq.w    #8,A7
                    5253   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00003038  4878 0003 5254          pea       3
0000303C  4878 27E2 5255          pea       _AddressError.L
00003040  4E92      5256          jsr       (A2)
00003042  504F      5257          addq.w    #8,A7
                    5258   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00003044  4878 0004 5259          pea       4
00003048  4878 27F0 5260          pea       _IllegalInstruction.L
0000304C  4E92      5261          jsr       (A2)
0000304E  504F      5262          addq.w    #8,A7
                    5263   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00003050  4878 0005 5264          pea       5
00003054  4878 27FE 5265          pea       _Dividebyzero.L
00003058  4E92      5266          jsr       (A2)
0000305A  504F      5267          addq.w    #8,A7
                    5268   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
0000305C  4878 0006 5269          pea       6
00003060  4878 280C 5270          pea       _Check.L
00003064  4E92      5271          jsr       (A2)
00003066  504F      5272          addq.w    #8,A7
                    5273   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00003068  4878 0007 5274          pea       7
0000306C  4878 281A 5275          pea       _Trapv.L
00003070  4E92      5276          jsr       (A2)
00003072  504F      5277          addq.w    #8,A7
                    5278   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00003074  4878 0008 5279          pea       8
00003078  4878 2828 5280          pea       _PrivError.L
0000307C  4E92      5281          jsr       (A2)
0000307E  504F      5282          addq.w    #8,A7
                    5283   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00003080  4878 000F 5284          pea       15
00003084  4878 2836 5285          pea       _UnitIRQ.L
00003088  4E92      5286          jsr       (A2)
0000308A  504F      5287          addq.w    #8,A7
                    5288   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
0000308C  4878 0018 5289          pea       24
00003090  4878 280C 5290          pea       _Check.L
00003094  4E92      5291          jsr       (A2)
00003096  504F      5292          addq.w    #8,A7
                    5293   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00003098  4EB8 0BA6 5294          jsr       _FlushKeyboard
                    5295   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
0000309C  4239 0040 5296          clr.b     4194314
000030A0  000A      
                    5297   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    5298   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    5299   main_7:
000030A2  1039 0040 5300          move.b    4194306,D0
000030A6  0002      
000030A8  C03C 0002 5301          and.b     #2,D0
000030AC  0C00 0002 5302          cmp.b     #2,D0
000030B0  662A      5303          bne.s     main_9
                    5304   ; LoadFromFlashChip();
000030B2  4EB8 12DA 5305          jsr       _LoadFromFlashChip
                    5306   ; printf("\r\nRunning.....") ;
000030B6  4879 0000 5307          pea       @m68kde~2_166.L
000030BA  810A      
000030BC  4E93      5308          jsr       (A3)
000030BE  584F      5309          addq.w    #4,A7
                    5310   ; Oline1("Running.....") ;
000030C0  4879 0000 5311          pea       @m68kde~2_167.L
000030C4  811A      
000030C6  4EB8 0A02 5312          jsr       _Oline1
000030CA  584F      5313          addq.w    #4,A7
                    5314   ; GoFlag = 1;
000030CC  23FC 0000 5315          move.l    #1,_GoFlag.L
000030D0  0001 0803 
000030D4  00DC      
                    5316   ; go() ;
000030D6  4EB8 08B8 5317          jsr       _go
000030DA  60C6      5318          bra       main_7
                    5319   main_9:
                    5320   ; }
                    5321   ; // otherwise start the debug monitor
                    5322   ; Oline0(student_names) ;
000030DC  2F03      5323          move.l    D3,-(A7)
000030DE  4EB8 09D4 5324          jsr       _Oline0
000030E2  584F      5325          addq.w    #4,A7
                    5326   ; Oline1("By: PJ Davies") ;
000030E4  4879 0000 5327          pea       @m68kde~2_168.L
000030E8  8128      
000030EA  4EB8 0A02 5328          jsr       _Oline1
000030EE  584F      5329          addq.w    #4,A7
                    5330   ; printf("\r\n%s", student_names) ;
000030F0  2F03      5331          move.l    D3,-(A7)
000030F2  4879 0000 5332          pea       @m68kde~2_169.L
000030F6  8136      
000030F8  4E93      5333          jsr       (A3)
000030FA  504F      5334          addq.w    #8,A7
                    5335   ; printf("\r\n%s", student_number) ;
000030FC  2F2E FFFC 5336          move.l    -4(A6),-(A7)
00003100  4879 0000 5337          pea       @m68kde~2_169.L
00003104  8136      
00003106  4E93      5338          jsr       (A3)
00003108  504F      5339          addq.w    #8,A7
                    5340   ; menu();
0000310A  4EB8 24A0 5341          jsr       _menu
0000310E  4CDF 0C0C 5342          movem.l   (A7)+,D2/D3/A2/A3
00003112  4E5E      5343          unlk      A6
00003114  4E75      5344          rts
                    5345   ; }
                    5346   ; void FormatInstruction(void)    // for disassembly
                    5347   ; {
                    5348   _FormatInstruction:
00003116  4E56 FEC0 5349          link      A6,#-320
0000311A  48E7 3C20 5350          movem.l   D2/D3/D4/D5/A2,-(A7)
0000311E  45EE FEC0 5351          lea       -320(A6),A2
                    5352   ; short i, ilen = 0 ;
00003122  4245      5353          clr.w     D5
                    5354   ; char *iptr = Instruction ;
00003124  41F9 0803 5355          lea       _Instruction.L,A0
00003128  04E2      
0000312A  2608      5356          move.l    A0,D3
                    5357   ; char *Formatted[80], *fptr ;
                    5358   ; fptr = Formatted ;
0000312C  280A      5359          move.l    A2,D4
                    5360   ; for(i = 0; i < (short)(80); i ++)
0000312E  4242      5361          clr.w     D2
                    5362   FormatInstruction_1:
00003130  0C42 0050 5363          cmp.w     #80,D2
00003134  6C0E      5364          bge.s     FormatInstruction_3
                    5365   ; Formatted[i] = (char)(0);          // set formatted string to null
00003136  48C2      5366          ext.l     D2
00003138  2002      5367          move.l    D2,D0
0000313A  E588      5368          lsl.l     #2,D0
0000313C  42B2 0800 5369          clr.l     0(A2,D0.L)
00003140  5242      5370          addq.w    #1,D2
00003142  60EC      5371          bra       FormatInstruction_1
                    5372   FormatInstruction_3:
                    5373   ; while((*iptr != ' '))   {   // while ot a space char
                    5374   FormatInstruction_4:
00003144  2043      5375          move.l    D3,A0
00003146  1010      5376          move.b    (A0),D0
00003148  0C00 0020 5377          cmp.b     #32,D0
0000314C  6718      5378          beq.s     FormatInstruction_6
                    5379   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
0000314E  2043      5380          move.l    D3,A0
00003150  5283      5381          addq.l    #1,D3
00003152  2244      5382          move.l    D4,A1
00003154  5284      5383          addq.l    #1,D4
00003156  1290      5384          move.b    (A0),(A1)
                    5385   ; ilen ++ ;               // count length of string as we go
00003158  5245      5386          addq.w    #1,D5
                    5387   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
0000315A  2043      5388          move.l    D3,A0
0000315C  1010      5389          move.b    (A0),D0
0000315E  6604      5390          bne.s     FormatInstruction_7
                    5391   ; return ;
00003160  6000 003E 5392          bra       FormatInstruction_9
                    5393   FormatInstruction_7:
00003164  60DE      5394          bra       FormatInstruction_4
                    5395   FormatInstruction_6:
                    5396   ; }
                    5397   ; // must still be more text to process otherwise we would have returned above if got to the end
                    5398   ; for(i = 0; i < ((short)(8) - ilen); i++)
00003166  4242      5399          clr.w     D2
                    5400   FormatInstruction_10:
00003168  7008      5401          moveq     #8,D0
0000316A  4880      5402          ext.w     D0
0000316C  9045      5403          sub.w     D5,D0
0000316E  B440      5404          cmp.w     D0,D2
00003170  6C0C      5405          bge.s     FormatInstruction_12
                    5406   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00003172  2044      5407          move.l    D4,A0
00003174  5284      5408          addq.l    #1,D4
00003176  10BC 0020 5409          move.b    #32,(A0)
0000317A  5242      5410          addq.w    #1,D2
0000317C  60EA      5411          bra       FormatInstruction_10
                    5412   FormatInstruction_12:
                    5413   ; // now skip over any spaces in original unformatted string before copying the rest
                    5414   ; while((*iptr == ' '))
                    5415   FormatInstruction_13:
0000317E  2043      5416          move.l    D3,A0
00003180  1010      5417          move.b    (A0),D0
00003182  0C00 0020 5418          cmp.b     #32,D0
00003186  6604      5419          bne.s     FormatInstruction_15
                    5420   ; iptr++ ;
00003188  5283      5421          addq.l    #1,D3
0000318A  60F2      5422          bra       FormatInstruction_13
                    5423   FormatInstruction_15:
                    5424   ; strcat(fptr,iptr) ;
0000318C  2F03      5425          move.l    D3,-(A7)
0000318E  2F04      5426          move.l    D4,-(A7)
00003190  4EB9 0000 5427          jsr       _strcat
00003194  5A92      
00003196  504F      5428          addq.w    #8,A7
                    5429   ; strcpyInstruction(Formatted) ;
00003198  2F0A      5430          move.l    A2,-(A7)
0000319A  4EB8 0CE6 5431          jsr       _strcpyInstruction
0000319E  584F      5432          addq.w    #4,A7
                    5433   FormatInstruction_9:
000031A0  4CDF 043C 5434          movem.l   (A7)+,D2/D3/D4/D5/A2
000031A4  4E5E      5435          unlk      A6
000031A6  4E75      5436          rts
                    5437   ; }
                    5438   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    5439   ; {
                    5440   _Decode2BitOperandSize:
000031A8  4E56 0000 5441          link      A6,#0
000031AC  48E7 3020 5442          movem.l   D2/D3/A2,-(A7)
000031B0  362E 000A 5443          move.w    10(A6),D3
000031B4  C6BC 0000 5444          and.l     #65535,D3
000031B8  FFFF      
000031BA  45F8 0CCC 5445          lea       _strcatInstruction.L,A2
                    5446   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    5447   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
000031BE  3003      5448          move.w    D3,D0
000031C0  C07C 00C0 5449          and.w     #192,D0
000031C4  EC48      5450          lsr.w     #6,D0
000031C6  3600      5451          move.w    D0,D3
                    5452   ; if(OpCode == (unsigned short int)(0))   {
000031C8  4A43      5453          tst.w     D3
000031CA  660E      5454          bne.s     Decode2BitOperandSize_1
                    5455   ; strcatInstruction(".B ") ;
000031CC  4879 0000 5456          pea       @m68kde~2_170.L
000031D0  813C      
000031D2  4E92      5457          jsr       (A2)
000031D4  584F      5458          addq.w    #4,A7
                    5459   ; DataSize = 1 ;
000031D6  7401      5460          moveq     #1,D2
000031D8  6020      5461          bra.s     Decode2BitOperandSize_4
                    5462   Decode2BitOperandSize_1:
                    5463   ; }
                    5464   ; else if(OpCode == (unsigned short int)(1)) {
000031DA  0C43 0001 5465          cmp.w     #1,D3
000031DE  660E      5466          bne.s     Decode2BitOperandSize_3
                    5467   ; strcatInstruction(".W ") ;
000031E0  4879 0000 5468          pea       @m68kde~2_171.L
000031E4  8140      
000031E6  4E92      5469          jsr       (A2)
000031E8  584F      5470          addq.w    #4,A7
                    5471   ; DataSize = 1 ;
000031EA  7401      5472          moveq     #1,D2
000031EC  600C      5473          bra.s     Decode2BitOperandSize_4
                    5474   Decode2BitOperandSize_3:
                    5475   ; }
                    5476   ; else {
                    5477   ; strcatInstruction(".L ") ;
000031EE  4879 0000 5478          pea       @m68kde~2_172.L
000031F2  8144      
000031F4  4E92      5479          jsr       (A2)
000031F6  584F      5480          addq.w    #4,A7
                    5481   ; DataSize = 2 ;
000031F8  7402      5482          moveq     #2,D2
                    5483   Decode2BitOperandSize_4:
                    5484   ; }
                    5485   ; return DataSize;
000031FA  3002      5486          move.w    D2,D0
000031FC  4CDF 040C 5487          movem.l   (A7)+,D2/D3/A2
00003200  4E5E      5488          unlk      A6
00003202  4E75      5489          rts
                    5490   ; }
                    5491   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    5492   ; {
                    5493   _Decode3BitDataRegister:
00003204  4E56 FFFC 5494          link      A6,#-4
00003208  2F0A      5495          move.l    A2,-(A7)
0000320A  45EE FFFC 5496          lea       -4(A6),A2
                    5497   ; unsigned char RegNumber[3] ;
                    5498   ; RegNumber[0] = 'D' ;
0000320E  14BC 0044 5499          move.b    #68,(A2)
                    5500   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00003212  7030      5501          moveq     #48,D0
00003214  322E 000A 5502          move.w    10(A6),D1
00003218  C27C 0E00 5503          and.w     #3584,D1
0000321C  E049      5504          lsr.w     #8,D1
0000321E  E249      5505          lsr.w     #1,D1
00003220  D001      5506          add.b     D1,D0
00003222  1540 0001 5507          move.b    D0,1(A2)
                    5508   ; RegNumber[2] = 0 ;
00003226  422A 0002 5509          clr.b     2(A2)
                    5510   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
0000322A  2F0A      5511          move.l    A2,-(A7)
0000322C  4EB8 0CCC 5512          jsr       _strcatInstruction
00003230  584F      5513          addq.w    #4,A7
00003232  245F      5514          move.l    (A7)+,A2
00003234  4E5E      5515          unlk      A6
00003236  4E75      5516          rts
                    5517   ; }
                    5518   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5519   ; {
                    5520   _Decode3BitAddressRegister:
00003238  4E56 FFFC 5521          link      A6,#-4
0000323C  2F0A      5522          move.l    A2,-(A7)
0000323E  45EE FFFC 5523          lea       -4(A6),A2
                    5524   ; unsigned char RegNumber[3];
                    5525   ; RegNumber[0] = 'A' ;
00003242  14BC 0041 5526          move.b    #65,(A2)
                    5527   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00003246  7030      5528          moveq     #48,D0
00003248  322E 000A 5529          move.w    10(A6),D1
0000324C  D001      5530          add.b     D1,D0
0000324E  1540 0001 5531          move.b    D0,1(A2)
                    5532   ; RegNumber[2] = 0 ;
00003252  422A 0002 5533          clr.b     2(A2)
                    5534   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00003256  2F0A      5535          move.l    A2,-(A7)
00003258  4EB8 0CCC 5536          jsr       _strcatInstruction
0000325C  584F      5537          addq.w    #4,A7
0000325E  245F      5538          move.l    (A7)+,A2
00003260  4E5E      5539          unlk      A6
00003262  4E75      5540          rts
                    5541   ; }
                    5542   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5543   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5544   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5545   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5546   ; {
                    5547   _DecodeBWLDataAfterOpCodeForMove:
00003264  4E56 0000 5548          link      A6,#0
00003268  48E7 3030 5549          movem.l   D2/D3/A2/A3,-(A7)
0000326C  242E 0008 5550          move.l    8(A6),D2
00003270  45F9 0803 5551          lea       _TempString.L,A2
00003274  0546      
00003276  47F9 0000 5552          lea       _sprintf.L,A3
0000327A  5A60      
                    5553   ; unsigned char OperandSize ;
                    5554   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
0000327C  2042      5555          move.l    D2,A0
0000327E  3010      5556          move.w    (A0),D0
00003280  E048      5557          lsr.w     #8,D0
00003282  E848      5558          lsr.w     #4,D0
00003284  C07C 0003 5559          and.w     #3,D0
00003288  1600      5560          move.b    D0,D3
                    5561   ; InstructionSize += 1;
0000328A  52B9 0803 5562          addq.l    #1,_InstructionSize.L
0000328E  017E      
                    5563   ; if(OperandSize == (char)(1))                // #byte value
00003290  0C03 0001 5564          cmp.b     #1,D3
00003294  6620      5565          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5566   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003296  2042      5567          move.l    D2,A0
00003298  3228 0002 5568          move.w    2(A0),D1
0000329C  C2BC 0000 5569          and.l     #65535,D1
000032A0  FFFF      
000032A2  2F01      5570          move.l    D1,-(A7)
000032A4  4879 0000 5571          pea       @m68kde~2_173.L
000032A8  8148      
000032AA  2F0A      5572          move.l    A2,-(A7)
000032AC  4E93      5573          jsr       (A3)
000032AE  DEFC 000C 5574          add.w     #12,A7
000032B2  6000 0068 5575          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5576   DecodeBWLDataAfterOpCodeForMove_1:
                    5577   ; else if(OperandSize == (char)(3))          // #word value
000032B6  0C03 0003 5578          cmp.b     #3,D3
000032BA  6620      5579          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5580   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000032BC  2042      5581          move.l    D2,A0
000032BE  3228 0002 5582          move.w    2(A0),D1
000032C2  C2BC 0000 5583          and.l     #65535,D1
000032C6  FFFF      
000032C8  2F01      5584          move.l    D1,-(A7)
000032CA  4879 0000 5585          pea       @m68kde~2_173.L
000032CE  8148      
000032D0  2F0A      5586          move.l    A2,-(A7)
000032D2  4E93      5587          jsr       (A3)
000032D4  DEFC 000C 5588          add.w     #12,A7
000032D8  6000 0042 5589          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5590   DecodeBWLDataAfterOpCodeForMove_3:
                    5591   ; else if(OperandSize == (char)(2)) {                                       // long value
000032DC  0C03 0002 5592          cmp.b     #2,D3
000032E0  6600 003A 5593          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5594   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
000032E4  2042      5595          move.l    D2,A0
000032E6  3228 0002 5596          move.w    2(A0),D1
000032EA  C2BC 0000 5597          and.l     #65535,D1
000032EE  FFFF      
000032F0  E189      5598          lsl.l     #8,D1
000032F2  E189      5599          lsl.l     #8,D1
000032F4  2042      5600          move.l    D2,A0
000032F6  2F00      5601          move.l    D0,-(A7)
000032F8  3028 0004 5602          move.w    4(A0),D0
000032FC  C0BC 0000 5603          and.l     #65535,D0
00003300  FFFF      
00003302  8280      5604          or.l      D0,D1
00003304  201F      5605          move.l    (A7)+,D0
00003306  2F01      5606          move.l    D1,-(A7)
00003308  4879 0000 5607          pea       @m68kde~2_173.L
0000330C  8148      
0000330E  2F0A      5608          move.l    A2,-(A7)
00003310  4E93      5609          jsr       (A3)
00003312  DEFC 000C 5610          add.w     #12,A7
                    5611   ; InstructionSize += 1;
00003316  52B9 0803 5612          addq.l    #1,_InstructionSize.L
0000331A  017E      
                    5613   DecodeBWLDataAfterOpCodeForMove_5:
                    5614   ; }
                    5615   ; strcatInstruction(TempString) ;
0000331C  2F0A      5616          move.l    A2,-(A7)
0000331E  4EB8 0CCC 5617          jsr       _strcatInstruction
00003322  584F      5618          addq.w    #4,A7
00003324  4CDF 0C0C 5619          movem.l   (A7)+,D2/D3/A2/A3
00003328  4E5E      5620          unlk      A6
0000332A  4E75      5621          rts
                    5622   ; }
                    5623   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5624   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5625   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5626   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5627   ; {
                    5628   _DecodeBWLDataAfterOpCode:
0000332C  4E56 0000 5629          link      A6,#0
00003330  48E7 3038 5630          movem.l   D2/D3/A2/A3/A4,-(A7)
00003334  262E 0008 5631          move.l    8(A6),D3
00003338  45F9 0803 5632          lea       _TempString.L,A2
0000333C  0546      
0000333E  47F9 0000 5633          lea       _sprintf.L,A3
00003342  5A60      
00003344  49F9 0803 5634          lea       _InstructionSize.L,A4
00003348  017E      
                    5635   ; unsigned char OperandSize ;
                    5636   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
0000334A  2043      5637          move.l    D3,A0
0000334C  3010      5638          move.w    (A0),D0
0000334E  C07C 01C0 5639          and.w     #448,D0
00003352  EC48      5640          lsr.w     #6,D0
00003354  1400      5641          move.b    D0,D2
                    5642   ; InstructionSize += 1;
00003356  5294      5643          addq.l    #1,(A4)
                    5644   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
00003358  4A02      5645          tst.b     D2
0000335A  6706      5646          beq.s     DecodeBWLDataAfterOpCode_3
0000335C  0C02 0004 5647          cmp.b     #4,D2
00003360  6620      5648          bne.s     DecodeBWLDataAfterOpCode_1
                    5649   DecodeBWLDataAfterOpCode_3:
                    5650   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003362  2043      5651          move.l    D3,A0
00003364  3228 0002 5652          move.w    2(A0),D1
00003368  C2BC 0000 5653          and.l     #65535,D1
0000336C  FFFF      
0000336E  2F01      5654          move.l    D1,-(A7)
00003370  4879 0000 5655          pea       @m68kde~2_173.L
00003374  8148      
00003376  2F0A      5656          move.l    A2,-(A7)
00003378  4E93      5657          jsr       (A3)
0000337A  DEFC 000C 5658          add.w     #12,A7
0000337E  6000 007C 5659          bra       DecodeBWLDataAfterOpCode_7
                    5660   DecodeBWLDataAfterOpCode_1:
                    5661   ; // #word value 7 is used by divs.w instruction (not divu)
                    5662   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5663   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5664   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00003382  0C02 0001 5665          cmp.b     #1,D2
00003386  670C      5666          beq.s     DecodeBWLDataAfterOpCode_6
00003388  0C02 0005 5667          cmp.b     #5,D2
0000338C  6706      5668          beq.s     DecodeBWLDataAfterOpCode_6
0000338E  0C02 0003 5669          cmp.b     #3,D2
00003392  6620      5670          bne.s     DecodeBWLDataAfterOpCode_4
                    5671   DecodeBWLDataAfterOpCode_6:
                    5672   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003394  2043      5673          move.l    D3,A0
00003396  3228 0002 5674          move.w    2(A0),D1
0000339A  C2BC 0000 5675          and.l     #65535,D1
0000339E  FFFF      
000033A0  2F01      5676          move.l    D1,-(A7)
000033A2  4879 0000 5677          pea       @m68kde~2_173.L
000033A6  8148      
000033A8  2F0A      5678          move.l    A2,-(A7)
000033AA  4E93      5679          jsr       (A3)
000033AC  DEFC 000C 5680          add.w     #12,A7
000033B0  6000 004A 5681          bra       DecodeBWLDataAfterOpCode_7
                    5682   DecodeBWLDataAfterOpCode_4:
                    5683   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
000033B4  0C02 0002 5684          cmp.b     #2,D2
000033B8  670E      5685          beq.s     DecodeBWLDataAfterOpCode_9
000033BA  0C02 0006 5686          cmp.b     #6,D2
000033BE  6708      5687          beq.s     DecodeBWLDataAfterOpCode_9
000033C0  0C02 0007 5688          cmp.b     #7,D2
000033C4  6600 0036 5689          bne       DecodeBWLDataAfterOpCode_7
                    5690   DecodeBWLDataAfterOpCode_9:
                    5691   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
000033C8  2043      5692          move.l    D3,A0
000033CA  3228 0002 5693          move.w    2(A0),D1
000033CE  C2BC 0000 5694          and.l     #65535,D1
000033D2  FFFF      
000033D4  E189      5695          lsl.l     #8,D1
000033D6  E189      5696          lsl.l     #8,D1
000033D8  2043      5697          move.l    D3,A0
000033DA  2F00      5698          move.l    D0,-(A7)
000033DC  3028 0004 5699          move.w    4(A0),D0
000033E0  C0BC 0000 5700          and.l     #65535,D0
000033E4  FFFF      
000033E6  8280      5701          or.l      D0,D1
000033E8  201F      5702          move.l    (A7)+,D0
000033EA  2F01      5703          move.l    D1,-(A7)
000033EC  4879 0000 5704          pea       @m68kde~2_173.L
000033F0  8148      
000033F2  2F0A      5705          move.l    A2,-(A7)
000033F4  4E93      5706          jsr       (A3)
000033F6  DEFC 000C 5707          add.w     #12,A7
                    5708   ; InstructionSize += 1;
000033FA  5294      5709          addq.l    #1,(A4)
                    5710   DecodeBWLDataAfterOpCode_7:
                    5711   ; }
                    5712   ; // special case for divs - bugger!!!
                    5713   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
000033FC  2043      5714          move.l    D3,A0
000033FE  3010      5715          move.w    (A0),D0
00003400  C07C F1C0 5716          and.w     #61888,D0
00003404  0C40 81C0 5717          cmp.w     #33216,D0
00003408  6622      5718          bne.s     DecodeBWLDataAfterOpCode_10
                    5719   ; {
                    5720   ; InstructionSize = 2 ;
0000340A  28BC 0000 5721          move.l    #2,(A4)
0000340E  0002      
                    5722   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003410  2043      5723          move.l    D3,A0
00003412  3228 0002 5724          move.w    2(A0),D1
00003416  C2BC 0000 5725          and.l     #65535,D1
0000341A  FFFF      
0000341C  2F01      5726          move.l    D1,-(A7)
0000341E  4879 0000 5727          pea       @m68kde~2_173.L
00003422  8148      
00003424  2F0A      5728          move.l    A2,-(A7)
00003426  4E93      5729          jsr       (A3)
00003428  DEFC 000C 5730          add.w     #12,A7
                    5731   DecodeBWLDataAfterOpCode_10:
                    5732   ; }
                    5733   ; strcatInstruction(TempString) ;
0000342C  2F0A      5734          move.l    A2,-(A7)
0000342E  4EB8 0CCC 5735          jsr       _strcatInstruction
00003432  584F      5736          addq.w    #4,A7
00003434  4CDF 1C0C 5737          movem.l   (A7)+,D2/D3/A2/A3/A4
00003438  4E5E      5738          unlk      A6
0000343A  4E75      5739          rts
                    5740   ; }
                    5741   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5742   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5743   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5744   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5745   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5746   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5747   ; {
                    5748   _Decode6BitEA:
0000343C  4E56 FFF4 5749          link      A6,#-12
00003440  48E7 3F3C 5750          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003444  45F8 0CCC 5751          lea       _strcatInstruction.L,A2
00003448  47F9 0803 5752          lea       _TempString.L,A3
0000344C  0546      
0000344E  282E 0008 5753          move.l    8(A6),D4
00003452  49F9 0000 5754          lea       _sprintf.L,A4
00003456  5A60      
00003458  4BF9 0803 5755          lea       _InstructionSize.L,A5
0000345C  017E      
0000345E  3C2E 0012 5756          move.w    18(A6),D6
00003462  CCBC 0000 5757          and.l     #65535,D6
00003466  FFFF      
                    5758   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5759   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5760   ; unsigned char RegNumber[3];
                    5761   ; signed char offset ;
                    5762   ; unsigned short int Xn, XnSize ;
                    5763   ; if(EAChoice == 0)   {   // if EA in bits 5-0
00003468  202E 000C 5764          move.l    12(A6),D0
0000346C  6620      5765          bne.s     Decode6BitEA_1
                    5766   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
0000346E  2044      5767          move.l    D4,A0
00003470  3010      5768          move.w    (A0),D0
00003472  E648      5769          lsr.w     #3,D0
00003474  C07C 00FF 5770          and.w     #255,D0
00003478  C07C 0007 5771          and.w     #7,D0
0000347C  1A00      5772          move.b    D0,D5
                    5773   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
0000347E  2044      5774          move.l    D4,A0
00003480  3010      5775          move.w    (A0),D0
00003482  C07C 00FF 5776          and.w     #255,D0
00003486  C07C 0007 5777          and.w     #7,D0
0000348A  1600      5778          move.b    D0,D3
0000348C  6022      5779          bra.s     Decode6BitEA_2
                    5780   Decode6BitEA_1:
                    5781   ; }
                    5782   ; else    {               // else EA in bits 11-6
                    5783   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
0000348E  2044      5784          move.l    D4,A0
00003490  3010      5785          move.w    (A0),D0
00003492  EC48      5786          lsr.w     #6,D0
00003494  C07C 00FF 5787          and.w     #255,D0
00003498  C07C 0007 5788          and.w     #7,D0
0000349C  1A00      5789          move.b    D0,D5
                    5790   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
0000349E  2044      5791          move.l    D4,A0
000034A0  3010      5792          move.w    (A0),D0
000034A2  E048      5793          lsr.w     #8,D0
000034A4  E248      5794          lsr.w     #1,D0
000034A6  C07C 00FF 5795          and.w     #255,D0
000034AA  C07C 0007 5796          and.w     #7,D0
000034AE  1600      5797          move.b    D0,D3
                    5798   Decode6BitEA_2:
                    5799   ; }
                    5800   ; if(EAChoice == 0)    {
000034B0  202E 000C 5801          move.l    12(A6),D0
000034B4  6600 0034 5802          bne       Decode6BitEA_3
                    5803   ; ExWord1 = OpCode[1+DataSize] ;
000034B8  2044      5804          move.l    D4,A0
000034BA  7001      5805          moveq     #1,D0
000034BC  4880      5806          ext.w     D0
000034BE  48C0      5807          ext.l     D0
000034C0  CCBC 0000 5808          and.l     #65535,D6
000034C4  FFFF      
000034C6  D086      5809          add.l     D6,D0
000034C8  E388      5810          lsl.l     #1,D0
000034CA  3430 0800 5811          move.w    0(A0,D0.L),D2
                    5812   ; ExWord2 = OpCode[2+DataSize] ;
000034CE  2044      5813          move.l    D4,A0
000034D0  7002      5814          moveq     #2,D0
000034D2  4880      5815          ext.w     D0
000034D4  48C0      5816          ext.l     D0
000034D6  CCBC 0000 5817          and.l     #65535,D6
000034DA  FFFF      
000034DC  D086      5818          add.l     D6,D0
000034DE  E388      5819          lsl.l     #1,D0
000034E0  3D70 0800 5820          move.w    0(A0,D0.L),-8(A6)
000034E4  FFF8      
000034E6  6000 007E 5821          bra       Decode6BitEA_7
                    5822   Decode6BitEA_3:
                    5823   ; }
                    5824   ; else if(EAChoice == 1)   {
000034EA  202E 000C 5825          move.l    12(A6),D0
000034EE  0C80 0000 5826          cmp.l     #1,D0
000034F2  0001      
000034F4  6600 0034 5827          bne       Decode6BitEA_5
                    5828   ; ExWord1 = OpCode[3+DataSize] ;
000034F8  2044      5829          move.l    D4,A0
000034FA  7003      5830          moveq     #3,D0
000034FC  4880      5831          ext.w     D0
000034FE  48C0      5832          ext.l     D0
00003500  CCBC 0000 5833          and.l     #65535,D6
00003504  FFFF      
00003506  D086      5834          add.l     D6,D0
00003508  E388      5835          lsl.l     #1,D0
0000350A  3430 0800 5836          move.w    0(A0,D0.L),D2
                    5837   ; ExWord2 = OpCode[4+DataSize] ;
0000350E  2044      5838          move.l    D4,A0
00003510  7004      5839          moveq     #4,D0
00003512  4880      5840          ext.w     D0
00003514  48C0      5841          ext.l     D0
00003516  CCBC 0000 5842          and.l     #65535,D6
0000351A  FFFF      
0000351C  D086      5843          add.l     D6,D0
0000351E  E388      5844          lsl.l     #1,D0
00003520  3D70 0800 5845          move.w    0(A0,D0.L),-8(A6)
00003524  FFF8      
00003526  6000 003E 5846          bra       Decode6BitEA_7
                    5847   Decode6BitEA_5:
                    5848   ; }
                    5849   ; else if(EAChoice == 2)   {  // for move instruction
0000352A  202E 000C 5850          move.l    12(A6),D0
0000352E  0C80 0000 5851          cmp.l     #2,D0
00003532  0002      
00003534  6600 0030 5852          bne       Decode6BitEA_7
                    5853   ; ExWord1 = OpCode[1+DataSize] ;
00003538  2044      5854          move.l    D4,A0
0000353A  7001      5855          moveq     #1,D0
0000353C  4880      5856          ext.w     D0
0000353E  48C0      5857          ext.l     D0
00003540  CCBC 0000 5858          and.l     #65535,D6
00003544  FFFF      
00003546  D086      5859          add.l     D6,D0
00003548  E388      5860          lsl.l     #1,D0
0000354A  3430 0800 5861          move.w    0(A0,D0.L),D2
                    5862   ; ExWord2 = OpCode[2+DataSize] ;
0000354E  2044      5863          move.l    D4,A0
00003550  7002      5864          moveq     #2,D0
00003552  4880      5865          ext.w     D0
00003554  48C0      5866          ext.l     D0
00003556  CCBC 0000 5867          and.l     #65535,D6
0000355A  FFFF      
0000355C  D086      5868          add.l     D6,D0
0000355E  E388      5869          lsl.l     #1,D0
00003560  3D70 0800 5870          move.w    0(A0,D0.L),-8(A6)
00003564  FFF8      
                    5871   Decode6BitEA_7:
                    5872   ; }
                    5873   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
00003566  4A05      5874          tst.b     D5
00003568  661E      5875          bne.s     Decode6BitEA_9
                    5876   ; RegNumber[0] = 'D' ;
0000356A  1D7C 0044 5877          move.b    #68,-6+0(A6)
0000356E  FFFA      
                    5878   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
00003570  7030      5879          moveq     #48,D0
00003572  D003      5880          add.b     D3,D0
00003574  1D40 FFFB 5881          move.b    D0,-6+1(A6)
                    5882   ; RegNumber[2] = 0 ;
00003578  422E FFFC 5883          clr.b     -6+2(A6)
                    5884   ; strcatInstruction(RegNumber) ;
0000357C  486E FFFA 5885          pea       -6(A6)
00003580  4E92      5886          jsr       (A2)
00003582  584F      5887          addq.w    #4,A7
00003584  6000 02D6 5888          bra       Decode6BitEA_44
                    5889   Decode6BitEA_9:
                    5890   ; }
                    5891   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
00003588  0C05 0001 5892          cmp.b     #1,D5
0000358C  6616      5893          bne.s     Decode6BitEA_11
                    5894   ; Decode3BitAddressRegister(OperandRegister) ;
0000358E  C67C 00FF 5895          and.w     #255,D3
00003592  C6BC 0000 5896          and.l     #65535,D3
00003596  FFFF      
00003598  2F03      5897          move.l    D3,-(A7)
0000359A  4EB8 3238 5898          jsr       _Decode3BitAddressRegister
0000359E  584F      5899          addq.w    #4,A7
000035A0  6000 02BA 5900          bra       Decode6BitEA_44
                    5901   Decode6BitEA_11:
                    5902   ; }
                    5903   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
000035A4  0C05 0002 5904          cmp.b     #2,D5
000035A8  662A      5905          bne.s     Decode6BitEA_13
                    5906   ; strcatInstruction("(") ;
000035AA  4879 0000 5907          pea       @m68kde~2_174.L
000035AE  814E      
000035B0  4E92      5908          jsr       (A2)
000035B2  584F      5909          addq.w    #4,A7
                    5910   ; Decode3BitAddressRegister(OperandRegister) ;
000035B4  C67C 00FF 5911          and.w     #255,D3
000035B8  C6BC 0000 5912          and.l     #65535,D3
000035BC  FFFF      
000035BE  2F03      5913          move.l    D3,-(A7)
000035C0  4EB8 3238 5914          jsr       _Decode3BitAddressRegister
000035C4  584F      5915          addq.w    #4,A7
                    5916   ; strcatInstruction(")") ;
000035C6  4879 0000 5917          pea       @m68kde~2_175.L
000035CA  8150      
000035CC  4E92      5918          jsr       (A2)
000035CE  584F      5919          addq.w    #4,A7
000035D0  6000 028A 5920          bra       Decode6BitEA_44
                    5921   Decode6BitEA_13:
                    5922   ; }
                    5923   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
000035D4  0C05 0003 5924          cmp.b     #3,D5
000035D8  662A      5925          bne.s     Decode6BitEA_15
                    5926   ; strcatInstruction("(") ;
000035DA  4879 0000 5927          pea       @m68kde~2_174.L
000035DE  814E      
000035E0  4E92      5928          jsr       (A2)
000035E2  584F      5929          addq.w    #4,A7
                    5930   ; Decode3BitAddressRegister(OperandRegister) ;
000035E4  C67C 00FF 5931          and.w     #255,D3
000035E8  C6BC 0000 5932          and.l     #65535,D3
000035EC  FFFF      
000035EE  2F03      5933          move.l    D3,-(A7)
000035F0  4EB8 3238 5934          jsr       _Decode3BitAddressRegister
000035F4  584F      5935          addq.w    #4,A7
                    5936   ; strcatInstruction(")+") ;
000035F6  4879 0000 5937          pea       @m68kde~2_176.L
000035FA  8152      
000035FC  4E92      5938          jsr       (A2)
000035FE  584F      5939          addq.w    #4,A7
00003600  6000 025A 5940          bra       Decode6BitEA_44
                    5941   Decode6BitEA_15:
                    5942   ; }
                    5943   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
00003604  0C05 0004 5944          cmp.b     #4,D5
00003608  662A      5945          bne.s     Decode6BitEA_17
                    5946   ; strcatInstruction("-(") ;
0000360A  4879 0000 5947          pea       @m68kde~2_177.L
0000360E  8156      
00003610  4E92      5948          jsr       (A2)
00003612  584F      5949          addq.w    #4,A7
                    5950   ; Decode3BitAddressRegister(OperandRegister) ;
00003614  C67C 00FF 5951          and.w     #255,D3
00003618  C6BC 0000 5952          and.l     #65535,D3
0000361C  FFFF      
0000361E  2F03      5953          move.l    D3,-(A7)
00003620  4EB8 3238 5954          jsr       _Decode3BitAddressRegister
00003624  584F      5955          addq.w    #4,A7
                    5956   ; strcatInstruction(")") ;
00003626  4879 0000 5957          pea       @m68kde~2_175.L
0000362A  8150      
0000362C  4E92      5958          jsr       (A2)
0000362E  584F      5959          addq.w    #4,A7
00003630  6000 022A 5960          bra       Decode6BitEA_44
                    5961   Decode6BitEA_17:
                    5962   ; }
                    5963   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
00003634  0C05 0005 5964          cmp.b     #5,D5
00003638  6626      5965          bne.s     Decode6BitEA_19
                    5966   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
0000363A  C6BC 0000 5967          and.l     #255,D3
0000363E  00FF      
00003640  2F03      5968          move.l    D3,-(A7)
00003642  48C2      5969          ext.l     D2
00003644  2F02      5970          move.l    D2,-(A7)
00003646  4879 0000 5971          pea       @m68kde~2_178.L
0000364A  815A      
0000364C  2F0B      5972          move.l    A3,-(A7)
0000364E  4E94      5973          jsr       (A4)
00003650  DEFC 0010 5974          add.w     #16,A7
                    5975   ; strcatInstruction(TempString) ;
00003654  2F0B      5976          move.l    A3,-(A7)
00003656  4E92      5977          jsr       (A2)
00003658  584F      5978          addq.w    #4,A7
                    5979   ; InstructionSize += 1;
0000365A  5295      5980          addq.l    #1,(A5)
0000365C  6000 01FE 5981          bra       Decode6BitEA_44
                    5982   Decode6BitEA_19:
                    5983   ; }
                    5984   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
00003660  0C05 0006 5985          cmp.b     #6,D5
00003664  6600 00AA 5986          bne       Decode6BitEA_21
                    5987   ; offset = ExWord1 & (short int)(0x00FF);
00003668  3002      5988          move.w    D2,D0
0000366A  C07C 00FF 5989          and.w     #255,D0
0000366E  1D40 FFFD 5990          move.b    D0,-3(A6)
                    5991   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
00003672  C6BC 0000 5992          and.l     #255,D3
00003676  00FF      
00003678  2F03      5993          move.l    D3,-(A7)
0000367A  122E FFFD 5994          move.b    -3(A6),D1
0000367E  4881      5995          ext.w     D1
00003680  48C1      5996          ext.l     D1
00003682  2F01      5997          move.l    D1,-(A7)
00003684  4879 0000 5998          pea       @m68kde~2_179.L
00003688  8162      
0000368A  2F0B      5999          move.l    A3,-(A7)
0000368C  4E94      6000          jsr       (A4)
0000368E  DEFC 0010 6001          add.w     #16,A7
                    6002   ; strcatInstruction(TempString) ;
00003692  2F0B      6003          move.l    A3,-(A7)
00003694  4E92      6004          jsr       (A2)
00003696  584F      6005          addq.w    #4,A7
                    6006   ; InstructionSize += 1;
00003698  5295      6007          addq.l    #1,(A5)
                    6008   ; // decode the Xn bit
                    6009   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000369A  3002      6010          move.w    D2,D0
0000369C  C07C 8000 6011          and.w     #32768,D0
000036A0  660C      6012          bne.s     Decode6BitEA_23
                    6013   ; strcatInstruction("D") ;
000036A2  4879 0000 6014          pea       @m68kde~2_180.L
000036A6  816A      
000036A8  4E92      6015          jsr       (A2)
000036AA  584F      6016          addq.w    #4,A7
000036AC  600A      6017          bra.s     Decode6BitEA_24
                    6018   Decode6BitEA_23:
                    6019   ; else
                    6020   ; strcatInstruction("A") ;
000036AE  4879 0000 6021          pea       @m68kde~2_181.L
000036B2  816C      
000036B4  4E92      6022          jsr       (A2)
000036B6  584F      6023          addq.w    #4,A7
                    6024   Decode6BitEA_24:
                    6025   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
000036B8  3002      6026          move.w    D2,D0
000036BA  C07C 7000 6027          and.w     #28672,D0
000036BE  E048      6028          lsr.w     #8,D0
000036C0  E848      6029          lsr.w     #4,D0
000036C2  3D40 FFFE 6030          move.w    D0,-2(A6)
                    6031   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000036C6  322E FFFE 6032          move.w    -2(A6),D1
000036CA  C2BC 0000 6033          and.l     #65535,D1
000036CE  FFFF      
000036D0  2F01      6034          move.l    D1,-(A7)
000036D2  4879 0000 6035          pea       @m68kde~2_182.L
000036D6  816E      
000036D8  2F0B      6036          move.l    A3,-(A7)
000036DA  4E94      6037          jsr       (A4)
000036DC  DEFC 000C 6038          add.w     #12,A7
                    6039   ; strcatInstruction(TempString) ;
000036E0  2F0B      6040          move.l    A3,-(A7)
000036E2  4E92      6041          jsr       (A2)
000036E4  584F      6042          addq.w    #4,A7
                    6043   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000036E6  3002      6044          move.w    D2,D0
000036E8  C07C 0800 6045          and.w     #2048,D0
000036EC  E048      6046          lsr.w     #8,D0
000036EE  E648      6047          lsr.w     #3,D0
000036F0  3E00      6048          move.w    D0,D7
                    6049   ; if(XnSize == 0)
000036F2  4A47      6050          tst.w     D7
000036F4  660C      6051          bne.s     Decode6BitEA_25
                    6052   ; strcatInstruction(".W)") ;
000036F6  4879 0000 6053          pea       @m68kde~2_183.L
000036FA  8172      
000036FC  4E92      6054          jsr       (A2)
000036FE  584F      6055          addq.w    #4,A7
00003700  600A      6056          bra.s     Decode6BitEA_26
                    6057   Decode6BitEA_25:
                    6058   ; else
                    6059   ; strcatInstruction(".L)") ;
00003702  4879 0000 6060          pea       @m68kde~2_184.L
00003706  8176      
00003708  4E92      6061          jsr       (A2)
0000370A  584F      6062          addq.w    #4,A7
                    6063   Decode6BitEA_26:
0000370C  6000 014E 6064          bra       Decode6BitEA_44
                    6065   Decode6BitEA_21:
                    6066   ; }
                    6067   ; else if(OperandMode == (unsigned char)(7)) {
00003710  0C05 0007 6068          cmp.b     #7,D5
00003714  6600 0146 6069          bne       Decode6BitEA_44
                    6070   ; if(OperandRegister == 0) {                               // EA = (xxx).W
00003718  4A03      6071          tst.b     D3
0000371A  661E      6072          bne.s     Decode6BitEA_29
                    6073   ; sprintf(TempString, "$%X", ExWord1) ;
0000371C  48C2      6074          ext.l     D2
0000371E  2F02      6075          move.l    D2,-(A7)
00003720  4879 0000 6076          pea       @m68kde~2_185.L
00003724  817A      
00003726  2F0B      6077          move.l    A3,-(A7)
00003728  4E94      6078          jsr       (A4)
0000372A  DEFC 000C 6079          add.w     #12,A7
                    6080   ; strcatInstruction(TempString) ;
0000372E  2F0B      6081          move.l    A3,-(A7)
00003730  4E92      6082          jsr       (A2)
00003732  584F      6083          addq.w    #4,A7
                    6084   ; InstructionSize += 1;
00003734  5295      6085          addq.l    #1,(A5)
00003736  6000 0124 6086          bra       Decode6BitEA_44
                    6087   Decode6BitEA_29:
                    6088   ; }
                    6089   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
0000373A  0C03 0001 6090          cmp.b     #1,D3
0000373E  6600 0032 6091          bne       Decode6BitEA_31
                    6092   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
00003742  3202      6093          move.w    D2,D1
00003744  48C1      6094          ext.l     D1
00003746  E189      6095          lsl.l     #8,D1
00003748  E189      6096          lsl.l     #8,D1
0000374A  2F00      6097          move.l    D0,-(A7)
0000374C  302E FFF8 6098          move.w    -8(A6),D0
00003750  48C0      6099          ext.l     D0
00003752  8280      6100          or.l      D0,D1
00003754  201F      6101          move.l    (A7)+,D0
00003756  2F01      6102          move.l    D1,-(A7)
00003758  4879 0000 6103          pea       @m68kde~2_185.L
0000375C  817A      
0000375E  2F0B      6104          move.l    A3,-(A7)
00003760  4E94      6105          jsr       (A4)
00003762  DEFC 000C 6106          add.w     #12,A7
                    6107   ; strcatInstruction(TempString) ;
00003766  2F0B      6108          move.l    A3,-(A7)
00003768  4E92      6109          jsr       (A2)
0000376A  584F      6110          addq.w    #4,A7
                    6111   ; InstructionSize += 2;
0000376C  5495      6112          addq.l    #2,(A5)
0000376E  6000 00EC 6113          bra       Decode6BitEA_44
                    6114   Decode6BitEA_31:
                    6115   ; }
                    6116   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
00003772  0C03 0004 6117          cmp.b     #4,D3
00003776  661C      6118          bne.s     Decode6BitEA_33
                    6119   ; if(IsItMoveInstruction == 0)        //not move instruction
00003778  302E 0016 6120          move.w    22(A6),D0
0000377C  660A      6121          bne.s     Decode6BitEA_35
                    6122   ; DecodeBWLDataAfterOpCode(OpCode);
0000377E  2F04      6123          move.l    D4,-(A7)
00003780  4EB8 332C 6124          jsr       _DecodeBWLDataAfterOpCode
00003784  584F      6125          addq.w    #4,A7
00003786  6008      6126          bra.s     Decode6BitEA_36
                    6127   Decode6BitEA_35:
                    6128   ; else
                    6129   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
00003788  2F04      6130          move.l    D4,-(A7)
0000378A  4EB8 3264 6131          jsr       _DecodeBWLDataAfterOpCodeForMove
0000378E  584F      6132          addq.w    #4,A7
                    6133   Decode6BitEA_36:
00003790  6000 00CA 6134          bra       Decode6BitEA_44
                    6135   Decode6BitEA_33:
                    6136   ; }
                    6137   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
00003794  0C03 0002 6138          cmp.b     #2,D3
00003798  661E      6139          bne.s     Decode6BitEA_37
                    6140   ; sprintf(TempString, "%d(PC)", ExWord1) ;
0000379A  48C2      6141          ext.l     D2
0000379C  2F02      6142          move.l    D2,-(A7)
0000379E  4879 0000 6143          pea       @m68kde~2_186.L
000037A2  817E      
000037A4  2F0B      6144          move.l    A3,-(A7)
000037A6  4E94      6145          jsr       (A4)
000037A8  DEFC 000C 6146          add.w     #12,A7
                    6147   ; strcatInstruction(TempString) ;
000037AC  2F0B      6148          move.l    A3,-(A7)
000037AE  4E92      6149          jsr       (A2)
000037B0  584F      6150          addq.w    #4,A7
                    6151   ; InstructionSize += 1;
000037B2  5295      6152          addq.l    #1,(A5)
000037B4  6000 00A6 6153          bra       Decode6BitEA_44
                    6154   Decode6BitEA_37:
                    6155   ; }
                    6156   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
000037B8  0C03 0003 6157          cmp.b     #3,D3
000037BC  6600 009E 6158          bne       Decode6BitEA_44
                    6159   ; offset = ExWord1 & (short int)(0x00FF);
000037C0  3002      6160          move.w    D2,D0
000037C2  C07C 00FF 6161          and.w     #255,D0
000037C6  1D40 FFFD 6162          move.b    D0,-3(A6)
                    6163   ; sprintf(TempString, "%d(PC,", offset ) ;
000037CA  122E FFFD 6164          move.b    -3(A6),D1
000037CE  4881      6165          ext.w     D1
000037D0  48C1      6166          ext.l     D1
000037D2  2F01      6167          move.l    D1,-(A7)
000037D4  4879 0000 6168          pea       @m68kde~2_187.L
000037D8  8186      
000037DA  2F0B      6169          move.l    A3,-(A7)
000037DC  4E94      6170          jsr       (A4)
000037DE  DEFC 000C 6171          add.w     #12,A7
                    6172   ; strcatInstruction(TempString) ;
000037E2  2F0B      6173          move.l    A3,-(A7)
000037E4  4E92      6174          jsr       (A2)
000037E6  584F      6175          addq.w    #4,A7
                    6176   ; InstructionSize += 1;
000037E8  5295      6177          addq.l    #1,(A5)
                    6178   ; // decode the Xn bit
                    6179   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
000037EA  3002      6180          move.w    D2,D0
000037EC  C07C 8000 6181          and.w     #32768,D0
000037F0  660C      6182          bne.s     Decode6BitEA_41
                    6183   ; strcatInstruction("D") ;
000037F2  4879 0000 6184          pea       @m68kde~2_180.L
000037F6  816A      
000037F8  4E92      6185          jsr       (A2)
000037FA  584F      6186          addq.w    #4,A7
000037FC  600A      6187          bra.s     Decode6BitEA_42
                    6188   Decode6BitEA_41:
                    6189   ; else
                    6190   ; strcatInstruction("A") ;
000037FE  4879 0000 6191          pea       @m68kde~2_181.L
00003802  816C      
00003804  4E92      6192          jsr       (A2)
00003806  584F      6193          addq.w    #4,A7
                    6194   Decode6BitEA_42:
                    6195   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
00003808  3002      6196          move.w    D2,D0
0000380A  C07C 7000 6197          and.w     #28672,D0
0000380E  E048      6198          lsr.w     #8,D0
00003810  E848      6199          lsr.w     #4,D0
00003812  3D40 FFFE 6200          move.w    D0,-2(A6)
                    6201   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
00003816  322E FFFE 6202          move.w    -2(A6),D1
0000381A  C2BC 0000 6203          and.l     #65535,D1
0000381E  FFFF      
00003820  2F01      6204          move.l    D1,-(A7)
00003822  4879 0000 6205          pea       @m68kde~2_182.L
00003826  816E      
00003828  2F0B      6206          move.l    A3,-(A7)
0000382A  4E94      6207          jsr       (A4)
0000382C  DEFC 000C 6208          add.w     #12,A7
                    6209   ; strcatInstruction(TempString) ;
00003830  2F0B      6210          move.l    A3,-(A7)
00003832  4E92      6211          jsr       (A2)
00003834  584F      6212          addq.w    #4,A7
                    6213   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
00003836  3002      6214          move.w    D2,D0
00003838  C07C 0800 6215          and.w     #2048,D0
0000383C  E048      6216          lsr.w     #8,D0
0000383E  E648      6217          lsr.w     #3,D0
00003840  3E00      6218          move.w    D0,D7
                    6219   ; if(XnSize == 0)
00003842  4A47      6220          tst.w     D7
00003844  660C      6221          bne.s     Decode6BitEA_43
                    6222   ; strcatInstruction(".W)") ;
00003846  4879 0000 6223          pea       @m68kde~2_183.L
0000384A  8172      
0000384C  4E92      6224          jsr       (A2)
0000384E  584F      6225          addq.w    #4,A7
00003850  600A      6226          bra.s     Decode6BitEA_44
                    6227   Decode6BitEA_43:
                    6228   ; else
                    6229   ; strcatInstruction(".L)") ;
00003852  4879 0000 6230          pea       @m68kde~2_184.L
00003856  8176      
00003858  4E92      6231          jsr       (A2)
0000385A  584F      6232          addq.w    #4,A7
                    6233   Decode6BitEA_44:
0000385C  4CDF 3CFC 6234          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00003860  4E5E      6235          unlk      A6
00003862  4E75      6236          rts
                    6237   ; }
                    6238   ; }
                    6239   ; }
                    6240   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    6241   ; {
                    6242   _Decode3BitOperandMode:
00003864  4E56 FFFC 6243          link      A6,#-4
00003868  2F02      6244          move.l    D2,-(A7)
0000386A  242E 0008 6245          move.l    8(A6),D2
                    6246   ; unsigned short int OperandMode;
                    6247   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
0000386E  2042      6248          move.l    D2,A0
00003870  3010      6249          move.w    (A0),D0
00003872  C07C 0100 6250          and.w     #256,D0
00003876  E048      6251          lsr.w     #8,D0
00003878  3D40 FFFE 6252          move.w    D0,-2(A6)
                    6253   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
0000387C  2042      6254          move.l    D2,A0
0000387E  3210      6255          move.w    (A0),D1
00003880  C2BC 0000 6256          and.l     #65535,D1
00003884  FFFF      
00003886  2F01      6257          move.l    D1,-(A7)
00003888  4EB8 31A8 6258          jsr       _Decode2BitOperandSize
0000388C  584F      6259          addq.w    #4,A7
                    6260   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
0000388E  302E FFFE 6261          move.w    -2(A6),D0
00003892  6600 0032 6262          bne       Decode3BitOperandMode_1
                    6263   ; Decode6BitEA(OpCode,0,0,0) ;
00003896  42A7      6264          clr.l     -(A7)
00003898  42A7      6265          clr.l     -(A7)
0000389A  42A7      6266          clr.l     -(A7)
0000389C  2F02      6267          move.l    D2,-(A7)
0000389E  4EB8 343C 6268          jsr       _Decode6BitEA
000038A2  DEFC 0010 6269          add.w     #16,A7
                    6270   ; strcatInstruction(",") ;
000038A6  4879 0000 6271          pea       @m68kde~2_188.L
000038AA  818E      
000038AC  4EB8 0CCC 6272          jsr       _strcatInstruction
000038B0  584F      6273          addq.w    #4,A7
                    6274   ; Decode3BitDataRegister(*OpCode) ;
000038B2  2042      6275          move.l    D2,A0
000038B4  3210      6276          move.w    (A0),D1
000038B6  C2BC 0000 6277          and.l     #65535,D1
000038BA  FFFF      
000038BC  2F01      6278          move.l    D1,-(A7)
000038BE  4EB8 3204 6279          jsr       _Decode3BitDataRegister
000038C2  584F      6280          addq.w    #4,A7
000038C4  602E      6281          bra.s     Decode3BitOperandMode_2
                    6282   Decode3BitOperandMode_1:
                    6283   ; }
                    6284   ; else {                                                         // Destination is in EA
                    6285   ; Decode3BitDataRegister(*OpCode) ;
000038C6  2042      6286          move.l    D2,A0
000038C8  3210      6287          move.w    (A0),D1
000038CA  C2BC 0000 6288          and.l     #65535,D1
000038CE  FFFF      
000038D0  2F01      6289          move.l    D1,-(A7)
000038D2  4EB8 3204 6290          jsr       _Decode3BitDataRegister
000038D6  584F      6291          addq.w    #4,A7
                    6292   ; strcatInstruction(",") ;
000038D8  4879 0000 6293          pea       @m68kde~2_188.L
000038DC  818E      
000038DE  4EB8 0CCC 6294          jsr       _strcatInstruction
000038E2  584F      6295          addq.w    #4,A7
                    6296   ; Decode6BitEA(OpCode,0,0,0) ;
000038E4  42A7      6297          clr.l     -(A7)
000038E6  42A7      6298          clr.l     -(A7)
000038E8  42A7      6299          clr.l     -(A7)
000038EA  2F02      6300          move.l    D2,-(A7)
000038EC  4EB8 343C 6301          jsr       _Decode6BitEA
000038F0  DEFC 0010 6302          add.w     #16,A7
                    6303   Decode3BitOperandMode_2:
000038F4  241F      6304          move.l    (A7)+,D2
000038F6  4E5E      6305          unlk      A6
000038F8  4E75      6306          rts
                    6307   ; }
                    6308   ; }
                    6309   ; void DecodeBranchCondition(unsigned short int Condition)
                    6310   ; {
                    6311   _DecodeBranchCondition:
000038FA  4E56 0000 6312          link      A6,#0
000038FE  48E7 2020 6313          movem.l   D2/A2,-(A7)
00003902  45F8 0CCC 6314          lea       _strcatInstruction.L,A2
00003906  342E 000A 6315          move.w    10(A6),D2
0000390A  C4BC 0000 6316          and.l     #65535,D2
0000390E  FFFF      
                    6317   ; if(Condition == (unsigned short int)(0x04))
00003910  0C42 0004 6318          cmp.w     #4,D2
00003914  660E      6319          bne.s     DecodeBranchCondition_1
                    6320   ; strcatInstruction("CC") ;
00003916  4879 0000 6321          pea       @m68kde~2_189.L
0000391A  8190      
0000391C  4E92      6322          jsr       (A2)
0000391E  584F      6323          addq.w    #4,A7
00003920  6000 011C 6324          bra       DecodeBranchCondition_30
                    6325   DecodeBranchCondition_1:
                    6326   ; else if(Condition == (unsigned short int)(0x05))
00003924  0C42 0005 6327          cmp.w     #5,D2
00003928  660E      6328          bne.s     DecodeBranchCondition_3
                    6329   ; strcatInstruction("CS") ;
0000392A  4879 0000 6330          pea       @m68kde~2_190.L
0000392E  8194      
00003930  4E92      6331          jsr       (A2)
00003932  584F      6332          addq.w    #4,A7
00003934  6000 0108 6333          bra       DecodeBranchCondition_30
                    6334   DecodeBranchCondition_3:
                    6335   ; else if(Condition == (unsigned short int)(0x07))
00003938  0C42 0007 6336          cmp.w     #7,D2
0000393C  660E      6337          bne.s     DecodeBranchCondition_5
                    6338   ; strcatInstruction("EQ") ;
0000393E  4879 0000 6339          pea       @m68kde~2_191.L
00003942  8198      
00003944  4E92      6340          jsr       (A2)
00003946  584F      6341          addq.w    #4,A7
00003948  6000 00F4 6342          bra       DecodeBranchCondition_30
                    6343   DecodeBranchCondition_5:
                    6344   ; else if(Condition == (unsigned short int)(0x0C))
0000394C  0C42 000C 6345          cmp.w     #12,D2
00003950  660E      6346          bne.s     DecodeBranchCondition_7
                    6347   ; strcatInstruction("GE") ;
00003952  4879 0000 6348          pea       @m68kde~2_192.L
00003956  819C      
00003958  4E92      6349          jsr       (A2)
0000395A  584F      6350          addq.w    #4,A7
0000395C  6000 00E0 6351          bra       DecodeBranchCondition_30
                    6352   DecodeBranchCondition_7:
                    6353   ; else if(Condition == (unsigned short int)(0x0E))
00003960  0C42 000E 6354          cmp.w     #14,D2
00003964  660E      6355          bne.s     DecodeBranchCondition_9
                    6356   ; strcatInstruction("GT") ;
00003966  4879 0000 6357          pea       @m68kde~2_193.L
0000396A  81A0      
0000396C  4E92      6358          jsr       (A2)
0000396E  584F      6359          addq.w    #4,A7
00003970  6000 00CC 6360          bra       DecodeBranchCondition_30
                    6361   DecodeBranchCondition_9:
                    6362   ; else if(Condition == (unsigned short int)(0x02))
00003974  0C42 0002 6363          cmp.w     #2,D2
00003978  660E      6364          bne.s     DecodeBranchCondition_11
                    6365   ; strcatInstruction("HI") ;
0000397A  4879 0000 6366          pea       @m68kde~2_194.L
0000397E  81A4      
00003980  4E92      6367          jsr       (A2)
00003982  584F      6368          addq.w    #4,A7
00003984  6000 00B8 6369          bra       DecodeBranchCondition_30
                    6370   DecodeBranchCondition_11:
                    6371   ; else if(Condition == (unsigned short int)(0x0F))
00003988  0C42 000F 6372          cmp.w     #15,D2
0000398C  660E      6373          bne.s     DecodeBranchCondition_13
                    6374   ; strcatInstruction("LE") ;
0000398E  4879 0000 6375          pea       @m68kde~2_195.L
00003992  81A8      
00003994  4E92      6376          jsr       (A2)
00003996  584F      6377          addq.w    #4,A7
00003998  6000 00A4 6378          bra       DecodeBranchCondition_30
                    6379   DecodeBranchCondition_13:
                    6380   ; else if(Condition == (unsigned short int)(0x03))
0000399C  0C42 0003 6381          cmp.w     #3,D2
000039A0  660E      6382          bne.s     DecodeBranchCondition_15
                    6383   ; strcatInstruction("LS") ;
000039A2  4879 0000 6384          pea       @m68kde~2_196.L
000039A6  81AC      
000039A8  4E92      6385          jsr       (A2)
000039AA  584F      6386          addq.w    #4,A7
000039AC  6000 0090 6387          bra       DecodeBranchCondition_30
                    6388   DecodeBranchCondition_15:
                    6389   ; else if(Condition == (unsigned short int)(0x0D))
000039B0  0C42 000D 6390          cmp.w     #13,D2
000039B4  660E      6391          bne.s     DecodeBranchCondition_17
                    6392   ; strcatInstruction("LT") ;
000039B6  4879 0000 6393          pea       @m68kde~2_197.L
000039BA  81B0      
000039BC  4E92      6394          jsr       (A2)
000039BE  584F      6395          addq.w    #4,A7
000039C0  6000 007C 6396          bra       DecodeBranchCondition_30
                    6397   DecodeBranchCondition_17:
                    6398   ; else if(Condition == (unsigned short int)(0x0B))
000039C4  0C42 000B 6399          cmp.w     #11,D2
000039C8  660E      6400          bne.s     DecodeBranchCondition_19
                    6401   ; strcatInstruction("MI") ;
000039CA  4879 0000 6402          pea       @m68kde~2_198.L
000039CE  81B4      
000039D0  4E92      6403          jsr       (A2)
000039D2  584F      6404          addq.w    #4,A7
000039D4  6000 0068 6405          bra       DecodeBranchCondition_30
                    6406   DecodeBranchCondition_19:
                    6407   ; else if(Condition == (unsigned short int)(0x06))
000039D8  0C42 0006 6408          cmp.w     #6,D2
000039DC  660E      6409          bne.s     DecodeBranchCondition_21
                    6410   ; strcatInstruction("NE") ;
000039DE  4879 0000 6411          pea       @m68kde~2_199.L
000039E2  81B8      
000039E4  4E92      6412          jsr       (A2)
000039E6  584F      6413          addq.w    #4,A7
000039E8  6000 0054 6414          bra       DecodeBranchCondition_30
                    6415   DecodeBranchCondition_21:
                    6416   ; else if(Condition == (unsigned short int)(0x0A))
000039EC  0C42 000A 6417          cmp.w     #10,D2
000039F0  660E      6418          bne.s     DecodeBranchCondition_23
                    6419   ; strcatInstruction("PL") ;
000039F2  4879 0000 6420          pea       @m68kde~2_200.L
000039F6  81BC      
000039F8  4E92      6421          jsr       (A2)
000039FA  584F      6422          addq.w    #4,A7
000039FC  6000 0040 6423          bra       DecodeBranchCondition_30
                    6424   DecodeBranchCondition_23:
                    6425   ; else if(Condition == (unsigned short int)(0x09))
00003A00  0C42 0009 6426          cmp.w     #9,D2
00003A04  660C      6427          bne.s     DecodeBranchCondition_25
                    6428   ; strcatInstruction("VS") ;
00003A06  4879 0000 6429          pea       @m68kde~2_201.L
00003A0A  81C0      
00003A0C  4E92      6430          jsr       (A2)
00003A0E  584F      6431          addq.w    #4,A7
00003A10  602C      6432          bra.s     DecodeBranchCondition_30
                    6433   DecodeBranchCondition_25:
                    6434   ; else if(Condition == (unsigned short int)(0x08))
00003A12  0C42 0008 6435          cmp.w     #8,D2
00003A16  660C      6436          bne.s     DecodeBranchCondition_27
                    6437   ; strcatInstruction("VC") ;
00003A18  4879 0000 6438          pea       @m68kde~2_202.L
00003A1C  81C4      
00003A1E  4E92      6439          jsr       (A2)
00003A20  584F      6440          addq.w    #4,A7
00003A22  601A      6441          bra.s     DecodeBranchCondition_30
                    6442   DecodeBranchCondition_27:
                    6443   ; else if(Condition == (unsigned short int)(0))
00003A24  4A42      6444          tst.w     D2
00003A26  660C      6445          bne.s     DecodeBranchCondition_29
                    6446   ; strcatInstruction("RA") ;
00003A28  4879 0000 6447          pea       @m68kde~2_203.L
00003A2C  81C8      
00003A2E  4E92      6448          jsr       (A2)
00003A30  584F      6449          addq.w    #4,A7
00003A32  600A      6450          bra.s     DecodeBranchCondition_30
                    6451   DecodeBranchCondition_29:
                    6452   ; else
                    6453   ; strcatInstruction("SR");
00003A34  4879 0000 6454          pea       @m68kde~2_204.L
00003A38  81CC      
00003A3A  4E92      6455          jsr       (A2)
00003A3C  584F      6456          addq.w    #4,A7
                    6457   DecodeBranchCondition_30:
                    6458   ; strcatInstruction(" ") ;
00003A3E  4879 0000 6459          pea       @m68kde~2_30.L
00003A42  70A2      
00003A44  4E92      6460          jsr       (A2)
00003A46  584F      6461          addq.w    #4,A7
00003A48  4CDF 0404 6462          movem.l   (A7)+,D2/A2
00003A4C  4E5E      6463          unlk      A6
00003A4E  4E75      6464          rts
                    6465   ; }
                    6466   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    6467   ; {
                    6468   _DisassembleInstruction:
00003A50  4E56 FFD8 6469          link      A6,#-40
00003A54  48E7 3F3C 6470          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00003A58  242E 0008 6471          move.l    8(A6),D2
00003A5C  45F9 0803 6472          lea       _InstructionSize.L,A2
00003A60  017E      
00003A62  47F8 0CE6 6473          lea       _strcpyInstruction.L,A3
00003A66  49F9 0803 6474          lea       _TempString.L,A4
00003A6A  0546      
00003A6C  4BF9 0000 6475          lea       _sprintf.L,A5
00003A70  5A60      
                    6476   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
00003A72  2042      6477          move.l    D2,A0
00003A74  3010      6478          move.w    (A0),D0
00003A76  E040      6479          asr.w     #8,D0
00003A78  E840      6480          asr.w     #4,D0
00003A7A  3D40 FFDA 6481          move.w    D0,-38(A6)
                    6482   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
00003A7E  2042      6483          move.l    D2,A0
00003A80  3010      6484          move.w    (A0),D0
00003A82  C07C 0FFF 6485          and.w     #4095,D0
00003A86  3D40 FFDC 6486          move.w    D0,-36(A6)
                    6487   ; unsigned short int SourceBits, DestBits, Size ;
                    6488   ; unsigned char *Mode, Condition;
                    6489   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    6490   ; unsigned short int DataRegister, AddressRegister;
                    6491   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    6492   ; signed short int Displacement16Bit;
                    6493   ; short int Mask, DoneSlash;
                    6494   ; int i;
                    6495   ; strcpyInstruction("Unknown") ;
00003A8A  4879 0000 6496          pea       @m68kde~2_205.L
00003A8E  81D0      
00003A90  4E93      6497          jsr       (A3)
00003A92  584F      6498          addq.w    #4,A7
                    6499   ; /////////////////////////////////////////////////////////////////////////////////
                    6500   ; // if instruction is ABCD
                    6501   ; /////////////////////////////////////////////////////////////////////////////////
                    6502   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
00003A94  2042      6503          move.l    D2,A0
00003A96  3010      6504          move.w    (A0),D0
00003A98  C07C F1F0 6505          and.w     #61936,D0
00003A9C  0C40 C100 6506          cmp.w     #49408,D0
00003AA0  6600 008C 6507          bne       DisassembleInstruction_4
                    6508   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00003AA4  2042      6509          move.l    D2,A0
00003AA6  3010      6510          move.w    (A0),D0
00003AA8  E040      6511          asr.w     #8,D0
00003AAA  E240      6512          asr.w     #1,D0
00003AAC  C07C 0007 6513          and.w     #7,D0
00003AB0  3D40 FFE0 6514          move.w    D0,-32(A6)
                    6515   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00003AB4  2042      6516          move.l    D2,A0
00003AB6  3010      6517          move.w    (A0),D0
00003AB8  C07C 0007 6518          and.w     #7,D0
00003ABC  3D40 FFDE 6519          move.w    D0,-34(A6)
                    6520   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00003AC0  2042      6521          move.l    D2,A0
00003AC2  3010      6522          move.w    (A0),D0
00003AC4  E640      6523          asr.w     #3,D0
00003AC6  48C0      6524          ext.l     D0
00003AC8  C0BC 0000 6525          and.l     #1,D0
00003ACC  0001      
00003ACE  2D40 FFE4 6526          move.l    D0,-28(A6)
                    6527   ; if(Mode == 0)
00003AD2  202E FFE4 6528          move.l    -28(A6),D0
00003AD6  662C      6529          bne.s     DisassembleInstruction_3
                    6530   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
00003AD8  322E FFE0 6531          move.w    -32(A6),D1
00003ADC  C2BC 0000 6532          and.l     #65535,D1
00003AE0  FFFF      
00003AE2  2F01      6533          move.l    D1,-(A7)
00003AE4  322E FFDE 6534          move.w    -34(A6),D1
00003AE8  C2BC 0000 6535          and.l     #65535,D1
00003AEC  FFFF      
00003AEE  2F01      6536          move.l    D1,-(A7)
00003AF0  4879 0000 6537          pea       @m68kde~2_206.L
00003AF4  81D8      
00003AF6  4879 0803 6538          pea       _Instruction.L
00003AFA  04E2      
00003AFC  4E95      6539          jsr       (A5)
00003AFE  DEFC 0010 6540          add.w     #16,A7
00003B02  602A      6541          bra.s     DisassembleInstruction_4
                    6542   DisassembleInstruction_3:
                    6543   ; else
                    6544   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00003B04  322E FFE0 6545          move.w    -32(A6),D1
00003B08  C2BC 0000 6546          and.l     #65535,D1
00003B0C  FFFF      
00003B0E  2F01      6547          move.l    D1,-(A7)
00003B10  322E FFDE 6548          move.w    -34(A6),D1
00003B14  C2BC 0000 6549          and.l     #65535,D1
00003B18  FFFF      
00003B1A  2F01      6550          move.l    D1,-(A7)
00003B1C  4879 0000 6551          pea       @m68kde~2_207.L
00003B20  81E6      
00003B22  4879 0803 6552          pea       _Instruction.L
00003B26  04E2      
00003B28  4E95      6553          jsr       (A5)
00003B2A  DEFC 0010 6554          add.w     #16,A7
                    6555   DisassembleInstruction_4:
                    6556   ; }
                    6557   ; /////////////////////////////////////////////////////////////////////////////////
                    6558   ; // if instruction is ADD or ADDA
                    6559   ; /////////////////////////////////////////////////////////////////////////////////
                    6560   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
00003B2E  2042      6561          move.l    D2,A0
00003B30  3010      6562          move.w    (A0),D0
00003B32  C07C F000 6563          and.w     #61440,D0
00003B36  0C40 D000 6564          cmp.w     #53248,D0
00003B3A  6600 008C 6565          bne       DisassembleInstruction_8
                    6566   ; InstructionSize = 1;
00003B3E  24BC 0000 6567          move.l    #1,(A2)
00003B42  0001      
                    6568   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00003B44  2042      6569          move.l    D2,A0
00003B46  3010      6570          move.w    (A0),D0
00003B48  EC40      6571          asr.w     #6,D0
00003B4A  C07C 0007 6572          and.w     #7,D0
00003B4E  3600      6573          move.w    D0,D3
                    6574   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00003B50  0C43 0003 6575          cmp.w     #3,D3
00003B54  6708      6576          beq.s     DisassembleInstruction_9
00003B56  0C43 0007 6577          cmp.w     #7,D3
00003B5A  6600 005A 6578          bne       DisassembleInstruction_7
                    6579   DisassembleInstruction_9:
                    6580   ; {
                    6581   ; if(OpMode == (unsigned short int)(0x0003))
00003B5E  0C43 0003 6582          cmp.w     #3,D3
00003B62  660C      6583          bne.s     DisassembleInstruction_10
                    6584   ; strcpyInstruction("ADDA.W ") ;
00003B64  4879 0000 6585          pea       @m68kde~2_208.L
00003B68  81FA      
00003B6A  4E93      6586          jsr       (A3)
00003B6C  584F      6587          addq.w    #4,A7
00003B6E  600A      6588          bra.s     DisassembleInstruction_11
                    6589   DisassembleInstruction_10:
                    6590   ; else
                    6591   ; strcpyInstruction("ADDA.L ") ;
00003B70  4879 0000 6592          pea       @m68kde~2_209.L
00003B74  8202      
00003B76  4E93      6593          jsr       (A3)
00003B78  584F      6594          addq.w    #4,A7
                    6595   DisassembleInstruction_11:
                    6596   ; Decode6BitEA(OpCode,0,0,0)  ;
00003B7A  42A7      6597          clr.l     -(A7)
00003B7C  42A7      6598          clr.l     -(A7)
00003B7E  42A7      6599          clr.l     -(A7)
00003B80  2F02      6600          move.l    D2,-(A7)
00003B82  4EB8 343C 6601          jsr       _Decode6BitEA
00003B86  DEFC 0010 6602          add.w     #16,A7
                    6603   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003B8A  2042      6604          move.l    D2,A0
00003B8C  3210      6605          move.w    (A0),D1
00003B8E  E041      6606          asr.w     #8,D1
00003B90  E241      6607          asr.w     #1,D1
00003B92  C27C 0007 6608          and.w     #7,D1
00003B96  C2BC 0000 6609          and.l     #65535,D1
00003B9A  FFFF      
00003B9C  2F01      6610          move.l    D1,-(A7)
00003B9E  4879 0000 6611          pea       @m68kde~2_210.L
00003BA2  820A      
00003BA4  2F0C      6612          move.l    A4,-(A7)
00003BA6  4E95      6613          jsr       (A5)
00003BA8  DEFC 000C 6614          add.w     #12,A7
                    6615   ; strcatInstruction(TempString) ;
00003BAC  2F0C      6616          move.l    A4,-(A7)
00003BAE  4EB8 0CCC 6617          jsr       _strcatInstruction
00003BB2  584F      6618          addq.w    #4,A7
00003BB4  6012      6619          bra.s     DisassembleInstruction_8
                    6620   DisassembleInstruction_7:
                    6621   ; }
                    6622   ; else {
                    6623   ; strcpyInstruction("ADD") ;
00003BB6  4879 0000 6624          pea       @m68kde~2_211.L
00003BBA  8210      
00003BBC  4E93      6625          jsr       (A3)
00003BBE  584F      6626          addq.w    #4,A7
                    6627   ; Decode3BitOperandMode(OpCode) ;
00003BC0  2F02      6628          move.l    D2,-(A7)
00003BC2  4EB8 3864 6629          jsr       _Decode3BitOperandMode
00003BC6  584F      6630          addq.w    #4,A7
                    6631   DisassembleInstruction_8:
                    6632   ; }
                    6633   ; }
                    6634   ; /////////////////////////////////////////////////////////////////////////////////
                    6635   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6636   ; /////////////////////////////////////////////////////////////////////////////////
                    6637   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
00003BC8  2042      6638          move.l    D2,A0
00003BCA  3010      6639          move.w    (A0),D0
00003BCC  C07C FF00 6640          and.w     #65280,D0
00003BD0  0C40 0600 6641          cmp.w     #1536,D0
00003BD4  6604      6642          bne.s     DisassembleInstruction_14
00003BD6  7001      6643          moveq     #1,D0
00003BD8  6002      6644          bra.s     DisassembleInstruction_15
                    6645   DisassembleInstruction_14:
00003BDA  4280      6646          clr.l     D0
                    6647   DisassembleInstruction_15:
00003BDC  2042      6648          move.l    D2,A0
00003BDE  3210      6649          move.w    (A0),D1
00003BE0  C27C FF00 6650          and.w     #65280,D1
00003BE4  0C41 0200 6651          cmp.w     #512,D1
00003BE8  6604      6652          bne.s     DisassembleInstruction_16
00003BEA  7201      6653          moveq     #1,D1
00003BEC  6002      6654          bra.s     DisassembleInstruction_17
                    6655   DisassembleInstruction_16:
00003BEE  4281      6656          clr.l     D1
                    6657   DisassembleInstruction_17:
00003BF0  8041      6658          or.w      D1,D0
00003BF2  2042      6659          move.l    D2,A0
00003BF4  3210      6660          move.w    (A0),D1
00003BF6  C27C FF00 6661          and.w     #65280,D1
00003BFA  0C41 0C00 6662          cmp.w     #3072,D1
00003BFE  6604      6663          bne.s     DisassembleInstruction_18
00003C00  7201      6664          moveq     #1,D1
00003C02  6002      6665          bra.s     DisassembleInstruction_19
                    6666   DisassembleInstruction_18:
00003C04  4281      6667          clr.l     D1
                    6668   DisassembleInstruction_19:
00003C06  8041      6669          or.w      D1,D0
00003C08  2042      6670          move.l    D2,A0
00003C0A  3210      6671          move.w    (A0),D1
00003C0C  C27C FF00 6672          and.w     #65280,D1
00003C10  0C41 0A00 6673          cmp.w     #2560,D1
00003C14  6604      6674          bne.s     DisassembleInstruction_20
00003C16  7201      6675          moveq     #1,D1
00003C18  6002      6676          bra.s     DisassembleInstruction_21
                    6677   DisassembleInstruction_20:
00003C1A  4281      6678          clr.l     D1
                    6679   DisassembleInstruction_21:
00003C1C  8041      6680          or.w      D1,D0
00003C1E  2042      6681          move.l    D2,A0
00003C20  3210      6682          move.w    (A0),D1
00003C22  C27C FF00 6683          and.w     #65280,D1
00003C26  6604      6684          bne.s     DisassembleInstruction_22
00003C28  7201      6685          moveq     #1,D1
00003C2A  6002      6686          bra.s     DisassembleInstruction_23
                    6687   DisassembleInstruction_22:
00003C2C  4281      6688          clr.l     D1
                    6689   DisassembleInstruction_23:
00003C2E  8041      6690          or.w      D1,D0
00003C30  2042      6691          move.l    D2,A0
00003C32  3210      6692          move.w    (A0),D1
00003C34  C27C FF00 6693          and.w     #65280,D1
00003C38  0C41 0400 6694          cmp.w     #1024,D1
00003C3C  6604      6695          bne.s     DisassembleInstruction_24
00003C3E  7201      6696          moveq     #1,D1
00003C40  6002      6697          bra.s     DisassembleInstruction_25
                    6698   DisassembleInstruction_24:
00003C42  4281      6699          clr.l     D1
                    6700   DisassembleInstruction_25:
00003C44  8041      6701          or.w      D1,D0
00003C46  6700 00E4 6702          beq       DisassembleInstruction_12
                    6703   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6704   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6705   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6706   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6707   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6708   ; {
                    6709   ; InstructionSize = 1;
00003C4A  24BC 0000 6710          move.l    #1,(A2)
00003C4E  0001      
                    6711   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
00003C50  2042      6712          move.l    D2,A0
00003C52  3010      6713          move.w    (A0),D0
00003C54  C07C FF00 6714          and.w     #65280,D0
00003C58  0C40 0600 6715          cmp.w     #1536,D0
00003C5C  660E      6716          bne.s     DisassembleInstruction_26
                    6717   ; strcpyInstruction("ADDI") ;
00003C5E  4879 0000 6718          pea       @m68kde~2_212.L
00003C62  8214      
00003C64  4E93      6719          jsr       (A3)
00003C66  584F      6720          addq.w    #4,A7
00003C68  6000 0084 6721          bra       DisassembleInstruction_36
                    6722   DisassembleInstruction_26:
                    6723   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
00003C6C  2042      6724          move.l    D2,A0
00003C6E  3010      6725          move.w    (A0),D0
00003C70  C07C FF00 6726          and.w     #65280,D0
00003C74  0C40 0200 6727          cmp.w     #512,D0
00003C78  660E      6728          bne.s     DisassembleInstruction_28
                    6729   ; strcpyInstruction("ANDI") ;
00003C7A  4879 0000 6730          pea       @m68kde~2_213.L
00003C7E  821A      
00003C80  4E93      6731          jsr       (A3)
00003C82  584F      6732          addq.w    #4,A7
00003C84  6000 0068 6733          bra       DisassembleInstruction_36
                    6734   DisassembleInstruction_28:
                    6735   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
00003C88  2042      6736          move.l    D2,A0
00003C8A  3010      6737          move.w    (A0),D0
00003C8C  C07C FF00 6738          and.w     #65280,D0
00003C90  0C40 0C00 6739          cmp.w     #3072,D0
00003C94  660E      6740          bne.s     DisassembleInstruction_30
                    6741   ; strcpyInstruction("CMPI") ;
00003C96  4879 0000 6742          pea       @m68kde~2_214.L
00003C9A  8220      
00003C9C  4E93      6743          jsr       (A3)
00003C9E  584F      6744          addq.w    #4,A7
00003CA0  6000 004C 6745          bra       DisassembleInstruction_36
                    6746   DisassembleInstruction_30:
                    6747   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
00003CA4  2042      6748          move.l    D2,A0
00003CA6  3010      6749          move.w    (A0),D0
00003CA8  C07C FF00 6750          and.w     #65280,D0
00003CAC  0C40 0A00 6751          cmp.w     #2560,D0
00003CB0  660E      6752          bne.s     DisassembleInstruction_32
                    6753   ; strcpyInstruction("EORI") ;
00003CB2  4879 0000 6754          pea       @m68kde~2_215.L
00003CB6  8226      
00003CB8  4E93      6755          jsr       (A3)
00003CBA  584F      6756          addq.w    #4,A7
00003CBC  6000 0030 6757          bra       DisassembleInstruction_36
                    6758   DisassembleInstruction_32:
                    6759   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
00003CC0  2042      6760          move.l    D2,A0
00003CC2  3010      6761          move.w    (A0),D0
00003CC4  C07C FF00 6762          and.w     #65280,D0
00003CC8  660C      6763          bne.s     DisassembleInstruction_34
                    6764   ; strcpyInstruction("ORI") ;
00003CCA  4879 0000 6765          pea       @m68kde~2_216.L
00003CCE  822C      
00003CD0  4E93      6766          jsr       (A3)
00003CD2  584F      6767          addq.w    #4,A7
00003CD4  6018      6768          bra.s     DisassembleInstruction_36
                    6769   DisassembleInstruction_34:
                    6770   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
00003CD6  2042      6771          move.l    D2,A0
00003CD8  3010      6772          move.w    (A0),D0
00003CDA  C07C FF00 6773          and.w     #65280,D0
00003CDE  0C40 0400 6774          cmp.w     #1024,D0
00003CE2  660A      6775          bne.s     DisassembleInstruction_36
                    6776   ; strcpyInstruction("SUBI") ;
00003CE4  4879 0000 6777          pea       @m68kde~2_217.L
00003CE8  8230      
00003CEA  4E93      6778          jsr       (A3)
00003CEC  584F      6779          addq.w    #4,A7
                    6780   DisassembleInstruction_36:
                    6781   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003CEE  2042      6782          move.l    D2,A0
00003CF0  3210      6783          move.w    (A0),D1
00003CF2  C2BC 0000 6784          and.l     #65535,D1
00003CF6  FFFF      
00003CF8  2F01      6785          move.l    D1,-(A7)
00003CFA  4EB8 31A8 6786          jsr       _Decode2BitOperandSize
00003CFE  584F      6787          addq.w    #4,A7
00003D00  3E00      6788          move.w    D0,D7
                    6789   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
00003D02  2F02      6790          move.l    D2,-(A7)
00003D04  4EB8 332C 6791          jsr       _DecodeBWLDataAfterOpCode
00003D08  584F      6792          addq.w    #4,A7
                    6793   ; strcatInstruction(",") ;
00003D0A  4879 0000 6794          pea       @m68kde~2_188.L
00003D0E  818E      
00003D10  4EB8 0CCC 6795          jsr       _strcatInstruction
00003D14  584F      6796          addq.w    #4,A7
                    6797   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
00003D16  42A7      6798          clr.l     -(A7)
00003D18  CEBC 0000 6799          and.l     #65535,D7
00003D1C  FFFF      
00003D1E  2F07      6800          move.l    D7,-(A7)
00003D20  42A7      6801          clr.l     -(A7)
00003D22  2F02      6802          move.l    D2,-(A7)
00003D24  4EB8 343C 6803          jsr       _Decode6BitEA
00003D28  DEFC 0010 6804          add.w     #16,A7
                    6805   DisassembleInstruction_12:
                    6806   ; }
                    6807   ; /////////////////////////////////////////////////////////////////////////////////
                    6808   ; // if instruction is ADDI #data,SR
                    6809   ; /////////////////////////////////////////////////////////////////////////////////
                    6810   ; if(*OpCode  == (unsigned short int)(0x027c))   {
00003D2C  2042      6811          move.l    D2,A0
00003D2E  3010      6812          move.w    (A0),D0
00003D30  0C40 027C 6813          cmp.w     #636,D0
00003D34  6622      6814          bne.s     DisassembleInstruction_38
                    6815   ; InstructionSize = 2;
00003D36  24BC 0000 6816          move.l    #2,(A2)
00003D3A  0002      
                    6817   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
00003D3C  2042      6818          move.l    D2,A0
00003D3E  3228 0002 6819          move.w    2(A0),D1
00003D42  48C1      6820          ext.l     D1
00003D44  2F01      6821          move.l    D1,-(A7)
00003D46  4879 0000 6822          pea       @m68kde~2_218.L
00003D4A  8236      
00003D4C  4879 0803 6823          pea       _Instruction.L
00003D50  04E2      
00003D52  4E95      6824          jsr       (A5)
00003D54  DEFC 000C 6825          add.w     #12,A7
                    6826   DisassembleInstruction_38:
                    6827   ; }
                    6828   ; /////////////////////////////////////////////////////////////////////////////////
                    6829   ; // if instruction is ADDQ
                    6830   ; /////////////////////////////////////////////////////////////////////////////////
                    6831   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
00003D58  2042      6832          move.l    D2,A0
00003D5A  3010      6833          move.w    (A0),D0
00003D5C  C07C F100 6834          and.w     #61696,D0
00003D60  0C40 5000 6835          cmp.w     #20480,D0
00003D64  6600 005E 6836          bne       DisassembleInstruction_40
                    6837   ; InstructionSize = 1;
00003D68  24BC 0000 6838          move.l    #1,(A2)
00003D6C  0001      
                    6839   ; strcpyInstruction("ADDQ") ;
00003D6E  4879 0000 6840          pea       @m68kde~2_219.L
00003D72  8244      
00003D74  4E93      6841          jsr       (A3)
00003D76  584F      6842          addq.w    #4,A7
                    6843   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003D78  2042      6844          move.l    D2,A0
00003D7A  3210      6845          move.w    (A0),D1
00003D7C  C2BC 0000 6846          and.l     #65535,D1
00003D80  FFFF      
00003D82  2F01      6847          move.l    D1,-(A7)
00003D84  4EB8 31A8 6848          jsr       _Decode2BitOperandSize
00003D88  584F      6849          addq.w    #4,A7
                    6850   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00003D8A  2042      6851          move.l    D2,A0
00003D8C  3210      6852          move.w    (A0),D1
00003D8E  E041      6853          asr.w     #8,D1
00003D90  E241      6854          asr.w     #1,D1
00003D92  C27C 0007 6855          and.w     #7,D1
00003D96  C2BC 0000 6856          and.l     #65535,D1
00003D9A  FFFF      
00003D9C  2F01      6857          move.l    D1,-(A7)
00003D9E  4879 0000 6858          pea       @m68kde~2_220.L
00003DA2  824A      
00003DA4  2F0C      6859          move.l    A4,-(A7)
00003DA6  4E95      6860          jsr       (A5)
00003DA8  DEFC 000C 6861          add.w     #12,A7
                    6862   ; strcatInstruction(TempString) ;
00003DAC  2F0C      6863          move.l    A4,-(A7)
00003DAE  4EB8 0CCC 6864          jsr       _strcatInstruction
00003DB2  584F      6865          addq.w    #4,A7
                    6866   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003DB4  42A7      6867          clr.l     -(A7)
00003DB6  42A7      6868          clr.l     -(A7)
00003DB8  42A7      6869          clr.l     -(A7)
00003DBA  2F02      6870          move.l    D2,-(A7)
00003DBC  4EB8 343C 6871          jsr       _Decode6BitEA
00003DC0  DEFC 0010 6872          add.w     #16,A7
                    6873   DisassembleInstruction_40:
                    6874   ; }
                    6875   ; /////////////////////////////////////////////////////////////////////////////////
                    6876   ; // if instruction is ADDX
                    6877   ; /////////////////////////////////////////////////////////////////////////////////
                    6878   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003DC4  2042      6879          move.l    D2,A0
00003DC6  3010      6880          move.w    (A0),D0
00003DC8  C07C F130 6881          and.w     #61744,D0
00003DCC  0C40 D100 6882          cmp.w     #53504,D0
00003DD0  6600 00A4 6883          bne       DisassembleInstruction_44
                    6884   ; InstructionSize = 1;
00003DD4  24BC 0000 6885          move.l    #1,(A2)
00003DD8  0001      
                    6886   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00003DDA  2042      6887          move.l    D2,A0
00003DDC  3010      6888          move.w    (A0),D0
00003DDE  EC40      6889          asr.w     #6,D0
00003DE0  C07C 0003 6890          and.w     #3,D0
00003DE4  3600      6891          move.w    D0,D3
                    6892   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
00003DE6  0C43 0003 6893          cmp.w     #3,D3
00003DEA  6700 008A 6894          beq       DisassembleInstruction_44
                    6895   ; {
                    6896   ; strcpyInstruction("ADDX") ;
00003DEE  4879 0000 6897          pea       @m68kde~2_221.L
00003DF2  8250      
00003DF4  4E93      6898          jsr       (A3)
00003DF6  584F      6899          addq.w    #4,A7
                    6900   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003DF8  2042      6901          move.l    D2,A0
00003DFA  3210      6902          move.w    (A0),D1
00003DFC  C2BC 0000 6903          and.l     #65535,D1
00003E00  FFFF      
00003E02  2F01      6904          move.l    D1,-(A7)
00003E04  4EB8 31A8 6905          jsr       _Decode2BitOperandSize
00003E08  584F      6906          addq.w    #4,A7
                    6907   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003E0A  2042      6908          move.l    D2,A0
00003E0C  3010      6909          move.w    (A0),D0
00003E0E  C07C 0008 6910          and.w     #8,D0
00003E12  6600 0030 6911          bne       DisassembleInstruction_46
                    6912   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003E16  2042      6913          move.l    D2,A0
00003E18  3210      6914          move.w    (A0),D1
00003E1A  E041      6915          asr.w     #8,D1
00003E1C  E241      6916          asr.w     #1,D1
00003E1E  C27C 0007 6917          and.w     #7,D1
00003E22  48C1      6918          ext.l     D1
00003E24  2F01      6919          move.l    D1,-(A7)
00003E26  2042      6920          move.l    D2,A0
00003E28  3210      6921          move.w    (A0),D1
00003E2A  C27C 0007 6922          and.w     #7,D1
00003E2E  48C1      6923          ext.l     D1
00003E30  2F01      6924          move.l    D1,-(A7)
00003E32  4879 0000 6925          pea       @m68kde~2_222.L
00003E36  8256      
00003E38  2F0C      6926          move.l    A4,-(A7)
00003E3A  4E95      6927          jsr       (A5)
00003E3C  DEFC 0010 6928          add.w     #16,A7
00003E40  6000 002C 6929          bra       DisassembleInstruction_47
                    6930   DisassembleInstruction_46:
                    6931   ; else        // -(ax),-(ay) mode used
                    6932   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003E44  2042      6933          move.l    D2,A0
00003E46  3210      6934          move.w    (A0),D1
00003E48  E041      6935          asr.w     #8,D1
00003E4A  E241      6936          asr.w     #1,D1
00003E4C  C27C 0007 6937          and.w     #7,D1
00003E50  48C1      6938          ext.l     D1
00003E52  2F01      6939          move.l    D1,-(A7)
00003E54  2042      6940          move.l    D2,A0
00003E56  3210      6941          move.w    (A0),D1
00003E58  C27C 0007 6942          and.w     #7,D1
00003E5C  48C1      6943          ext.l     D1
00003E5E  2F01      6944          move.l    D1,-(A7)
00003E60  4879 0000 6945          pea       @m68kde~2_223.L
00003E64  825E      
00003E66  2F0C      6946          move.l    A4,-(A7)
00003E68  4E95      6947          jsr       (A5)
00003E6A  DEFC 0010 6948          add.w     #16,A7
                    6949   DisassembleInstruction_47:
                    6950   ; strcatInstruction(TempString) ;
00003E6E  2F0C      6951          move.l    A4,-(A7)
00003E70  4EB8 0CCC 6952          jsr       _strcatInstruction
00003E74  584F      6953          addq.w    #4,A7
                    6954   DisassembleInstruction_44:
                    6955   ; }
                    6956   ; }
                    6957   ; /////////////////////////////////////////////////////////////////////////////////
                    6958   ; // if instruction is AND
                    6959   ; /////////////////////////////////////////////////////////////////////////////////
                    6960   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003E76  2042      6961          move.l    D2,A0
00003E78  3010      6962          move.w    (A0),D0
00003E7A  C07C F000 6963          and.w     #61440,D0
00003E7E  0C40 C000 6964          cmp.w     #49152,D0
00003E82  662A      6965          bne.s     DisassembleInstruction_50
                    6966   ; InstructionSize = 1;
00003E84  24BC 0000 6967          move.l    #1,(A2)
00003E88  0001      
                    6968   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6969   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003E8A  2042      6970          move.l    D2,A0
00003E8C  3010      6971          move.w    (A0),D0
00003E8E  E840      6972          asr.w     #4,D0
00003E90  C07C 001F 6973          and.w     #31,D0
00003E94  3600      6974          move.w    D0,D3
                    6975   ; if(OpMode != (unsigned short int)(0x0010))   {
00003E96  0C43 0010 6976          cmp.w     #16,D3
00003E9A  6712      6977          beq.s     DisassembleInstruction_50
                    6978   ; strcpyInstruction("AND") ;
00003E9C  4879 0000 6979          pea       @m68kde~2_224.L
00003EA0  826C      
00003EA2  4E93      6980          jsr       (A3)
00003EA4  584F      6981          addq.w    #4,A7
                    6982   ; Decode3BitOperandMode(OpCode) ;
00003EA6  2F02      6983          move.l    D2,-(A7)
00003EA8  4EB8 3864 6984          jsr       _Decode3BitOperandMode
00003EAC  584F      6985          addq.w    #4,A7
                    6986   DisassembleInstruction_50:
                    6987   ; }
                    6988   ; }
                    6989   ; /////////////////////////////////////////////////////////////////////////////////
                    6990   ; // if instruction is ANDI to CCR
                    6991   ; /////////////////////////////////////////////////////////////////////////////////
                    6992   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003EAE  2042      6993          move.l    D2,A0
00003EB0  3010      6994          move.w    (A0),D0
00003EB2  0C40 023C 6995          cmp.w     #572,D0
00003EB6  662A      6996          bne.s     DisassembleInstruction_52
                    6997   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003EB8  2042      6998          move.l    D2,A0
00003EBA  3228 0002 6999          move.w    2(A0),D1
00003EBE  C27C 00FF 7000          and.w     #255,D1
00003EC2  C2BC 0000 7001          and.l     #65535,D1
00003EC6  FFFF      
00003EC8  2F01      7002          move.l    D1,-(A7)
00003ECA  4879 0000 7003          pea       @m68kde~2_225.L
00003ECE  8270      
00003ED0  4879 0803 7004          pea       _Instruction.L
00003ED4  04E2      
00003ED6  4E95      7005          jsr       (A5)
00003ED8  DEFC 000C 7006          add.w     #12,A7
                    7007   ; InstructionSize = 2;
00003EDC  24BC 0000 7008          move.l    #2,(A2)
00003EE0  0002      
                    7009   DisassembleInstruction_52:
                    7010   ; }
                    7011   ; /////////////////////////////////////////////////////////////////////////////////
                    7012   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    7013   ; /////////////////////////////////////////////////////////////////////////////////
                    7014   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003EE2  2042      7015          move.l    D2,A0
00003EE4  3010      7016          move.w    (A0),D0
00003EE6  C07C F018 7017          and.w     #61464,D0
00003EEA  0C40 E000 7018          cmp.w     #57344,D0
00003EEE  6604      7019          bne.s     DisassembleInstruction_56
00003EF0  7001      7020          moveq     #1,D0
00003EF2  6002      7021          bra.s     DisassembleInstruction_57
                    7022   DisassembleInstruction_56:
00003EF4  4280      7023          clr.l     D0
                    7024   DisassembleInstruction_57:
00003EF6  2042      7025          move.l    D2,A0
00003EF8  3210      7026          move.w    (A0),D1
00003EFA  C27C FEC0 7027          and.w     #65216,D1
00003EFE  0C41 E0C0 7028          cmp.w     #57536,D1
00003F02  6604      7029          bne.s     DisassembleInstruction_58
00003F04  7201      7030          moveq     #1,D1
00003F06  6002      7031          bra.s     DisassembleInstruction_59
                    7032   DisassembleInstruction_58:
00003F08  4281      7033          clr.l     D1
                    7034   DisassembleInstruction_59:
00003F0A  8041      7035          or.w      D1,D0
00003F0C  2042      7036          move.l    D2,A0
00003F0E  3210      7037          move.w    (A0),D1
00003F10  C27C F018 7038          and.w     #61464,D1
00003F14  0C41 E008 7039          cmp.w     #57352,D1
00003F18  6604      7040          bne.s     DisassembleInstruction_60
00003F1A  7201      7041          moveq     #1,D1
00003F1C  6002      7042          bra.s     DisassembleInstruction_61
                    7043   DisassembleInstruction_60:
00003F1E  4281      7044          clr.l     D1
                    7045   DisassembleInstruction_61:
00003F20  8041      7046          or.w      D1,D0
00003F22  2042      7047          move.l    D2,A0
00003F24  3210      7048          move.w    (A0),D1
00003F26  C27C FEC0 7049          and.w     #65216,D1
00003F2A  0C41 E2C0 7050          cmp.w     #58048,D1
00003F2E  6604      7051          bne.s     DisassembleInstruction_62
00003F30  7201      7052          moveq     #1,D1
00003F32  6002      7053          bra.s     DisassembleInstruction_63
                    7054   DisassembleInstruction_62:
00003F34  4281      7055          clr.l     D1
                    7056   DisassembleInstruction_63:
00003F36  8041      7057          or.w      D1,D0
00003F38  2042      7058          move.l    D2,A0
00003F3A  3210      7059          move.w    (A0),D1
00003F3C  C27C F018 7060          and.w     #61464,D1
00003F40  0C41 E018 7061          cmp.w     #57368,D1
00003F44  6604      7062          bne.s     DisassembleInstruction_64
00003F46  7201      7063          moveq     #1,D1
00003F48  6002      7064          bra.s     DisassembleInstruction_65
                    7065   DisassembleInstruction_64:
00003F4A  4281      7066          clr.l     D1
                    7067   DisassembleInstruction_65:
00003F4C  8041      7068          or.w      D1,D0
00003F4E  2042      7069          move.l    D2,A0
00003F50  3210      7070          move.w    (A0),D1
00003F52  C27C FEC0 7071          and.w     #65216,D1
00003F56  0C41 E6C0 7072          cmp.w     #59072,D1
00003F5A  6604      7073          bne.s     DisassembleInstruction_66
00003F5C  7201      7074          moveq     #1,D1
00003F5E  6002      7075          bra.s     DisassembleInstruction_67
                    7076   DisassembleInstruction_66:
00003F60  4281      7077          clr.l     D1
                    7078   DisassembleInstruction_67:
00003F62  8041      7079          or.w      D1,D0
00003F64  2042      7080          move.l    D2,A0
00003F66  3210      7081          move.w    (A0),D1
00003F68  C27C F018 7082          and.w     #61464,D1
00003F6C  0C41 E010 7083          cmp.w     #57360,D1
00003F70  6604      7084          bne.s     DisassembleInstruction_68
00003F72  7201      7085          moveq     #1,D1
00003F74  6002      7086          bra.s     DisassembleInstruction_69
                    7087   DisassembleInstruction_68:
00003F76  4281      7088          clr.l     D1
                    7089   DisassembleInstruction_69:
00003F78  8041      7090          or.w      D1,D0
00003F7A  2042      7091          move.l    D2,A0
00003F7C  3210      7092          move.w    (A0),D1
00003F7E  C27C FEC0 7093          and.w     #65216,D1
00003F82  0C41 E4C0 7094          cmp.w     #58560,D1
00003F86  6604      7095          bne.s     DisassembleInstruction_70
00003F88  7201      7096          moveq     #1,D1
00003F8A  6002      7097          bra.s     DisassembleInstruction_71
                    7098   DisassembleInstruction_70:
00003F8C  4281      7099          clr.l     D1
                    7100   DisassembleInstruction_71:
00003F8E  8041      7101          or.w      D1,D0
00003F90  6700 0252 7102          beq       DisassembleInstruction_73
                    7103   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    7104   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    7105   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    7106   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    7107   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    7108   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    7109   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    7110   ; {
                    7111   ; InstructionSize = 1;
00003F94  24BC 0000 7112          move.l    #1,(A2)
00003F98  0001      
                    7113   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    7114   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003F9A  2042      7115          move.l    D2,A0
00003F9C  3010      7116          move.w    (A0),D0
00003F9E  C07C 00C0 7117          and.w     #192,D0
00003FA2  0C40 00C0 7118          cmp.w     #192,D0
00003FA6  6600 00EA 7119          bne       DisassembleInstruction_72
                    7120   ; {
                    7121   ; // test direction by testing bit 8
                    7122   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003FAA  2042      7123          move.l    D2,A0
00003FAC  3010      7124          move.w    (A0),D0
00003FAE  C07C FEC0 7125          and.w     #65216,D0
00003FB2  0C40 E0C0 7126          cmp.w     #57536,D0
00003FB6  6624      7127          bne.s     DisassembleInstruction_77
                    7128   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003FB8  2042      7129          move.l    D2,A0
00003FBA  3010      7130          move.w    (A0),D0
00003FBC  C07C 0100 7131          and.w     #256,D0
00003FC0  0C40 0100 7132          cmp.w     #256,D0
00003FC4  660C      7133          bne.s     DisassembleInstruction_76
                    7134   ; strcpyInstruction("ASL") ;
00003FC6  4879 0000 7135          pea       @m68kde~2_226.L
00003FCA  8280      
00003FCC  4E93      7136          jsr       (A3)
00003FCE  584F      7137          addq.w    #4,A7
00003FD0  600A      7138          bra.s     DisassembleInstruction_77
                    7139   DisassembleInstruction_76:
                    7140   ; else
                    7141   ; strcpyInstruction("ASR") ;
00003FD2  4879 0000 7142          pea       @m68kde~2_227.L
00003FD6  8284      
00003FD8  4E93      7143          jsr       (A3)
00003FDA  584F      7144          addq.w    #4,A7
                    7145   DisassembleInstruction_77:
                    7146   ; // test direction by testing bit 8
                    7147   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003FDC  2042      7148          move.l    D2,A0
00003FDE  3010      7149          move.w    (A0),D0
00003FE0  C07C FEC0 7150          and.w     #65216,D0
00003FE4  0C40 E2C0 7151          cmp.w     #58048,D0
00003FE8  6624      7152          bne.s     DisassembleInstruction_81
                    7153   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003FEA  2042      7154          move.l    D2,A0
00003FEC  3010      7155          move.w    (A0),D0
00003FEE  C07C 0100 7156          and.w     #256,D0
00003FF2  0C40 0100 7157          cmp.w     #256,D0
00003FF6  660C      7158          bne.s     DisassembleInstruction_80
                    7159   ; strcpyInstruction("LSL") ;
00003FF8  4879 0000 7160          pea       @m68kde~2_228.L
00003FFC  8288      
00003FFE  4E93      7161          jsr       (A3)
00004000  584F      7162          addq.w    #4,A7
00004002  600A      7163          bra.s     DisassembleInstruction_81
                    7164   DisassembleInstruction_80:
                    7165   ; else
                    7166   ; strcpyInstruction("LSR") ;
00004004  4879 0000 7167          pea       @m68kde~2_229.L
00004008  828C      
0000400A  4E93      7168          jsr       (A3)
0000400C  584F      7169          addq.w    #4,A7
                    7170   DisassembleInstruction_81:
                    7171   ; // test direction by testing bit 8
                    7172   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
0000400E  2042      7173          move.l    D2,A0
00004010  3010      7174          move.w    (A0),D0
00004012  C07C FEC0 7175          and.w     #65216,D0
00004016  0C40 E6C0 7176          cmp.w     #59072,D0
0000401A  6624      7177          bne.s     DisassembleInstruction_85
                    7178   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
0000401C  2042      7179          move.l    D2,A0
0000401E  3010      7180          move.w    (A0),D0
00004020  C07C 0100 7181          and.w     #256,D0
00004024  0C40 0100 7182          cmp.w     #256,D0
00004028  660C      7183          bne.s     DisassembleInstruction_84
                    7184   ; strcpyInstruction("ROL") ;
0000402A  4879 0000 7185          pea       @m68kde~2_230.L
0000402E  8290      
00004030  4E93      7186          jsr       (A3)
00004032  584F      7187          addq.w    #4,A7
00004034  600A      7188          bra.s     DisassembleInstruction_85
                    7189   DisassembleInstruction_84:
                    7190   ; else
                    7191   ; strcpyInstruction("ROR") ;
00004036  4879 0000 7192          pea       @m68kde~2_231.L
0000403A  8294      
0000403C  4E93      7193          jsr       (A3)
0000403E  584F      7194          addq.w    #4,A7
                    7195   DisassembleInstruction_85:
                    7196   ; // test direction by testing bit 8
                    7197   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00004040  2042      7198          move.l    D2,A0
00004042  3010      7199          move.w    (A0),D0
00004044  C07C FEC0 7200          and.w     #65216,D0
00004048  0C40 E4C0 7201          cmp.w     #58560,D0
0000404C  6624      7202          bne.s     DisassembleInstruction_89
                    7203   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
0000404E  2042      7204          move.l    D2,A0
00004050  3010      7205          move.w    (A0),D0
00004052  C07C 0100 7206          and.w     #256,D0
00004056  0C40 0100 7207          cmp.w     #256,D0
0000405A  660C      7208          bne.s     DisassembleInstruction_88
                    7209   ; strcpyInstruction("ROXL") ;
0000405C  4879 0000 7210          pea       @m68kde~2_232.L
00004060  8298      
00004062  4E93      7211          jsr       (A3)
00004064  584F      7212          addq.w    #4,A7
00004066  600A      7213          bra.s     DisassembleInstruction_89
                    7214   DisassembleInstruction_88:
                    7215   ; else
                    7216   ; strcpyInstruction("ROXR") ;
00004068  4879 0000 7217          pea       @m68kde~2_233.L
0000406C  829E      
0000406E  4E93      7218          jsr       (A3)
00004070  584F      7219          addq.w    #4,A7
                    7220   DisassembleInstruction_89:
                    7221   ; strcatInstruction("  ") ;
00004072  4879 0000 7222          pea       @m68kde~2_15.L
00004076  6ED0      
00004078  4EB8 0CCC 7223          jsr       _strcatInstruction
0000407C  584F      7224          addq.w    #4,A7
                    7225   ; Decode6BitEA(OpCode,0, 0,0) ;
0000407E  42A7      7226          clr.l     -(A7)
00004080  42A7      7227          clr.l     -(A7)
00004082  42A7      7228          clr.l     -(A7)
00004084  2F02      7229          move.l    D2,-(A7)
00004086  4EB8 343C 7230          jsr       _Decode6BitEA
0000408A  DEFC 0010 7231          add.w     #16,A7
0000408E  6000 0154 7232          bra       DisassembleInstruction_73
                    7233   DisassembleInstruction_72:
                    7234   ; }
                    7235   ; // first version of above instructions, bit 5 is 0
                    7236   ; else
                    7237   ; {
                    7238   ; // test instruction and direction by testing bits 4,3
                    7239   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00004092  2042      7240          move.l    D2,A0
00004094  3010      7241          move.w    (A0),D0
00004096  C07C 0018 7242          and.w     #24,D0
0000409A  6624      7243          bne.s     DisassembleInstruction_93
                    7244   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
0000409C  2042      7245          move.l    D2,A0
0000409E  3010      7246          move.w    (A0),D0
000040A0  C07C 0100 7247          and.w     #256,D0
000040A4  0C40 0100 7248          cmp.w     #256,D0
000040A8  660C      7249          bne.s     DisassembleInstruction_92
                    7250   ; strcpyInstruction("ASL") ;
000040AA  4879 0000 7251          pea       @m68kde~2_226.L
000040AE  8280      
000040B0  4E93      7252          jsr       (A3)
000040B2  584F      7253          addq.w    #4,A7
000040B4  600A      7254          bra.s     DisassembleInstruction_93
                    7255   DisassembleInstruction_92:
                    7256   ; else
                    7257   ; strcpyInstruction("ASR") ;
000040B6  4879 0000 7258          pea       @m68kde~2_227.L
000040BA  8284      
000040BC  4E93      7259          jsr       (A3)
000040BE  584F      7260          addq.w    #4,A7
                    7261   DisassembleInstruction_93:
                    7262   ; // test instruction and direction by testing bits 4,3
                    7263   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
000040C0  2042      7264          move.l    D2,A0
000040C2  3010      7265          move.w    (A0),D0
000040C4  C07C 0018 7266          and.w     #24,D0
000040C8  0C40 0008 7267          cmp.w     #8,D0
000040CC  6624      7268          bne.s     DisassembleInstruction_97
                    7269   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
000040CE  2042      7270          move.l    D2,A0
000040D0  3010      7271          move.w    (A0),D0
000040D2  C07C 0100 7272          and.w     #256,D0
000040D6  0C40 0100 7273          cmp.w     #256,D0
000040DA  660C      7274          bne.s     DisassembleInstruction_96
                    7275   ; strcpyInstruction("LSL") ;
000040DC  4879 0000 7276          pea       @m68kde~2_228.L
000040E0  8288      
000040E2  4E93      7277          jsr       (A3)
000040E4  584F      7278          addq.w    #4,A7
000040E6  600A      7279          bra.s     DisassembleInstruction_97
                    7280   DisassembleInstruction_96:
                    7281   ; else
                    7282   ; strcpyInstruction("LSR") ;
000040E8  4879 0000 7283          pea       @m68kde~2_229.L
000040EC  828C      
000040EE  4E93      7284          jsr       (A3)
000040F0  584F      7285          addq.w    #4,A7
                    7286   DisassembleInstruction_97:
                    7287   ; // test instruction and direction by testing bits 4,3
                    7288   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
000040F2  2042      7289          move.l    D2,A0
000040F4  3010      7290          move.w    (A0),D0
000040F6  C07C 0018 7291          and.w     #24,D0
000040FA  0C40 0018 7292          cmp.w     #24,D0
000040FE  6624      7293          bne.s     DisassembleInstruction_101
                    7294   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00004100  2042      7295          move.l    D2,A0
00004102  3010      7296          move.w    (A0),D0
00004104  C07C 0100 7297          and.w     #256,D0
00004108  0C40 0100 7298          cmp.w     #256,D0
0000410C  660C      7299          bne.s     DisassembleInstruction_100
                    7300   ; strcpyInstruction("ROL") ;
0000410E  4879 0000 7301          pea       @m68kde~2_230.L
00004112  8290      
00004114  4E93      7302          jsr       (A3)
00004116  584F      7303          addq.w    #4,A7
00004118  600A      7304          bra.s     DisassembleInstruction_101
                    7305   DisassembleInstruction_100:
                    7306   ; else
                    7307   ; strcpyInstruction("ROR") ;
0000411A  4879 0000 7308          pea       @m68kde~2_231.L
0000411E  8294      
00004120  4E93      7309          jsr       (A3)
00004122  584F      7310          addq.w    #4,A7
                    7311   DisassembleInstruction_101:
                    7312   ; // test instruction and direction by testing bits 4,3
                    7313   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00004124  2042      7314          move.l    D2,A0
00004126  3010      7315          move.w    (A0),D0
00004128  C07C 0018 7316          and.w     #24,D0
0000412C  0C40 0010 7317          cmp.w     #16,D0
00004130  6624      7318          bne.s     DisassembleInstruction_105
                    7319   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00004132  2042      7320          move.l    D2,A0
00004134  3010      7321          move.w    (A0),D0
00004136  C07C 0100 7322          and.w     #256,D0
0000413A  0C40 0100 7323          cmp.w     #256,D0
0000413E  660C      7324          bne.s     DisassembleInstruction_104
                    7325   ; strcpyInstruction("ROXL") ;
00004140  4879 0000 7326          pea       @m68kde~2_232.L
00004144  8298      
00004146  4E93      7327          jsr       (A3)
00004148  584F      7328          addq.w    #4,A7
0000414A  600A      7329          bra.s     DisassembleInstruction_105
                    7330   DisassembleInstruction_104:
                    7331   ; else
                    7332   ; strcpyInstruction("ROXR") ;
0000414C  4879 0000 7333          pea       @m68kde~2_233.L
00004150  829E      
00004152  4E93      7334          jsr       (A3)
00004154  584F      7335          addq.w    #4,A7
                    7336   DisassembleInstruction_105:
                    7337   ; Decode2BitOperandSize(*OpCode) ;
00004156  2042      7338          move.l    D2,A0
00004158  3210      7339          move.w    (A0),D1
0000415A  C2BC 0000 7340          and.l     #65535,D1
0000415E  FFFF      
00004160  2F01      7341          move.l    D1,-(A7)
00004162  4EB8 31A8 7342          jsr       _Decode2BitOperandSize
00004166  584F      7343          addq.w    #4,A7
                    7344   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00004168  2042      7345          move.l    D2,A0
0000416A  3010      7346          move.w    (A0),D0
0000416C  C07C 0020 7347          and.w     #32,D0
00004170  6600 0038 7348          bne       DisassembleInstruction_106
                    7349   ; sprintf(TempString,"#$%X,D%X",
00004174  2042      7350          move.l    D2,A0
00004176  3210      7351          move.w    (A0),D1
00004178  C27C 0007 7352          and.w     #7,D1
0000417C  C2BC 0000 7353          and.l     #65535,D1
00004180  FFFF      
00004182  2F01      7354          move.l    D1,-(A7)
00004184  2042      7355          move.l    D2,A0
00004186  3210      7356          move.w    (A0),D1
00004188  E041      7357          asr.w     #8,D1
0000418A  E241      7358          asr.w     #1,D1
0000418C  C27C 0007 7359          and.w     #7,D1
00004190  C2BC 0000 7360          and.l     #65535,D1
00004194  FFFF      
00004196  2F01      7361          move.l    D1,-(A7)
00004198  4879 0000 7362          pea       @m68kde~2_234.L
0000419C  82A4      
0000419E  2F0C      7363          move.l    A4,-(A7)
000041A0  4E95      7364          jsr       (A5)
000041A2  DEFC 0010 7365          add.w     #16,A7
000041A6  6000 0034 7366          bra       DisassembleInstruction_107
                    7367   DisassembleInstruction_106:
                    7368   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7369   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7370   ; }
                    7371   ; else {                                                                      // if shift is for example ASR D1,D2
                    7372   ; sprintf(TempString,"D%X,D%X",
000041AA  2042      7373          move.l    D2,A0
000041AC  3210      7374          move.w    (A0),D1
000041AE  C27C 0007 7375          and.w     #7,D1
000041B2  C2BC 0000 7376          and.l     #65535,D1
000041B6  FFFF      
000041B8  2F01      7377          move.l    D1,-(A7)
000041BA  2042      7378          move.l    D2,A0
000041BC  3210      7379          move.w    (A0),D1
000041BE  E041      7380          asr.w     #8,D1
000041C0  E241      7381          asr.w     #1,D1
000041C2  C27C 0007 7382          and.w     #7,D1
000041C6  C2BC 0000 7383          and.l     #65535,D1
000041CA  FFFF      
000041CC  2F01      7384          move.l    D1,-(A7)
000041CE  4879 0000 7385          pea       @m68kde~2_222.L
000041D2  8256      
000041D4  2F0C      7386          move.l    A4,-(A7)
000041D6  4E95      7387          jsr       (A5)
000041D8  DEFC 0010 7388          add.w     #16,A7
                    7389   DisassembleInstruction_107:
                    7390   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7391   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7392   ; }
                    7393   ; strcatInstruction(TempString) ;
000041DC  2F0C      7394          move.l    A4,-(A7)
000041DE  4EB8 0CCC 7395          jsr       _strcatInstruction
000041E2  584F      7396          addq.w    #4,A7
                    7397   DisassembleInstruction_73:
                    7398   ; }
                    7399   ; }
                    7400   ; /////////////////////////////////////////////////////////////////////////////////
                    7401   ; // if instruction is BCC and BSR and BRA
                    7402   ; /////////////////////////////////////////////////////////////////////////////////
                    7403   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
000041E4  2042      7404          move.l    D2,A0
000041E6  3010      7405          move.w    (A0),D0
000041E8  C07C F000 7406          and.w     #61440,D0
000041EC  0C40 6000 7407          cmp.w     #24576,D0
000041F0  6600 00A0 7408          bne       DisassembleInstruction_108
                    7409   ; {
                    7410   ; InstructionSize = 1;
000041F4  24BC 0000 7411          move.l    #1,(A2)
000041F8  0001      
                    7412   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
000041FA  2042      7413          move.l    D2,A0
000041FC  3010      7414          move.w    (A0),D0
000041FE  E040      7415          asr.w     #8,D0
00004200  C07C 000F 7416          and.w     #15,D0
00004204  1D40 FFE9 7417          move.b    D0,-23(A6)
                    7418   ; strcpyInstruction("B") ;
00004208  4879 0000 7419          pea       @m68kde~2_235.L
0000420C  82AE      
0000420E  4E93      7420          jsr       (A3)
00004210  584F      7421          addq.w    #4,A7
                    7422   ; DecodeBranchCondition(Condition) ;
00004212  122E FFE9 7423          move.b    -23(A6),D1
00004216  C27C 00FF 7424          and.w     #255,D1
0000421A  C2BC 0000 7425          and.l     #65535,D1
0000421E  FFFF      
00004220  2F01      7426          move.l    D1,-(A7)
00004222  4EB8 38FA 7427          jsr       _DecodeBranchCondition
00004226  584F      7428          addq.w    #4,A7
                    7429   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
00004228  2042      7430          move.l    D2,A0
0000422A  3010      7431          move.w    (A0),D0
0000422C  C07C 00FF 7432          and.w     #255,D0
00004230  1D40 FFFB 7433          move.b    D0,-5(A6)
                    7434   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00004234  102E FFFB 7435          move.b    -5(A6),D0
00004238  4880      7436          ext.w     D0
0000423A  4A40      7437          tst.w     D0
0000423C  662A      7438          bne.s     DisassembleInstruction_110
                    7439   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
0000423E  2202      7440          move.l    D2,D1
00004240  2042      7441          move.l    D2,A0
00004242  2F00      7442          move.l    D0,-(A7)
00004244  3028 0002 7443          move.w    2(A0),D0
00004248  48C0      7444          ext.l     D0
0000424A  D280      7445          add.l     D0,D1
0000424C  201F      7446          move.l    (A7)+,D0
0000424E  5481      7447          addq.l    #2,D1
00004250  2F01      7448          move.l    D1,-(A7)
00004252  4879 0000 7449          pea       @m68kde~2_185.L
00004256  817A      
00004258  2F0C      7450          move.l    A4,-(A7)
0000425A  4E95      7451          jsr       (A5)
0000425C  DEFC 000C 7452          add.w     #12,A7
                    7453   ; InstructionSize = 2 ;
00004260  24BC 0000 7454          move.l    #2,(A2)
00004264  0002      
00004266  6022      7455          bra.s     DisassembleInstruction_111
                    7456   DisassembleInstruction_110:
                    7457   ; }
                    7458   ; else
                    7459   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
00004268  2202      7460          move.l    D2,D1
0000426A  2F00      7461          move.l    D0,-(A7)
0000426C  102E FFFB 7462          move.b    -5(A6),D0
00004270  4880      7463          ext.w     D0
00004272  48C0      7464          ext.l     D0
00004274  D280      7465          add.l     D0,D1
00004276  201F      7466          move.l    (A7)+,D0
00004278  5481      7467          addq.l    #2,D1
0000427A  2F01      7468          move.l    D1,-(A7)
0000427C  4879 0000 7469          pea       @m68kde~2_185.L
00004280  817A      
00004282  2F0C      7470          move.l    A4,-(A7)
00004284  4E95      7471          jsr       (A5)
00004286  DEFC 000C 7472          add.w     #12,A7
                    7473   DisassembleInstruction_111:
                    7474   ; strcatInstruction(TempString) ;
0000428A  2F0C      7475          move.l    A4,-(A7)
0000428C  4EB8 0CCC 7476          jsr       _strcatInstruction
00004290  584F      7477          addq.w    #4,A7
                    7478   DisassembleInstruction_108:
                    7479   ; }
                    7480   ; /////////////////////////////////////////////////////////////////////////////////
                    7481   ; // if instruction is BCHG dn,<EA>
                    7482   ; /////////////////////////////////////////////////////////////////////////////////
                    7483   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00004292  2042      7484          move.l    D2,A0
00004294  3010      7485          move.w    (A0),D0
00004296  C07C F1C0 7486          and.w     #61888,D0
0000429A  0C40 0140 7487          cmp.w     #320,D0
0000429E  6600 004C 7488          bne       DisassembleInstruction_112
                    7489   ; InstructionSize = 1;
000042A2  24BC 0000 7490          move.l    #1,(A2)
000042A6  0001      
                    7491   ; strcpyInstruction("BCHG ") ;
000042A8  4879 0000 7492          pea       @m68kde~2_236.L
000042AC  82B0      
000042AE  4E93      7493          jsr       (A3)
000042B0  584F      7494          addq.w    #4,A7
                    7495   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000042B2  2042      7496          move.l    D2,A0
000042B4  3210      7497          move.w    (A0),D1
000042B6  E041      7498          asr.w     #8,D1
000042B8  E241      7499          asr.w     #1,D1
000042BA  C27C 0007 7500          and.w     #7,D1
000042BE  C2BC 0000 7501          and.l     #65535,D1
000042C2  FFFF      
000042C4  2F01      7502          move.l    D1,-(A7)
000042C6  4879 0000 7503          pea       @m68kde~2_237.L
000042CA  82B6      
000042CC  2F0C      7504          move.l    A4,-(A7)
000042CE  4E95      7505          jsr       (A5)
000042D0  DEFC 000C 7506          add.w     #12,A7
                    7507   ; strcatInstruction(TempString) ;
000042D4  2F0C      7508          move.l    A4,-(A7)
000042D6  4EB8 0CCC 7509          jsr       _strcatInstruction
000042DA  584F      7510          addq.w    #4,A7
                    7511   ; Decode6BitEA(OpCode,0,0,0) ;
000042DC  42A7      7512          clr.l     -(A7)
000042DE  42A7      7513          clr.l     -(A7)
000042E0  42A7      7514          clr.l     -(A7)
000042E2  2F02      7515          move.l    D2,-(A7)
000042E4  4EB8 343C 7516          jsr       _Decode6BitEA
000042E8  DEFC 0010 7517          add.w     #16,A7
                    7518   DisassembleInstruction_112:
                    7519   ; }
                    7520   ; /////////////////////////////////////////////////////////////////////////////////
                    7521   ; // if instruction is BCHG #data,<EA>
                    7522   ; /////////////////////////////////////////////////////////////////////////////////
                    7523   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
000042EC  2042      7524          move.l    D2,A0
000042EE  3010      7525          move.w    (A0),D0
000042F0  C07C FFC0 7526          and.w     #65472,D0
000042F4  0C40 0840 7527          cmp.w     #2112,D0
000042F8  6600 0044 7528          bne       DisassembleInstruction_114
                    7529   ; strcpyInstruction("BCHG ") ;
000042FC  4879 0000 7530          pea       @m68kde~2_236.L
00004300  82B0      
00004302  4E93      7531          jsr       (A3)
00004304  584F      7532          addq.w    #4,A7
                    7533   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004306  2042      7534          move.l    D2,A0
00004308  3228 0002 7535          move.w    2(A0),D1
0000430C  48C1      7536          ext.l     D1
0000430E  2F01      7537          move.l    D1,-(A7)
00004310  4879 0000 7538          pea       @m68kde~2_238.L
00004314  82BC      
00004316  2F0C      7539          move.l    A4,-(A7)
00004318  4E95      7540          jsr       (A5)
0000431A  DEFC 000C 7541          add.w     #12,A7
                    7542   ; InstructionSize = 2 ;
0000431E  24BC 0000 7543          move.l    #2,(A2)
00004322  0002      
                    7544   ; strcatInstruction(TempString) ;
00004324  2F0C      7545          move.l    A4,-(A7)
00004326  4EB8 0CCC 7546          jsr       _strcatInstruction
0000432A  584F      7547          addq.w    #4,A7
                    7548   ; Decode6BitEA(OpCode,0,1,0) ;
0000432C  42A7      7549          clr.l     -(A7)
0000432E  4878 0001 7550          pea       1
00004332  42A7      7551          clr.l     -(A7)
00004334  2F02      7552          move.l    D2,-(A7)
00004336  4EB8 343C 7553          jsr       _Decode6BitEA
0000433A  DEFC 0010 7554          add.w     #16,A7
                    7555   DisassembleInstruction_114:
                    7556   ; }
                    7557   ; /////////////////////////////////////////////////////////////////////////////////
                    7558   ; // if instruction is BCLR  dn,<EA>
                    7559   ; /////////////////////////////////////////////////////////////////////////////////
                    7560   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
0000433E  2042      7561          move.l    D2,A0
00004340  3010      7562          move.w    (A0),D0
00004342  C07C F1C0 7563          and.w     #61888,D0
00004346  0C40 0180 7564          cmp.w     #384,D0
0000434A  6600 004C 7565          bne       DisassembleInstruction_116
                    7566   ; InstructionSize = 1;
0000434E  24BC 0000 7567          move.l    #1,(A2)
00004352  0001      
                    7568   ; strcpyInstruction("BCLR ") ;
00004354  4879 0000 7569          pea       @m68kde~2_239.L
00004358  82C2      
0000435A  4E93      7570          jsr       (A3)
0000435C  584F      7571          addq.w    #4,A7
                    7572   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000435E  2042      7573          move.l    D2,A0
00004360  3210      7574          move.w    (A0),D1
00004362  E041      7575          asr.w     #8,D1
00004364  E241      7576          asr.w     #1,D1
00004366  C27C 0007 7577          and.w     #7,D1
0000436A  C2BC 0000 7578          and.l     #65535,D1
0000436E  FFFF      
00004370  2F01      7579          move.l    D1,-(A7)
00004372  4879 0000 7580          pea       @m68kde~2_237.L
00004376  82B6      
00004378  2F0C      7581          move.l    A4,-(A7)
0000437A  4E95      7582          jsr       (A5)
0000437C  DEFC 000C 7583          add.w     #12,A7
                    7584   ; strcatInstruction(TempString) ;
00004380  2F0C      7585          move.l    A4,-(A7)
00004382  4EB8 0CCC 7586          jsr       _strcatInstruction
00004386  584F      7587          addq.w    #4,A7
                    7588   ; Decode6BitEA(OpCode,0,0,0) ;
00004388  42A7      7589          clr.l     -(A7)
0000438A  42A7      7590          clr.l     -(A7)
0000438C  42A7      7591          clr.l     -(A7)
0000438E  2F02      7592          move.l    D2,-(A7)
00004390  4EB8 343C 7593          jsr       _Decode6BitEA
00004394  DEFC 0010 7594          add.w     #16,A7
                    7595   DisassembleInstruction_116:
                    7596   ; }
                    7597   ; /////////////////////////////////////////////////////////////////////////////////
                    7598   ; // if instruction is BCLR #data,<EA>
                    7599   ; /////////////////////////////////////////////////////////////////////////////////
                    7600   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
00004398  2042      7601          move.l    D2,A0
0000439A  3010      7602          move.w    (A0),D0
0000439C  C07C FFC0 7603          and.w     #65472,D0
000043A0  0C40 0880 7604          cmp.w     #2176,D0
000043A4  6600 0044 7605          bne       DisassembleInstruction_118
                    7606   ; strcpyInstruction("BCLR ") ;
000043A8  4879 0000 7607          pea       @m68kde~2_239.L
000043AC  82C2      
000043AE  4E93      7608          jsr       (A3)
000043B0  584F      7609          addq.w    #4,A7
                    7610   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000043B2  2042      7611          move.l    D2,A0
000043B4  3228 0002 7612          move.w    2(A0),D1
000043B8  48C1      7613          ext.l     D1
000043BA  2F01      7614          move.l    D1,-(A7)
000043BC  4879 0000 7615          pea       @m68kde~2_238.L
000043C0  82BC      
000043C2  2F0C      7616          move.l    A4,-(A7)
000043C4  4E95      7617          jsr       (A5)
000043C6  DEFC 000C 7618          add.w     #12,A7
                    7619   ; InstructionSize = 2 ;
000043CA  24BC 0000 7620          move.l    #2,(A2)
000043CE  0002      
                    7621   ; strcatInstruction(TempString) ;
000043D0  2F0C      7622          move.l    A4,-(A7)
000043D2  4EB8 0CCC 7623          jsr       _strcatInstruction
000043D6  584F      7624          addq.w    #4,A7
                    7625   ; Decode6BitEA(OpCode,0,1,0) ;
000043D8  42A7      7626          clr.l     -(A7)
000043DA  4878 0001 7627          pea       1
000043DE  42A7      7628          clr.l     -(A7)
000043E0  2F02      7629          move.l    D2,-(A7)
000043E2  4EB8 343C 7630          jsr       _Decode6BitEA
000043E6  DEFC 0010 7631          add.w     #16,A7
                    7632   DisassembleInstruction_118:
                    7633   ; }
                    7634   ; /////////////////////////////////////////////////////////////////////////////////
                    7635   ; // if instruction is BSET dn,<EA>
                    7636   ; /////////////////////////////////////////////////////////////////////////////////
                    7637   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
000043EA  2042      7638          move.l    D2,A0
000043EC  3010      7639          move.w    (A0),D0
000043EE  C07C F1C0 7640          and.w     #61888,D0
000043F2  0C40 01C0 7641          cmp.w     #448,D0
000043F6  6600 004C 7642          bne       DisassembleInstruction_120
                    7643   ; InstructionSize = 1;
000043FA  24BC 0000 7644          move.l    #1,(A2)
000043FE  0001      
                    7645   ; strcpyInstruction("BSET ") ;
00004400  4879 0000 7646          pea       @m68kde~2_240.L
00004404  82C8      
00004406  4E93      7647          jsr       (A3)
00004408  584F      7648          addq.w    #4,A7
                    7649   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000440A  2042      7650          move.l    D2,A0
0000440C  3210      7651          move.w    (A0),D1
0000440E  E041      7652          asr.w     #8,D1
00004410  E241      7653          asr.w     #1,D1
00004412  C27C 0007 7654          and.w     #7,D1
00004416  C2BC 0000 7655          and.l     #65535,D1
0000441A  FFFF      
0000441C  2F01      7656          move.l    D1,-(A7)
0000441E  4879 0000 7657          pea       @m68kde~2_237.L
00004422  82B6      
00004424  2F0C      7658          move.l    A4,-(A7)
00004426  4E95      7659          jsr       (A5)
00004428  DEFC 000C 7660          add.w     #12,A7
                    7661   ; strcatInstruction(TempString) ;
0000442C  2F0C      7662          move.l    A4,-(A7)
0000442E  4EB8 0CCC 7663          jsr       _strcatInstruction
00004432  584F      7664          addq.w    #4,A7
                    7665   ; Decode6BitEA(OpCode,0,0,0) ;
00004434  42A7      7666          clr.l     -(A7)
00004436  42A7      7667          clr.l     -(A7)
00004438  42A7      7668          clr.l     -(A7)
0000443A  2F02      7669          move.l    D2,-(A7)
0000443C  4EB8 343C 7670          jsr       _Decode6BitEA
00004440  DEFC 0010 7671          add.w     #16,A7
                    7672   DisassembleInstruction_120:
                    7673   ; }
                    7674   ; /////////////////////////////////////////////////////////////////////////////////
                    7675   ; // if instruction is BSET #data,<EA>
                    7676   ; /////////////////////////////////////////////////////////////////////////////////
                    7677   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
00004444  2042      7678          move.l    D2,A0
00004446  3010      7679          move.w    (A0),D0
00004448  C07C FFC0 7680          and.w     #65472,D0
0000444C  0C40 08C0 7681          cmp.w     #2240,D0
00004450  6600 0044 7682          bne       DisassembleInstruction_122
                    7683   ; strcpyInstruction("BSET ") ;
00004454  4879 0000 7684          pea       @m68kde~2_240.L
00004458  82C8      
0000445A  4E93      7685          jsr       (A3)
0000445C  584F      7686          addq.w    #4,A7
                    7687   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
0000445E  2042      7688          move.l    D2,A0
00004460  3228 0002 7689          move.w    2(A0),D1
00004464  48C1      7690          ext.l     D1
00004466  2F01      7691          move.l    D1,-(A7)
00004468  4879 0000 7692          pea       @m68kde~2_238.L
0000446C  82BC      
0000446E  2F0C      7693          move.l    A4,-(A7)
00004470  4E95      7694          jsr       (A5)
00004472  DEFC 000C 7695          add.w     #12,A7
                    7696   ; InstructionSize = 2 ;
00004476  24BC 0000 7697          move.l    #2,(A2)
0000447A  0002      
                    7698   ; strcatInstruction(TempString) ;
0000447C  2F0C      7699          move.l    A4,-(A7)
0000447E  4EB8 0CCC 7700          jsr       _strcatInstruction
00004482  584F      7701          addq.w    #4,A7
                    7702   ; Decode6BitEA(OpCode,0,1,0) ;
00004484  42A7      7703          clr.l     -(A7)
00004486  4878 0001 7704          pea       1
0000448A  42A7      7705          clr.l     -(A7)
0000448C  2F02      7706          move.l    D2,-(A7)
0000448E  4EB8 343C 7707          jsr       _Decode6BitEA
00004492  DEFC 0010 7708          add.w     #16,A7
                    7709   DisassembleInstruction_122:
                    7710   ; }
                    7711   ; /////////////////////////////////////////////////////////////////////////////////
                    7712   ; // if instruction is BTST dn,<EA>
                    7713   ; /////////////////////////////////////////////////////////////////////////////////
                    7714   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
00004496  2042      7715          move.l    D2,A0
00004498  3010      7716          move.w    (A0),D0
0000449A  C07C F1C0 7717          and.w     #61888,D0
0000449E  0C40 0100 7718          cmp.w     #256,D0
000044A2  6600 004C 7719          bne       DisassembleInstruction_124
                    7720   ; InstructionSize = 1;
000044A6  24BC 0000 7721          move.l    #1,(A2)
000044AA  0001      
                    7722   ; strcpyInstruction("BTST ") ;
000044AC  4879 0000 7723          pea       @m68kde~2_241.L
000044B0  82CE      
000044B2  4E93      7724          jsr       (A3)
000044B4  584F      7725          addq.w    #4,A7
                    7726   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000044B6  2042      7727          move.l    D2,A0
000044B8  3210      7728          move.w    (A0),D1
000044BA  E041      7729          asr.w     #8,D1
000044BC  E241      7730          asr.w     #1,D1
000044BE  C27C 0007 7731          and.w     #7,D1
000044C2  C2BC 0000 7732          and.l     #65535,D1
000044C6  FFFF      
000044C8  2F01      7733          move.l    D1,-(A7)
000044CA  4879 0000 7734          pea       @m68kde~2_237.L
000044CE  82B6      
000044D0  2F0C      7735          move.l    A4,-(A7)
000044D2  4E95      7736          jsr       (A5)
000044D4  DEFC 000C 7737          add.w     #12,A7
                    7738   ; strcatInstruction(TempString) ;
000044D8  2F0C      7739          move.l    A4,-(A7)
000044DA  4EB8 0CCC 7740          jsr       _strcatInstruction
000044DE  584F      7741          addq.w    #4,A7
                    7742   ; Decode6BitEA(OpCode,0,0,0) ;
000044E0  42A7      7743          clr.l     -(A7)
000044E2  42A7      7744          clr.l     -(A7)
000044E4  42A7      7745          clr.l     -(A7)
000044E6  2F02      7746          move.l    D2,-(A7)
000044E8  4EB8 343C 7747          jsr       _Decode6BitEA
000044EC  DEFC 0010 7748          add.w     #16,A7
                    7749   DisassembleInstruction_124:
                    7750   ; }
                    7751   ; /////////////////////////////////////////////////////////////////////////////////
                    7752   ; // if instruction is BTST #data,<EA>
                    7753   ; /////////////////////////////////////////////////////////////////////////////////
                    7754   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
000044F0  2042      7755          move.l    D2,A0
000044F2  3010      7756          move.w    (A0),D0
000044F4  C07C FFC0 7757          and.w     #65472,D0
000044F8  0C40 0800 7758          cmp.w     #2048,D0
000044FC  6600 0044 7759          bne       DisassembleInstruction_126
                    7760   ; strcpyInstruction("BTST ") ;
00004500  4879 0000 7761          pea       @m68kde~2_241.L
00004504  82CE      
00004506  4E93      7762          jsr       (A3)
00004508  584F      7763          addq.w    #4,A7
                    7764   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
0000450A  2042      7765          move.l    D2,A0
0000450C  3228 0002 7766          move.w    2(A0),D1
00004510  48C1      7767          ext.l     D1
00004512  2F01      7768          move.l    D1,-(A7)
00004514  4879 0000 7769          pea       @m68kde~2_238.L
00004518  82BC      
0000451A  2F0C      7770          move.l    A4,-(A7)
0000451C  4E95      7771          jsr       (A5)
0000451E  DEFC 000C 7772          add.w     #12,A7
                    7773   ; InstructionSize = 2 ;
00004522  24BC 0000 7774          move.l    #2,(A2)
00004526  0002      
                    7775   ; strcatInstruction(TempString) ;
00004528  2F0C      7776          move.l    A4,-(A7)
0000452A  4EB8 0CCC 7777          jsr       _strcatInstruction
0000452E  584F      7778          addq.w    #4,A7
                    7779   ; Decode6BitEA(OpCode,0,1,0) ;
00004530  42A7      7780          clr.l     -(A7)
00004532  4878 0001 7781          pea       1
00004536  42A7      7782          clr.l     -(A7)
00004538  2F02      7783          move.l    D2,-(A7)
0000453A  4EB8 343C 7784          jsr       _Decode6BitEA
0000453E  DEFC 0010 7785          add.w     #16,A7
                    7786   DisassembleInstruction_126:
                    7787   ; }
                    7788   ; /////////////////////////////////////////////////////////////////////////////////
                    7789   ; // if instruction is CHK.W <EA>,DN
                    7790   ; /////////////////////////////////////////////////////////////////////////////////
                    7791   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
00004542  2042      7792          move.l    D2,A0
00004544  3010      7793          move.w    (A0),D0
00004546  C07C F1C0 7794          and.w     #61888,D0
0000454A  0C40 4180 7795          cmp.w     #16768,D0
0000454E  6600 004C 7796          bne       DisassembleInstruction_128
                    7797   ; InstructionSize = 1;
00004552  24BC 0000 7798          move.l    #1,(A2)
00004556  0001      
                    7799   ; strcpyInstruction("CHK ") ;
00004558  4879 0000 7800          pea       @m68kde~2_242.L
0000455C  82D4      
0000455E  4E93      7801          jsr       (A3)
00004560  584F      7802          addq.w    #4,A7
                    7803   ; Decode6BitEA(OpCode,0,0,0) ;
00004562  42A7      7804          clr.l     -(A7)
00004564  42A7      7805          clr.l     -(A7)
00004566  42A7      7806          clr.l     -(A7)
00004568  2F02      7807          move.l    D2,-(A7)
0000456A  4EB8 343C 7808          jsr       _Decode6BitEA
0000456E  DEFC 0010 7809          add.w     #16,A7
                    7810   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004572  2042      7811          move.l    D2,A0
00004574  3210      7812          move.w    (A0),D1
00004576  E041      7813          asr.w     #8,D1
00004578  E241      7814          asr.w     #1,D1
0000457A  C27C 0007 7815          and.w     #7,D1
0000457E  C2BC 0000 7816          and.l     #65535,D1
00004582  FFFF      
00004584  2F01      7817          move.l    D1,-(A7)
00004586  4879 0000 7818          pea       @m68kde~2_243.L
0000458A  82DA      
0000458C  2F0C      7819          move.l    A4,-(A7)
0000458E  4E95      7820          jsr       (A5)
00004590  DEFC 000C 7821          add.w     #12,A7
                    7822   ; strcatInstruction(TempString) ;
00004594  2F0C      7823          move.l    A4,-(A7)
00004596  4EB8 0CCC 7824          jsr       _strcatInstruction
0000459A  584F      7825          addq.w    #4,A7
                    7826   DisassembleInstruction_128:
                    7827   ; }
                    7828   ; /////////////////////////////////////////////////////////////////////////////////
                    7829   ; // if instruction is CLR <EA>
                    7830   ; /////////////////////////////////////////////////////////////////////////////////
                    7831   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
0000459C  2042      7832          move.l    D2,A0
0000459E  3010      7833          move.w    (A0),D0
000045A0  C07C FF00 7834          and.w     #65280,D0
000045A4  0C40 4200 7835          cmp.w     #16896,D0
000045A8  6600 0034 7836          bne       DisassembleInstruction_130
                    7837   ; InstructionSize = 1;
000045AC  24BC 0000 7838          move.l    #1,(A2)
000045B0  0001      
                    7839   ; strcpyInstruction("CLR") ;
000045B2  4879 0000 7840          pea       @m68kde~2_244.L
000045B6  82E0      
000045B8  4E93      7841          jsr       (A3)
000045BA  584F      7842          addq.w    #4,A7
                    7843   ; Decode2BitOperandSize(*OpCode) ;
000045BC  2042      7844          move.l    D2,A0
000045BE  3210      7845          move.w    (A0),D1
000045C0  C2BC 0000 7846          and.l     #65535,D1
000045C4  FFFF      
000045C6  2F01      7847          move.l    D1,-(A7)
000045C8  4EB8 31A8 7848          jsr       _Decode2BitOperandSize
000045CC  584F      7849          addq.w    #4,A7
                    7850   ; Decode6BitEA(OpCode,0,0,0) ;
000045CE  42A7      7851          clr.l     -(A7)
000045D0  42A7      7852          clr.l     -(A7)
000045D2  42A7      7853          clr.l     -(A7)
000045D4  2F02      7854          move.l    D2,-(A7)
000045D6  4EB8 343C 7855          jsr       _Decode6BitEA
000045DA  DEFC 0010 7856          add.w     #16,A7
                    7857   DisassembleInstruction_130:
                    7858   ; }
                    7859   ; /////////////////////////////////////////////////////////////////////////////////
                    7860   ; // if instruction is CMP, CMPA
                    7861   ; /////////////////////////////////////////////////////////////////////////////////
                    7862   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
000045DE  2042      7863          move.l    D2,A0
000045E0  3010      7864          move.w    (A0),D0
000045E2  C07C F000 7865          and.w     #61440,D0
000045E6  0C40 B000 7866          cmp.w     #45056,D0
000045EA  6600 008C 7867          bne       DisassembleInstruction_135
                    7868   ; {
                    7869   ; InstructionSize = 1;
000045EE  24BC 0000 7870          move.l    #1,(A2)
000045F2  0001      
                    7871   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000045F4  2042      7872          move.l    D2,A0
000045F6  3010      7873          move.w    (A0),D0
000045F8  EC40      7874          asr.w     #6,D0
000045FA  C07C 0007 7875          and.w     #7,D0
000045FE  3600      7876          move.w    D0,D3
                    7877   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
00004600  0C43 0003 7878          cmp.w     #3,D3
00004604  6708      7879          beq.s     DisassembleInstruction_136
00004606  0C43 0007 7880          cmp.w     #7,D3
0000460A  6600 005A 7881          bne       DisassembleInstruction_134
                    7882   DisassembleInstruction_136:
                    7883   ; if(OpMode == (unsigned short int)(0x0003))
0000460E  0C43 0003 7884          cmp.w     #3,D3
00004612  660C      7885          bne.s     DisassembleInstruction_137
                    7886   ; strcpyInstruction("CMPA.W ") ;
00004614  4879 0000 7887          pea       @m68kde~2_245.L
00004618  82E4      
0000461A  4E93      7888          jsr       (A3)
0000461C  584F      7889          addq.w    #4,A7
0000461E  600A      7890          bra.s     DisassembleInstruction_138
                    7891   DisassembleInstruction_137:
                    7892   ; else
                    7893   ; strcpyInstruction("CMPA.L ") ;
00004620  4879 0000 7894          pea       @m68kde~2_246.L
00004624  82EC      
00004626  4E93      7895          jsr       (A3)
00004628  584F      7896          addq.w    #4,A7
                    7897   DisassembleInstruction_138:
                    7898   ; Decode6BitEA(OpCode,0,0,0) ;
0000462A  42A7      7899          clr.l     -(A7)
0000462C  42A7      7900          clr.l     -(A7)
0000462E  42A7      7901          clr.l     -(A7)
00004630  2F02      7902          move.l    D2,-(A7)
00004632  4EB8 343C 7903          jsr       _Decode6BitEA
00004636  DEFC 0010 7904          add.w     #16,A7
                    7905   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
0000463A  2042      7906          move.l    D2,A0
0000463C  3210      7907          move.w    (A0),D1
0000463E  E041      7908          asr.w     #8,D1
00004640  E241      7909          asr.w     #1,D1
00004642  C27C 0007 7910          and.w     #7,D1
00004646  C2BC 0000 7911          and.l     #65535,D1
0000464A  FFFF      
0000464C  2F01      7912          move.l    D1,-(A7)
0000464E  4879 0000 7913          pea       @m68kde~2_247.L
00004652  82F4      
00004654  2F0C      7914          move.l    A4,-(A7)
00004656  4E95      7915          jsr       (A5)
00004658  DEFC 000C 7916          add.w     #12,A7
                    7917   ; strcatInstruction(TempString) ;
0000465C  2F0C      7918          move.l    A4,-(A7)
0000465E  4EB8 0CCC 7919          jsr       _strcatInstruction
00004662  584F      7920          addq.w    #4,A7
00004664  6012      7921          bra.s     DisassembleInstruction_135
                    7922   DisassembleInstruction_134:
                    7923   ; }
                    7924   ; else {
                    7925   ; strcpyInstruction("CMP") ;
00004666  4879 0000 7926          pea       @m68kde~2_248.L
0000466A  82FA      
0000466C  4E93      7927          jsr       (A3)
0000466E  584F      7928          addq.w    #4,A7
                    7929   ; Decode3BitOperandMode(OpCode) ;
00004670  2F02      7930          move.l    D2,-(A7)
00004672  4EB8 3864 7931          jsr       _Decode3BitOperandMode
00004676  584F      7932          addq.w    #4,A7
                    7933   DisassembleInstruction_135:
                    7934   ; }
                    7935   ; }
                    7936   ; /////////////////////////////////////////////////////////////////////////////////
                    7937   ; // if instruction is CMPM
                    7938   ; /////////////////////////////////////////////////////////////////////////////////
                    7939   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
00004678  2042      7940          move.l    D2,A0
0000467A  3010      7941          move.w    (A0),D0
0000467C  C07C F138 7942          and.w     #61752,D0
00004680  0C40 B108 7943          cmp.w     #45320,D0
00004684  6600 007A 7944          bne       DisassembleInstruction_141
                    7945   ; {
                    7946   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00004688  2042      7947          move.l    D2,A0
0000468A  3010      7948          move.w    (A0),D0
0000468C  EC40      7949          asr.w     #6,D0
0000468E  C07C 0003 7950          and.w     #3,D0
00004692  3600      7951          move.w    D0,D3
                    7952   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
00004694  0C43 0000 7953          cmp.w     #0,D3
00004698  6500 0066 7954          blo       DisassembleInstruction_141
0000469C  0C43 0002 7955          cmp.w     #2,D3
000046A0  6200 005E 7956          bhi       DisassembleInstruction_141
                    7957   ; {
                    7958   ; InstructionSize = 1;
000046A4  24BC 0000 7959          move.l    #1,(A2)
000046A8  0001      
                    7960   ; strcpyInstruction("CMPM") ;
000046AA  4879 0000 7961          pea       @m68kde~2_249.L
000046AE  82FE      
000046B0  4E93      7962          jsr       (A3)
000046B2  584F      7963          addq.w    #4,A7
                    7964   ; Decode2BitOperandSize(*OpCode) ;
000046B4  2042      7965          move.l    D2,A0
000046B6  3210      7966          move.w    (A0),D1
000046B8  C2BC 0000 7967          and.l     #65535,D1
000046BC  FFFF      
000046BE  2F01      7968          move.l    D1,-(A7)
000046C0  4EB8 31A8 7969          jsr       _Decode2BitOperandSize
000046C4  584F      7970          addq.w    #4,A7
                    7971   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
000046C6  2042      7972          move.l    D2,A0
000046C8  3210      7973          move.w    (A0),D1
000046CA  E041      7974          asr.w     #8,D1
000046CC  E241      7975          asr.w     #1,D1
000046CE  C27C 0007 7976          and.w     #7,D1
000046D2  C2BC 0000 7977          and.l     #65535,D1
000046D6  FFFF      
000046D8  2F01      7978          move.l    D1,-(A7)
000046DA  2042      7979          move.l    D2,A0
000046DC  3210      7980          move.w    (A0),D1
000046DE  C27C 0007 7981          and.w     #7,D1
000046E2  C2BC 0000 7982          and.l     #65535,D1
000046E6  FFFF      
000046E8  2F01      7983          move.l    D1,-(A7)
000046EA  4879 0000 7984          pea       @m68kde~2_250.L
000046EE  8304      
000046F0  2F0C      7985          move.l    A4,-(A7)
000046F2  4E95      7986          jsr       (A5)
000046F4  DEFC 0010 7987          add.w     #16,A7
                    7988   ; strcatInstruction(TempString) ;
000046F8  2F0C      7989          move.l    A4,-(A7)
000046FA  4EB8 0CCC 7990          jsr       _strcatInstruction
000046FE  584F      7991          addq.w    #4,A7
                    7992   DisassembleInstruction_141:
                    7993   ; }
                    7994   ; }
                    7995   ; /////////////////////////////////////////////////////////////////////////////////
                    7996   ; // if instruction is DBCC
                    7997   ; /////////////////////////////////////////////////////////////////////////////////
                    7998   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
00004700  2042      7999          move.l    D2,A0
00004702  3010      8000          move.w    (A0),D0
00004704  C07C F0F8 8001          and.w     #61688,D0
00004708  0C40 50C8 8002          cmp.w     #20680,D0
0000470C  6600 0084 8003          bne       DisassembleInstruction_143
                    8004   ; {
                    8005   ; InstructionSize = 2;
00004710  24BC 0000 8006          move.l    #2,(A2)
00004714  0002      
                    8007   ; strcpy(Instruction,"DB") ;
00004716  4879 0000 8008          pea       @m68kde~2_251.L
0000471A  8312      
0000471C  4879 0803 8009          pea       _Instruction.L
00004720  04E2      
00004722  4EB9 0000 8010          jsr       _strcpy
00004726  58F2      
00004728  504F      8011          addq.w    #8,A7
                    8012   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
0000472A  2042      8013          move.l    D2,A0
0000472C  3010      8014          move.w    (A0),D0
0000472E  E040      8015          asr.w     #8,D0
00004730  C07C 000F 8016          and.w     #15,D0
00004734  1D40 FFE9 8017          move.b    D0,-23(A6)
                    8018   ; DecodeBranchCondition(Condition) ;
00004738  122E FFE9 8019          move.b    -23(A6),D1
0000473C  C27C 00FF 8020          and.w     #255,D1
00004740  C2BC 0000 8021          and.l     #65535,D1
00004744  FFFF      
00004746  2F01      8022          move.l    D1,-(A7)
00004748  4EB8 38FA 8023          jsr       _DecodeBranchCondition
0000474C  584F      8024          addq.w    #4,A7
                    8025   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
0000474E  2202      8026          move.l    D2,D1
00004750  2042      8027          move.l    D2,A0
00004752  2F00      8028          move.l    D0,-(A7)
00004754  3028 0002 8029          move.w    2(A0),D0
00004758  48C0      8030          ext.l     D0
0000475A  D280      8031          add.l     D0,D1
0000475C  201F      8032          move.l    (A7)+,D0
0000475E  5481      8033          addq.l    #2,D1
00004760  2F01      8034          move.l    D1,-(A7)
00004762  2042      8035          move.l    D2,A0
00004764  3228 0002 8036          move.w    2(A0),D1
00004768  48C1      8037          ext.l     D1
0000476A  2F01      8038          move.l    D1,-(A7)
0000476C  2042      8039          move.l    D2,A0
0000476E  3210      8040          move.w    (A0),D1
00004770  C27C 0007 8041          and.w     #7,D1
00004774  C2BC 0000 8042          and.l     #65535,D1
00004778  FFFF      
0000477A  2F01      8043          move.l    D1,-(A7)
0000477C  4879 0000 8044          pea       @m68kde~2_252.L
00004780  8316      
00004782  2F0C      8045          move.l    A4,-(A7)
00004784  4E95      8046          jsr       (A5)
00004786  DEFC 0014 8047          add.w     #20,A7
                    8048   ; strcatInstruction(TempString) ;
0000478A  2F0C      8049          move.l    A4,-(A7)
0000478C  4EB8 0CCC 8050          jsr       _strcatInstruction
00004790  584F      8051          addq.w    #4,A7
                    8052   DisassembleInstruction_143:
                    8053   ; }
                    8054   ; /////////////////////////////////////////////////////////////////////////////////
                    8055   ; // if instruction is DIVS
                    8056   ; /////////////////////////////////////////////////////////////////////////////////
                    8057   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
00004792  2042      8058          move.l    D2,A0
00004794  3010      8059          move.w    (A0),D0
00004796  C07C F1C0 8060          and.w     #61888,D0
0000479A  0C40 81C0 8061          cmp.w     #33216,D0
0000479E  6600 004A 8062          bne       DisassembleInstruction_145
                    8063   ; {
                    8064   ; InstructionSize = 1;
000047A2  24BC 0000 8065          move.l    #1,(A2)
000047A6  0001      
                    8066   ; strcpy(Instruction,"DIVS ") ;
000047A8  4879 0000 8067          pea       @m68kde~2_253.L
000047AC  832E      
000047AE  4879 0803 8068          pea       _Instruction.L
000047B2  04E2      
000047B4  4EB9 0000 8069          jsr       _strcpy
000047B8  58F2      
000047BA  504F      8070          addq.w    #8,A7
                    8071   ; Decode6BitEA(OpCode,0,0,0) ;
000047BC  42A7      8072          clr.l     -(A7)
000047BE  42A7      8073          clr.l     -(A7)
000047C0  42A7      8074          clr.l     -(A7)
000047C2  2F02      8075          move.l    D2,-(A7)
000047C4  4EB8 343C 8076          jsr       _Decode6BitEA
000047C8  DEFC 0010 8077          add.w     #16,A7
                    8078   ; strcatInstruction(",") ;
000047CC  4879 0000 8079          pea       @m68kde~2_188.L
000047D0  818E      
000047D2  4EB8 0CCC 8080          jsr       _strcatInstruction
000047D6  584F      8081          addq.w    #4,A7
                    8082   ; Decode3BitDataRegister(*OpCode) ;
000047D8  2042      8083          move.l    D2,A0
000047DA  3210      8084          move.w    (A0),D1
000047DC  C2BC 0000 8085          and.l     #65535,D1
000047E0  FFFF      
000047E2  2F01      8086          move.l    D1,-(A7)
000047E4  4EB8 3204 8087          jsr       _Decode3BitDataRegister
000047E8  584F      8088          addq.w    #4,A7
                    8089   DisassembleInstruction_145:
                    8090   ; }
                    8091   ; /////////////////////////////////////////////////////////////////////////////////
                    8092   ; // if instruction is DIVU
                    8093   ; /////////////////////////////////////////////////////////////////////////////////
                    8094   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
000047EA  2042      8095          move.l    D2,A0
000047EC  3010      8096          move.w    (A0),D0
000047EE  C07C F1C0 8097          and.w     #61888,D0
000047F2  0C40 80C0 8098          cmp.w     #32960,D0
000047F6  6600 004A 8099          bne       DisassembleInstruction_147
                    8100   ; {
                    8101   ; InstructionSize = 1;
000047FA  24BC 0000 8102          move.l    #1,(A2)
000047FE  0001      
                    8103   ; strcpy(Instruction,"DIVU ") ;
00004800  4879 0000 8104          pea       @m68kde~2_254.L
00004804  8334      
00004806  4879 0803 8105          pea       _Instruction.L
0000480A  04E2      
0000480C  4EB9 0000 8106          jsr       _strcpy
00004810  58F2      
00004812  504F      8107          addq.w    #8,A7
                    8108   ; Decode6BitEA(OpCode,0,0,0) ;
00004814  42A7      8109          clr.l     -(A7)
00004816  42A7      8110          clr.l     -(A7)
00004818  42A7      8111          clr.l     -(A7)
0000481A  2F02      8112          move.l    D2,-(A7)
0000481C  4EB8 343C 8113          jsr       _Decode6BitEA
00004820  DEFC 0010 8114          add.w     #16,A7
                    8115   ; strcatInstruction(",") ;
00004824  4879 0000 8116          pea       @m68kde~2_188.L
00004828  818E      
0000482A  4EB8 0CCC 8117          jsr       _strcatInstruction
0000482E  584F      8118          addq.w    #4,A7
                    8119   ; Decode3BitDataRegister(*OpCode) ;
00004830  2042      8120          move.l    D2,A0
00004832  3210      8121          move.w    (A0),D1
00004834  C2BC 0000 8122          and.l     #65535,D1
00004838  FFFF      
0000483A  2F01      8123          move.l    D1,-(A7)
0000483C  4EB8 3204 8124          jsr       _Decode3BitDataRegister
00004840  584F      8125          addq.w    #4,A7
                    8126   DisassembleInstruction_147:
                    8127   ; }
                    8128   ; /////////////////////////////////////////////////////////////////////////////////
                    8129   ; // if instruction is EOR
                    8130   ; /////////////////////////////////////////////////////////////////////////////////
                    8131   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
00004842  2042      8132          move.l    D2,A0
00004844  3010      8133          move.w    (A0),D0
00004846  C07C F000 8134          and.w     #61440,D0
0000484A  0C40 B000 8135          cmp.w     #45056,D0
0000484E  6600 004A 8136          bne       DisassembleInstruction_151
                    8137   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004852  2042      8138          move.l    D2,A0
00004854  3010      8139          move.w    (A0),D0
00004856  EC40      8140          asr.w     #6,D0
00004858  C07C 0007 8141          and.w     #7,D0
0000485C  3600      8142          move.w    D0,D3
                    8143   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
0000485E  2042      8144          move.l    D2,A0
00004860  3010      8145          move.w    (A0),D0
00004862  E640      8146          asr.w     #3,D0
00004864  C07C 0007 8147          and.w     #7,D0
00004868  3D40 FFEC 8148          move.w    D0,-20(A6)
                    8149   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
0000486C  0C43 0004 8150          cmp.w     #4,D3
00004870  6528      8151          blo.s     DisassembleInstruction_151
00004872  0C43 0006 8152          cmp.w     #6,D3
00004876  6222      8153          bhi.s     DisassembleInstruction_151
00004878  302E FFEC 8154          move.w    -20(A6),D0
0000487C  0C40 0001 8155          cmp.w     #1,D0
00004880  6718      8156          beq.s     DisassembleInstruction_151
                    8157   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    8158   ; (EAMode != (unsigned short int)(0x0001)))
                    8159   ; {
                    8160   ; InstructionSize = 1;
00004882  24BC 0000 8161          move.l    #1,(A2)
00004886  0001      
                    8162   ; strcpyInstruction("EOR") ;
00004888  4879 0000 8163          pea       @m68kde~2_255.L
0000488C  833A      
0000488E  4E93      8164          jsr       (A3)
00004890  584F      8165          addq.w    #4,A7
                    8166   ; Decode3BitOperandMode(OpCode);
00004892  2F02      8167          move.l    D2,-(A7)
00004894  4EB8 3864 8168          jsr       _Decode3BitOperandMode
00004898  584F      8169          addq.w    #4,A7
                    8170   DisassembleInstruction_151:
                    8171   ; }
                    8172   ; }
                    8173   ; /////////////////////////////////////////////////////////////////////////////////
                    8174   ; // if instruction is EOR to CCR
                    8175   ; /////////////////////////////////////////////////////////////////////////////////
                    8176   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
0000489A  2042      8177          move.l    D2,A0
0000489C  3010      8178          move.w    (A0),D0
0000489E  0C40 0A3C 8179          cmp.w     #2620,D0
000048A2  662C      8180          bne.s     DisassembleInstruction_153
                    8181   ; InstructionSize = 1;
000048A4  24BC 0000 8182          move.l    #1,(A2)
000048A8  0001      
                    8183   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
000048AA  2042      8184          move.l    D2,A0
000048AC  3228 0002 8185          move.w    2(A0),D1
000048B0  C27C 00FF 8186          and.w     #255,D1
000048B4  C2BC 0000 8187          and.l     #65535,D1
000048B8  FFFF      
000048BA  2F01      8188          move.l    D1,-(A7)
000048BC  4879 0000 8189          pea       @m68kde~2_256.L
000048C0  833E      
000048C2  4879 0803 8190          pea       _Instruction.L
000048C6  04E2      
000048C8  4E95      8191          jsr       (A5)
000048CA  DEFC 000C 8192          add.w     #12,A7
                    8193   ; InstructionSize += 1;
000048CE  5292      8194          addq.l    #1,(A2)
                    8195   DisassembleInstruction_153:
                    8196   ; }
                    8197   ; /////////////////////////////////////////////////////////////////////////////////
                    8198   ; // if instruction is EORI #data,SR
                    8199   ; /////////////////////////////////////////////////////////////////////////////////
                    8200   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
000048D0  2042      8201          move.l    D2,A0
000048D2  3010      8202          move.w    (A0),D0
000048D4  0C40 0A7C 8203          cmp.w     #2684,D0
000048D8  6622      8204          bne.s     DisassembleInstruction_155
                    8205   ; InstructionSize = 2;
000048DA  24BC 0000 8206          move.l    #2,(A2)
000048DE  0002      
                    8207   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
000048E0  2042      8208          move.l    D2,A0
000048E2  3228 0002 8209          move.w    2(A0),D1
000048E6  48C1      8210          ext.l     D1
000048E8  2F01      8211          move.l    D1,-(A7)
000048EA  4879 0000 8212          pea       @m68kde~2_257.L
000048EE  834E      
000048F0  4879 0803 8213          pea       _Instruction.L
000048F4  04E2      
000048F6  4E95      8214          jsr       (A5)
000048F8  DEFC 000C 8215          add.w     #12,A7
                    8216   DisassembleInstruction_155:
                    8217   ; }
                    8218   ; /////////////////////////////////////////////////////////////////////////////////
                    8219   ; // if instruction is EXG
                    8220   ; /////////////////////////////////////////////////////////////////////////////////
                    8221   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
000048FC  2042      8222          move.l    D2,A0
000048FE  3010      8223          move.w    (A0),D0
00004900  C07C F100 8224          and.w     #61696,D0
00004904  0C40 C100 8225          cmp.w     #49408,D0
00004908  6600 00E0 8226          bne       DisassembleInstruction_163
                    8227   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
0000490C  2042      8228          move.l    D2,A0
0000490E  3010      8229          move.w    (A0),D0
00004910  E040      8230          asr.w     #8,D0
00004912  E240      8231          asr.w     #1,D0
00004914  C07C 0007 8232          and.w     #7,D0
00004918  3D40 FFF0 8233          move.w    D0,-16(A6)
                    8234   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
0000491C  2042      8235          move.l    D2,A0
0000491E  3010      8236          move.w    (A0),D0
00004920  C07C 0007 8237          and.w     #7,D0
00004924  3D40 FFF2 8238          move.w    D0,-14(A6)
                    8239   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
00004928  2042      8240          move.l    D2,A0
0000492A  3010      8241          move.w    (A0),D0
0000492C  E640      8242          asr.w     #3,D0
0000492E  C07C 001F 8243          and.w     #31,D0
00004932  3D40 FFF4 8244          move.w    D0,-12(A6)
                    8245   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
00004936  302E FFF4 8246          move.w    -12(A6),D0
0000493A  0C40 0008 8247          cmp.w     #8,D0
0000493E  6634      8248          bne.s     DisassembleInstruction_159
                    8249   ; InstructionSize = 1;
00004940  24BC 0000 8250          move.l    #1,(A2)
00004944  0001      
                    8251   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
00004946  322E FFF2 8252          move.w    -14(A6),D1
0000494A  C2BC 0000 8253          and.l     #65535,D1
0000494E  FFFF      
00004950  2F01      8254          move.l    D1,-(A7)
00004952  322E FFF0 8255          move.w    -16(A6),D1
00004956  C2BC 0000 8256          and.l     #65535,D1
0000495A  FFFF      
0000495C  2F01      8257          move.l    D1,-(A7)
0000495E  4879 0000 8258          pea       @m68kde~2_258.L
00004962  835C      
00004964  4879 0803 8259          pea       _Instruction.L
00004968  04E2      
0000496A  4E95      8260          jsr       (A5)
0000496C  DEFC 0010 8261          add.w     #16,A7
00004970  6000 0078 8262          bra       DisassembleInstruction_163
                    8263   DisassembleInstruction_159:
                    8264   ; }
                    8265   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
00004974  302E FFF4 8266          move.w    -12(A6),D0
00004978  0C40 0009 8267          cmp.w     #9,D0
0000497C  6632      8268          bne.s     DisassembleInstruction_161
                    8269   ; InstructionSize = 1;
0000497E  24BC 0000 8270          move.l    #1,(A2)
00004982  0001      
                    8271   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
00004984  322E FFF2 8272          move.w    -14(A6),D1
00004988  C2BC 0000 8273          and.l     #65535,D1
0000498C  FFFF      
0000498E  2F01      8274          move.l    D1,-(A7)
00004990  322E FFF0 8275          move.w    -16(A6),D1
00004994  C2BC 0000 8276          and.l     #65535,D1
00004998  FFFF      
0000499A  2F01      8277          move.l    D1,-(A7)
0000499C  4879 0000 8278          pea       @m68kde~2_259.L
000049A0  8368      
000049A2  4879 0803 8279          pea       _Instruction.L
000049A6  04E2      
000049A8  4E95      8280          jsr       (A5)
000049AA  DEFC 0010 8281          add.w     #16,A7
000049AE  603A      8282          bra.s     DisassembleInstruction_163
                    8283   DisassembleInstruction_161:
                    8284   ; }
                    8285   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
000049B0  302E FFF4 8286          move.w    -12(A6),D0
000049B4  0C40 0011 8287          cmp.w     #17,D0
000049B8  6630      8288          bne.s     DisassembleInstruction_163
                    8289   ; InstructionSize = 1;
000049BA  24BC 0000 8290          move.l    #1,(A2)
000049BE  0001      
                    8291   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
000049C0  322E FFF2 8292          move.w    -14(A6),D1
000049C4  C2BC 0000 8293          and.l     #65535,D1
000049C8  FFFF      
000049CA  2F01      8294          move.l    D1,-(A7)
000049CC  322E FFF0 8295          move.w    -16(A6),D1
000049D0  C2BC 0000 8296          and.l     #65535,D1
000049D4  FFFF      
000049D6  2F01      8297          move.l    D1,-(A7)
000049D8  4879 0000 8298          pea       @m68kde~2_260.L
000049DC  8374      
000049DE  4879 0803 8299          pea       _Instruction.L
000049E2  04E2      
000049E4  4E95      8300          jsr       (A5)
000049E6  DEFC 0010 8301          add.w     #16,A7
                    8302   DisassembleInstruction_163:
                    8303   ; }
                    8304   ; }
                    8305   ; /////////////////////////////////////////////////////////////////////////////////
                    8306   ; // if instruction is EXT
                    8307   ; /////////////////////////////////////////////////////////////////////////////////
                    8308   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
000049EA  2042      8309          move.l    D2,A0
000049EC  3010      8310          move.w    (A0),D0
000049EE  C07C FE38 8311          and.w     #65080,D0
000049F2  0C40 4800 8312          cmp.w     #18432,D0
000049F6  6600 0054 8313          bne       DisassembleInstruction_165
                    8314   ; {
                    8315   ; InstructionSize = 1;
000049FA  24BC 0000 8316          move.l    #1,(A2)
000049FE  0001      
                    8317   ; strcpy(Instruction,"EXT") ;
00004A00  4879 0000 8318          pea       @m68kde~2_261.L
00004A04  8380      
00004A06  4879 0803 8319          pea       _Instruction.L
00004A0A  04E2      
00004A0C  4EB9 0000 8320          jsr       _strcpy
00004A10  58F2      
00004A12  504F      8321          addq.w    #8,A7
                    8322   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
00004A14  2042      8323          move.l    D2,A0
00004A16  3010      8324          move.w    (A0),D0
00004A18  C07C 00C0 8325          and.w     #192,D0
00004A1C  0C40 00C0 8326          cmp.w     #192,D0
00004A20  660E      8327          bne.s     DisassembleInstruction_167
                    8328   ; strcatInstruction(".L ") ;
00004A22  4879 0000 8329          pea       @m68kde~2_172.L
00004A26  8144      
00004A28  4EB8 0CCC 8330          jsr       _strcatInstruction
00004A2C  584F      8331          addq.w    #4,A7
00004A2E  600C      8332          bra.s     DisassembleInstruction_168
                    8333   DisassembleInstruction_167:
                    8334   ; else
                    8335   ; strcatInstruction(".W ") ;
00004A30  4879 0000 8336          pea       @m68kde~2_171.L
00004A34  8140      
00004A36  4EB8 0CCC 8337          jsr       _strcatInstruction
00004A3A  584F      8338          addq.w    #4,A7
                    8339   DisassembleInstruction_168:
                    8340   ; Decode6BitEA(OpCode,0,0,0) ;
00004A3C  42A7      8341          clr.l     -(A7)
00004A3E  42A7      8342          clr.l     -(A7)
00004A40  42A7      8343          clr.l     -(A7)
00004A42  2F02      8344          move.l    D2,-(A7)
00004A44  4EB8 343C 8345          jsr       _Decode6BitEA
00004A48  DEFC 0010 8346          add.w     #16,A7
                    8347   DisassembleInstruction_165:
                    8348   ; }
                    8349   ; /////////////////////////////////////////////////////////////////////////////////
                    8350   ; // if instruction is ILLEGAL $4afc
                    8351   ; /////////////////////////////////////////////////////////////////////////////////
                    8352   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
00004A4C  2042      8353          move.l    D2,A0
00004A4E  3010      8354          move.w    (A0),D0
00004A50  0C40 4AFC 8355          cmp.w     #19196,D0
00004A54  661A      8356          bne.s     DisassembleInstruction_169
                    8357   ; InstructionSize = 1;
00004A56  24BC 0000 8358          move.l    #1,(A2)
00004A5A  0001      
                    8359   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
00004A5C  4879 0000 8360          pea       @m68kde~2_262.L
00004A60  8384      
00004A62  4879 0803 8361          pea       _Instruction.L
00004A66  04E2      
00004A68  4EB9 0000 8362          jsr       _strcpy
00004A6C  58F2      
00004A6E  504F      8363          addq.w    #8,A7
                    8364   DisassembleInstruction_169:
                    8365   ; }
                    8366   ; /////////////////////////////////////////////////////////////////////////////////
                    8367   ; // if instruction is JMP
                    8368   ; /////////////////////////////////////////////////////////////////////////////////
                    8369   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
00004A70  2042      8370          move.l    D2,A0
00004A72  3010      8371          move.w    (A0),D0
00004A74  C07C FFC0 8372          and.w     #65472,D0
00004A78  0C40 4EC0 8373          cmp.w     #20160,D0
00004A7C  662A      8374          bne.s     DisassembleInstruction_171
                    8375   ; {
                    8376   ; InstructionSize = 1;
00004A7E  24BC 0000 8377          move.l    #1,(A2)
00004A82  0001      
                    8378   ; strcpy(Instruction,"JMP ") ;
00004A84  4879 0000 8379          pea       @m68kde~2_263.L
00004A88  8394      
00004A8A  4879 0803 8380          pea       _Instruction.L
00004A8E  04E2      
00004A90  4EB9 0000 8381          jsr       _strcpy
00004A94  58F2      
00004A96  504F      8382          addq.w    #8,A7
                    8383   ; Decode6BitEA(OpCode,0,0,0) ;
00004A98  42A7      8384          clr.l     -(A7)
00004A9A  42A7      8385          clr.l     -(A7)
00004A9C  42A7      8386          clr.l     -(A7)
00004A9E  2F02      8387          move.l    D2,-(A7)
00004AA0  4EB8 343C 8388          jsr       _Decode6BitEA
00004AA4  DEFC 0010 8389          add.w     #16,A7
                    8390   DisassembleInstruction_171:
                    8391   ; }
                    8392   ; /////////////////////////////////////////////////////////////////////////////////
                    8393   ; // if instruction is JSR
                    8394   ; /////////////////////////////////////////////////////////////////////////////////
                    8395   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
00004AA8  2042      8396          move.l    D2,A0
00004AAA  3010      8397          move.w    (A0),D0
00004AAC  C07C FFC0 8398          and.w     #65472,D0
00004AB0  0C40 4E80 8399          cmp.w     #20096,D0
00004AB4  662A      8400          bne.s     DisassembleInstruction_173
                    8401   ; {
                    8402   ; InstructionSize = 1;
00004AB6  24BC 0000 8403          move.l    #1,(A2)
00004ABA  0001      
                    8404   ; strcpy(Instruction,"JSR ") ;
00004ABC  4879 0000 8405          pea       @m68kde~2_264.L
00004AC0  839A      
00004AC2  4879 0803 8406          pea       _Instruction.L
00004AC6  04E2      
00004AC8  4EB9 0000 8407          jsr       _strcpy
00004ACC  58F2      
00004ACE  504F      8408          addq.w    #8,A7
                    8409   ; Decode6BitEA(OpCode,0,0,0) ;
00004AD0  42A7      8410          clr.l     -(A7)
00004AD2  42A7      8411          clr.l     -(A7)
00004AD4  42A7      8412          clr.l     -(A7)
00004AD6  2F02      8413          move.l    D2,-(A7)
00004AD8  4EB8 343C 8414          jsr       _Decode6BitEA
00004ADC  DEFC 0010 8415          add.w     #16,A7
                    8416   DisassembleInstruction_173:
                    8417   ; }
                    8418   ; /////////////////////////////////////////////////////////////////////////////////
                    8419   ; // if instruction is LEA
                    8420   ; /////////////////////////////////////////////////////////////////////////////////
                    8421   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
00004AE0  2042      8422          move.l    D2,A0
00004AE2  3010      8423          move.w    (A0),D0
00004AE4  C07C F1C0 8424          and.w     #61888,D0
00004AE8  0C40 41C0 8425          cmp.w     #16832,D0
00004AEC  6600 0056 8426          bne       DisassembleInstruction_175
                    8427   ; {
                    8428   ; InstructionSize = 1;
00004AF0  24BC 0000 8429          move.l    #1,(A2)
00004AF4  0001      
                    8430   ; strcpy(Instruction,"LEA ") ;
00004AF6  4879 0000 8431          pea       @m68kde~2_265.L
00004AFA  83A0      
00004AFC  4879 0803 8432          pea       _Instruction.L
00004B00  04E2      
00004B02  4EB9 0000 8433          jsr       _strcpy
00004B06  58F2      
00004B08  504F      8434          addq.w    #8,A7
                    8435   ; Decode6BitEA(OpCode,0,0,0) ;
00004B0A  42A7      8436          clr.l     -(A7)
00004B0C  42A7      8437          clr.l     -(A7)
00004B0E  42A7      8438          clr.l     -(A7)
00004B10  2F02      8439          move.l    D2,-(A7)
00004B12  4EB8 343C 8440          jsr       _Decode6BitEA
00004B16  DEFC 0010 8441          add.w     #16,A7
                    8442   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
00004B1A  2042      8443          move.l    D2,A0
00004B1C  3210      8444          move.w    (A0),D1
00004B1E  E041      8445          asr.w     #8,D1
00004B20  E241      8446          asr.w     #1,D1
00004B22  C27C 0007 8447          and.w     #7,D1
00004B26  C2BC 0000 8448          and.l     #65535,D1
00004B2A  FFFF      
00004B2C  2F01      8449          move.l    D1,-(A7)
00004B2E  4879 0000 8450          pea       @m68kde~2_247.L
00004B32  82F4      
00004B34  2F0C      8451          move.l    A4,-(A7)
00004B36  4E95      8452          jsr       (A5)
00004B38  DEFC 000C 8453          add.w     #12,A7
                    8454   ; strcatInstruction(TempString);
00004B3C  2F0C      8455          move.l    A4,-(A7)
00004B3E  4EB8 0CCC 8456          jsr       _strcatInstruction
00004B42  584F      8457          addq.w    #4,A7
                    8458   DisassembleInstruction_175:
                    8459   ; }
                    8460   ; /////////////////////////////////////////////////////////////////////////////////
                    8461   ; // if instruction is LINK.W
                    8462   ; /////////////////////////////////////////////////////////////////////////////////
                    8463   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
00004B44  2042      8464          move.l    D2,A0
00004B46  3010      8465          move.w    (A0),D0
00004B48  C07C FFF8 8466          and.w     #65528,D0
00004B4C  0C40 4E50 8467          cmp.w     #20048,D0
00004B50  6600 0052 8468          bne       DisassembleInstruction_177
                    8469   ; {
                    8470   ; InstructionSize = 1;
00004B54  24BC 0000 8471          move.l    #1,(A2)
00004B58  0001      
                    8472   ; strcpy(Instruction,"LINK ") ;
00004B5A  4879 0000 8473          pea       @m68kde~2_266.L
00004B5E  83A6      
00004B60  4879 0803 8474          pea       _Instruction.L
00004B64  04E2      
00004B66  4EB9 0000 8475          jsr       _strcpy
00004B6A  58F2      
00004B6C  504F      8476          addq.w    #8,A7
                    8477   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
00004B6E  2042      8478          move.l    D2,A0
00004B70  3228 0002 8479          move.w    2(A0),D1
00004B74  48C1      8480          ext.l     D1
00004B76  2F01      8481          move.l    D1,-(A7)
00004B78  2042      8482          move.l    D2,A0
00004B7A  3210      8483          move.w    (A0),D1
00004B7C  C27C 0007 8484          and.w     #7,D1
00004B80  C2BC 0000 8485          and.l     #65535,D1
00004B84  FFFF      
00004B86  2F01      8486          move.l    D1,-(A7)
00004B88  4879 0000 8487          pea       @m68kde~2_267.L
00004B8C  83AC      
00004B8E  2F0C      8488          move.l    A4,-(A7)
00004B90  4E95      8489          jsr       (A5)
00004B92  DEFC 0010 8490          add.w     #16,A7
                    8491   ; InstructionSize = 2 ;
00004B96  24BC 0000 8492          move.l    #2,(A2)
00004B9A  0002      
                    8493   ; strcatInstruction(TempString);
00004B9C  2F0C      8494          move.l    A4,-(A7)
00004B9E  4EB8 0CCC 8495          jsr       _strcatInstruction
00004BA2  584F      8496          addq.w    #4,A7
                    8497   DisassembleInstruction_177:
                    8498   ; }
                    8499   ; /////////////////////////////////////////////////////////////////////////////////
                    8500   ; // if instruction is MOVE, MOVEA
                    8501   ; /////////////////////////////////////////////////////////////////////////////////
                    8502   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
00004BA4  2042      8503          move.l    D2,A0
00004BA6  3010      8504          move.w    (A0),D0
00004BA8  C07C C000 8505          and.w     #49152,D0
00004BAC  6600 00F0 8506          bne       DisassembleInstruction_193
                    8507   ; {
                    8508   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
00004BB0  2042      8509          move.l    D2,A0
00004BB2  3010      8510          move.w    (A0),D0
00004BB4  C07C 3000 8511          and.w     #12288,D0
00004BB8  E048      8512          lsr.w     #8,D0
00004BBA  E848      8513          lsr.w     #4,D0
00004BBC  3D40 FFE2 8514          move.w    D0,-30(A6)
                    8515   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
00004BC0  2042      8516          move.l    D2,A0
00004BC2  3010      8517          move.w    (A0),D0
00004BC4  E640      8518          asr.w     #3,D0
00004BC6  C07C 0007 8519          and.w     #7,D0
00004BCA  3600      8520          move.w    D0,D3
                    8521   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
00004BCC  2042      8522          move.l    D2,A0
00004BCE  3010      8523          move.w    (A0),D0
00004BD0  C07C 0007 8524          and.w     #7,D0
00004BD4  3D40 FFF6 8525          move.w    D0,-10(A6)
                    8526   ; DataSize = 0 ;
00004BD8  7E00      8527          moveq     #0,D7
                    8528   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8529   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
00004BDA  0C43 0005 8530          cmp.w     #5,D3
00004BDE  6706      8531          beq.s     DisassembleInstruction_183
00004BE0  0C43 0006 8532          cmp.w     #6,D3
00004BE4  6602      8533          bne.s     DisassembleInstruction_181
                    8534   DisassembleInstruction_183:
                    8535   ; DataSize = 1;  // source operands has 1 word after EA
00004BE6  7E01      8536          moveq     #1,D7
                    8537   DisassembleInstruction_181:
                    8538   ; // if source addressing mode is a 16 or 32 bit address
                    8539   ; if((OpMode == (unsigned short int)(0x0007))) {
00004BE8  0C43 0007 8540          cmp.w     #7,D3
00004BEC  660C      8541          bne.s     DisassembleInstruction_187
                    8542   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
00004BEE  302E FFF6 8543          move.w    -10(A6),D0
00004BF2  6604      8544          bne.s     DisassembleInstruction_186
                    8545   ; DataSize = 1 ;
00004BF4  7E01      8546          moveq     #1,D7
00004BF6  6002      8547          bra.s     DisassembleInstruction_187
                    8548   DisassembleInstruction_186:
                    8549   ; else
                    8550   ; DataSize = 2 ;
00004BF8  7E02      8551          moveq     #2,D7
                    8552   DisassembleInstruction_187:
                    8553   ; }
                    8554   ; // if source addressing mode is # then figure out size
                    8555   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
00004BFA  0C43 0007 8556          cmp.w     #7,D3
00004BFE  6624      8557          bne.s     DisassembleInstruction_191
00004C00  302E FFF6 8558          move.w    -10(A6),D0
00004C04  0C40 0004 8559          cmp.w     #4,D0
00004C08  661A      8560          bne.s     DisassembleInstruction_191
                    8561   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
00004C0A  302E FFE2 8562          move.w    -30(A6),D0
00004C0E  0C40 0001 8563          cmp.w     #1,D0
00004C12  670A      8564          beq.s     DisassembleInstruction_192
00004C14  302E FFE2 8565          move.w    -30(A6),D0
00004C18  0C40 0003 8566          cmp.w     #3,D0
00004C1C  6604      8567          bne.s     DisassembleInstruction_190
                    8568   DisassembleInstruction_192:
                    8569   ; DataSize = 1;
00004C1E  7E01      8570          moveq     #1,D7
00004C20  6002      8571          bra.s     DisassembleInstruction_191
                    8572   DisassembleInstruction_190:
                    8573   ; else
                    8574   ; DataSize = 2 ;
00004C22  7E02      8575          moveq     #2,D7
                    8576   DisassembleInstruction_191:
                    8577   ; //printf("DataSize = %d",DataSize) ;
                    8578   ; }
                    8579   ; if(Size != 0)
00004C24  302E FFE2 8580          move.w    -30(A6),D0
00004C28  6700 0074 8581          beq       DisassembleInstruction_193
                    8582   ; {
                    8583   ; InstructionSize = 1;
00004C2C  24BC 0000 8584          move.l    #1,(A2)
00004C30  0001      
                    8585   ; if(Size == 1)
00004C32  302E FFE2 8586          move.w    -30(A6),D0
00004C36  0C40 0001 8587          cmp.w     #1,D0
00004C3A  660C      8588          bne.s     DisassembleInstruction_195
                    8589   ; strcpyInstruction("MOVE.B ") ;
00004C3C  4879 0000 8590          pea       @m68kde~2_268.L
00004C40  83B4      
00004C42  4E93      8591          jsr       (A3)
00004C44  584F      8592          addq.w    #4,A7
00004C46  6020      8593          bra.s     DisassembleInstruction_198
                    8594   DisassembleInstruction_195:
                    8595   ; else if(Size == 2)
00004C48  302E FFE2 8596          move.w    -30(A6),D0
00004C4C  0C40 0002 8597          cmp.w     #2,D0
00004C50  660C      8598          bne.s     DisassembleInstruction_197
                    8599   ; strcpyInstruction("MOVE.L ") ;
00004C52  4879 0000 8600          pea       @m68kde~2_269.L
00004C56  83BC      
00004C58  4E93      8601          jsr       (A3)
00004C5A  584F      8602          addq.w    #4,A7
00004C5C  600A      8603          bra.s     DisassembleInstruction_198
                    8604   DisassembleInstruction_197:
                    8605   ; else
                    8606   ; strcpyInstruction("MOVE.W ") ;
00004C5E  4879 0000 8607          pea       @m68kde~2_270.L
00004C62  83C4      
00004C64  4E93      8608          jsr       (A3)
00004C66  584F      8609          addq.w    #4,A7
                    8610   DisassembleInstruction_198:
                    8611   ; Decode6BitEA(OpCode,0,0,1) ;
00004C68  4878 0001 8612          pea       1
00004C6C  42A7      8613          clr.l     -(A7)
00004C6E  42A7      8614          clr.l     -(A7)
00004C70  2F02      8615          move.l    D2,-(A7)
00004C72  4EB8 343C 8616          jsr       _Decode6BitEA
00004C76  DEFC 0010 8617          add.w     #16,A7
                    8618   ; strcatInstruction(",") ;
00004C7A  4879 0000 8619          pea       @m68kde~2_188.L
00004C7E  818E      
00004C80  4EB8 0CCC 8620          jsr       _strcatInstruction
00004C84  584F      8621          addq.w    #4,A7
                    8622   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8623   ; // but subtract 1 to make the maths correct in the called function
                    8624   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
00004C86  42A7      8625          clr.l     -(A7)
00004C88  CEBC 0000 8626          and.l     #65535,D7
00004C8C  FFFF      
00004C8E  2F07      8627          move.l    D7,-(A7)
00004C90  4878 0002 8628          pea       2
00004C94  2F02      8629          move.l    D2,-(A7)
00004C96  4EB8 343C 8630          jsr       _Decode6BitEA
00004C9A  DEFC 0010 8631          add.w     #16,A7
                    8632   DisassembleInstruction_193:
                    8633   ; }
                    8634   ; }
                    8635   ; /////////////////////////////////////////////////////////////////////////////////
                    8636   ; // if instruction is MOVE <EA>,CCR
                    8637   ; /////////////////////////////////////////////////////////////////////////////////
                    8638   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
00004C9E  2042      8639          move.l    D2,A0
00004CA0  3010      8640          move.w    (A0),D0
00004CA2  C07C FFC0 8641          and.w     #65472,D0
00004CA6  0C40 44C0 8642          cmp.w     #17600,D0
00004CAA  6636      8643          bne.s     DisassembleInstruction_199
                    8644   ; {
                    8645   ; InstructionSize = 1;
00004CAC  24BC 0000 8646          move.l    #1,(A2)
00004CB0  0001      
                    8647   ; strcpy(Instruction,"MOVE ") ;
00004CB2  4879 0000 8648          pea       @m68kde~2_271.L
00004CB6  83CC      
00004CB8  4879 0803 8649          pea       _Instruction.L
00004CBC  04E2      
00004CBE  4EB9 0000 8650          jsr       _strcpy
00004CC2  58F2      
00004CC4  504F      8651          addq.w    #8,A7
                    8652   ; Decode6BitEA(OpCode,0,0,0) ;
00004CC6  42A7      8653          clr.l     -(A7)
00004CC8  42A7      8654          clr.l     -(A7)
00004CCA  42A7      8655          clr.l     -(A7)
00004CCC  2F02      8656          move.l    D2,-(A7)
00004CCE  4EB8 343C 8657          jsr       _Decode6BitEA
00004CD2  DEFC 0010 8658          add.w     #16,A7
                    8659   ; strcatInstruction(",CCR") ;
00004CD6  4879 0000 8660          pea       @m68kde~2_272.L
00004CDA  83D2      
00004CDC  4EB8 0CCC 8661          jsr       _strcatInstruction
00004CE0  584F      8662          addq.w    #4,A7
                    8663   DisassembleInstruction_199:
                    8664   ; }
                    8665   ; /////////////////////////////////////////////////////////////////////////////////
                    8666   ; // if instruction is MOVE SR,<EA>
                    8667   ; /////////////////////////////////////////////////////////////////////////////////
                    8668   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
00004CE2  2042      8669          move.l    D2,A0
00004CE4  3010      8670          move.w    (A0),D0
00004CE6  C07C FFC0 8671          and.w     #65472,D0
00004CEA  0C40 40C0 8672          cmp.w     #16576,D0
00004CEE  662A      8673          bne.s     DisassembleInstruction_201
                    8674   ; {
                    8675   ; InstructionSize = 1;
00004CF0  24BC 0000 8676          move.l    #1,(A2)
00004CF4  0001      
                    8677   ; strcpy(Instruction,"MOVE SR,") ;
00004CF6  4879 0000 8678          pea       @m68kde~2_273.L
00004CFA  83D8      
00004CFC  4879 0803 8679          pea       _Instruction.L
00004D00  04E2      
00004D02  4EB9 0000 8680          jsr       _strcpy
00004D06  58F2      
00004D08  504F      8681          addq.w    #8,A7
                    8682   ; Decode6BitEA(OpCode,0,0,0) ;
00004D0A  42A7      8683          clr.l     -(A7)
00004D0C  42A7      8684          clr.l     -(A7)
00004D0E  42A7      8685          clr.l     -(A7)
00004D10  2F02      8686          move.l    D2,-(A7)
00004D12  4EB8 343C 8687          jsr       _Decode6BitEA
00004D16  DEFC 0010 8688          add.w     #16,A7
                    8689   DisassembleInstruction_201:
                    8690   ; }
                    8691   ; /////////////////////////////////////////////////////////////////////////////////
                    8692   ; // if instruction is MOVE <EA>,SR
                    8693   ; /////////////////////////////////////////////////////////////////////////////////
                    8694   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
00004D1A  2042      8695          move.l    D2,A0
00004D1C  3010      8696          move.w    (A0),D0
00004D1E  C07C FFC0 8697          and.w     #65472,D0
00004D22  0C40 46C0 8698          cmp.w     #18112,D0
00004D26  6636      8699          bne.s     DisassembleInstruction_203
                    8700   ; {
                    8701   ; InstructionSize = 1;
00004D28  24BC 0000 8702          move.l    #1,(A2)
00004D2C  0001      
                    8703   ; strcpy(Instruction,"MOVE ") ;
00004D2E  4879 0000 8704          pea       @m68kde~2_271.L
00004D32  83CC      
00004D34  4879 0803 8705          pea       _Instruction.L
00004D38  04E2      
00004D3A  4EB9 0000 8706          jsr       _strcpy
00004D3E  58F2      
00004D40  504F      8707          addq.w    #8,A7
                    8708   ; Decode6BitEA(OpCode,0,0,0) ;
00004D42  42A7      8709          clr.l     -(A7)
00004D44  42A7      8710          clr.l     -(A7)
00004D46  42A7      8711          clr.l     -(A7)
00004D48  2F02      8712          move.l    D2,-(A7)
00004D4A  4EB8 343C 8713          jsr       _Decode6BitEA
00004D4E  DEFC 0010 8714          add.w     #16,A7
                    8715   ; strcatInstruction(",SR") ;
00004D52  4879 0000 8716          pea       @m68kde~2_274.L
00004D56  83E2      
00004D58  4EB8 0CCC 8717          jsr       _strcatInstruction
00004D5C  584F      8718          addq.w    #4,A7
                    8719   DisassembleInstruction_203:
                    8720   ; }
                    8721   ; /////////////////////////////////////////////////////////////////////////////////
                    8722   ; // if instruction is MOVE USP,An
                    8723   ; /////////////////////////////////////////////////////////////////////////////////
                    8724   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
00004D5E  2042      8725          move.l    D2,A0
00004D60  3010      8726          move.w    (A0),D0
00004D62  C07C FFF0 8727          and.w     #65520,D0
00004D66  0C40 4E60 8728          cmp.w     #20064,D0
00004D6A  6600 0060 8729          bne       DisassembleInstruction_208
                    8730   ; {
                    8731   ; InstructionSize = 1;
00004D6E  24BC 0000 8732          move.l    #1,(A2)
00004D72  0001      
                    8733   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
00004D74  2042      8734          move.l    D2,A0
00004D76  3010      8735          move.w    (A0),D0
00004D78  C07C 0007 8736          and.w     #7,D0
00004D7C  3D40 FFEA 8737          move.w    D0,-22(A6)
                    8738   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
00004D80  2042      8739          move.l    D2,A0
00004D82  3010      8740          move.w    (A0),D0
00004D84  C07C 0008 8741          and.w     #8,D0
00004D88  0C40 0008 8742          cmp.w     #8,D0
00004D8C  6620      8743          bne.s     DisassembleInstruction_207
                    8744   ; sprintf(Instruction, "MOVE USP,A%d", Register);
00004D8E  322E FFEA 8745          move.w    -22(A6),D1
00004D92  C2BC 0000 8746          and.l     #65535,D1
00004D96  FFFF      
00004D98  2F01      8747          move.l    D1,-(A7)
00004D9A  4879 0000 8748          pea       @m68kde~2_275.L
00004D9E  83E6      
00004DA0  4879 0803 8749          pea       _Instruction.L
00004DA4  04E2      
00004DA6  4E95      8750          jsr       (A5)
00004DA8  DEFC 000C 8751          add.w     #12,A7
00004DAC  601E      8752          bra.s     DisassembleInstruction_208
                    8753   DisassembleInstruction_207:
                    8754   ; else
                    8755   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004DAE  322E FFEA 8756          move.w    -22(A6),D1
00004DB2  C2BC 0000 8757          and.l     #65535,D1
00004DB6  FFFF      
00004DB8  2F01      8758          move.l    D1,-(A7)
00004DBA  4879 0000 8759          pea       @m68kde~2_276.L
00004DBE  83F4      
00004DC0  4879 0803 8760          pea       _Instruction.L
00004DC4  04E2      
00004DC6  4E95      8761          jsr       (A5)
00004DC8  DEFC 000C 8762          add.w     #12,A7
                    8763   DisassembleInstruction_208:
                    8764   ; }
                    8765   ; /////////////////////////////////////////////////////////////////////////////////
                    8766   ; // if instruction is MOVEM
                    8767   ; /////////////////////////////////////////////////////////////////////////////////
                    8768   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
00004DCC  2042      8769          move.l    D2,A0
00004DCE  3010      8770          move.w    (A0),D0
00004DD0  C07C FB80 8771          and.w     #64384,D0
00004DD4  0C40 4880 8772          cmp.w     #18560,D0
00004DD8  6600 01FC 8773          bne       DisassembleInstruction_230
                    8774   ; {
                    8775   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
00004DDC  2042      8776          move.l    D2,A0
00004DDE  3010      8777          move.w    (A0),D0
00004DE0  E640      8778          asr.w     #3,D0
00004DE2  C07C 0007 8779          and.w     #7,D0
00004DE6  3600      8780          move.w    D0,D3
                    8781   ; if( (OpMode != (unsigned short int)(0x0)) &&
00004DE8  4A43      8782          tst.w     D3
00004DEA  6700 01EA 8783          beq       DisassembleInstruction_230
00004DEE  0C43 0001 8784          cmp.w     #1,D3
00004DF2  6700 01E2 8785          beq       DisassembleInstruction_230
00004DF6  4A43      8786          tst.w     D3
00004DF8  6700 01DC 8787          beq       DisassembleInstruction_230
                    8788   ; (OpMode != (unsigned short int)(0x1)) &&
                    8789   ; (OpMode != (unsigned short int)(0x0)))
                    8790   ; {
                    8791   ; InstructionSize = 1;
00004DFC  24BC 0000 8792          move.l    #1,(A2)
00004E00  0001      
                    8793   ; strcpy(Instruction,"MOVEM") ;
00004E02  4879 0000 8794          pea       @m68kde~2_277.L
00004E06  8402      
00004E08  4879 0803 8795          pea       _Instruction.L
00004E0C  04E2      
00004E0E  4EB9 0000 8796          jsr       _strcpy
00004E12  58F2      
00004E14  504F      8797          addq.w    #8,A7
                    8798   ; InstructionSize ++ ;
00004E16  5292      8799          addq.l    #1,(A2)
                    8800   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004E18  2042      8801          move.l    D2,A0
00004E1A  3010      8802          move.w    (A0),D0
00004E1C  C07C 0040 8803          and.w     #64,D0
00004E20  660E      8804          bne.s     DisassembleInstruction_213
                    8805   ; strcatInstruction(".W ") ;
00004E22  4879 0000 8806          pea       @m68kde~2_171.L
00004E26  8140      
00004E28  4EB8 0CCC 8807          jsr       _strcatInstruction
00004E2C  584F      8808          addq.w    #4,A7
00004E2E  600C      8809          bra.s     DisassembleInstruction_214
                    8810   DisassembleInstruction_213:
                    8811   ; else
                    8812   ; strcatInstruction(".L ") ;
00004E30  4879 0000 8813          pea       @m68kde~2_172.L
00004E34  8144      
00004E36  4EB8 0CCC 8814          jsr       _strcatInstruction
00004E3A  584F      8815          addq.w    #4,A7
                    8816   DisassembleInstruction_214:
                    8817   ; // movem  reg,-(An) if bit 10 = 0
                    8818   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004E3C  2042      8819          move.l    D2,A0
00004E3E  3010      8820          move.w    (A0),D0
00004E40  C07C 0400 8821          and.w     #1024,D0
00004E44  6600 00D2 8822          bne       DisassembleInstruction_215
                    8823   ; {
                    8824   ; Mask = 0x8000 ;                     // bit 15 = 1
00004E48  3D7C 8000 8825          move.w    #32768,-2(A6)
00004E4C  FFFE      
                    8826   ; DoneSlash = 0 ;
00004E4E  4246      8827          clr.w     D6
                    8828   ; for(i = 0; i < 16; i ++)    {
00004E50  4284      8829          clr.l     D4
                    8830   DisassembleInstruction_217:
00004E52  0C84 0000 8831          cmp.l     #16,D4
00004E56  0010      
00004E58  6C00 009E 8832          bge       DisassembleInstruction_219
                    8833   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004E5C  4879 0000 8834          pea       @m68kde~2_33.L
00004E60  70AA      
00004E62  4EB9 0000 8835          jsr       _printf
00004E66  63CE      
00004E68  584F      8836          addq.w    #4,A7
                    8837   ; if((OpCode[1] & Mask) == Mask)    {
00004E6A  2042      8838          move.l    D2,A0
00004E6C  3028 0002 8839          move.w    2(A0),D0
00004E70  C06E FFFE 8840          and.w     -2(A6),D0
00004E74  B06E FFFE 8841          cmp.w     -2(A6),D0
00004E78  6600 006E 8842          bne       DisassembleInstruction_220
                    8843   ; if(i < 8 )  {
00004E7C  0C84 0000 8844          cmp.l     #8,D4
00004E80  0008      
00004E82  6C2C      8845          bge.s     DisassembleInstruction_222
                    8846   ; if(DoneSlash == 0)  {
00004E84  4A46      8847          tst.w     D6
00004E86  6614      8848          bne.s     DisassembleInstruction_224
                    8849   ; sprintf(TempString, "D%d", i) ;
00004E88  2F04      8850          move.l    D4,-(A7)
00004E8A  4879 0000 8851          pea       @m68kde~2_278.L
00004E8E  8408      
00004E90  2F0C      8852          move.l    A4,-(A7)
00004E92  4E95      8853          jsr       (A5)
00004E94  DEFC 000C 8854          add.w     #12,A7
                    8855   ; DoneSlash = 1;
00004E98  7C01      8856          moveq     #1,D6
00004E9A  6010      8857          bra.s     DisassembleInstruction_225
                    8858   DisassembleInstruction_224:
                    8859   ; }
                    8860   ; else
                    8861   ; sprintf(TempString, "/D%d", i) ;
00004E9C  2F04      8862          move.l    D4,-(A7)
00004E9E  4879 0000 8863          pea       @m68kde~2_279.L
00004EA2  840C      
00004EA4  2F0C      8864          move.l    A4,-(A7)
00004EA6  4E95      8865          jsr       (A5)
00004EA8  DEFC 000C 8866          add.w     #12,A7
                    8867   DisassembleInstruction_225:
00004EAC  6000 0032 8868          bra       DisassembleInstruction_227
                    8869   DisassembleInstruction_222:
                    8870   ; }
                    8871   ; else   {
                    8872   ; if(DoneSlash == 0)  {
00004EB0  4A46      8873          tst.w     D6
00004EB2  6618      8874          bne.s     DisassembleInstruction_226
                    8875   ; sprintf(TempString, "A%d", i-8) ;
00004EB4  2204      8876          move.l    D4,D1
00004EB6  5181      8877          subq.l    #8,D1
00004EB8  2F01      8878          move.l    D1,-(A7)
00004EBA  4879 0000 8879          pea       @m68kde~2_280.L
00004EBE  8412      
00004EC0  2F0C      8880          move.l    A4,-(A7)
00004EC2  4E95      8881          jsr       (A5)
00004EC4  DEFC 000C 8882          add.w     #12,A7
                    8883   ; DoneSlash = 1;
00004EC8  7C01      8884          moveq     #1,D6
00004ECA  6014      8885          bra.s     DisassembleInstruction_227
                    8886   DisassembleInstruction_226:
                    8887   ; }
                    8888   ; else
                    8889   ; sprintf(TempString, "/A%d", i-8) ;
00004ECC  2204      8890          move.l    D4,D1
00004ECE  5181      8891          subq.l    #8,D1
00004ED0  2F01      8892          move.l    D1,-(A7)
00004ED2  4879 0000 8893          pea       @m68kde~2_281.L
00004ED6  8416      
00004ED8  2F0C      8894          move.l    A4,-(A7)
00004EDA  4E95      8895          jsr       (A5)
00004EDC  DEFC 000C 8896          add.w     #12,A7
                    8897   DisassembleInstruction_227:
                    8898   ; }
                    8899   ; strcatInstruction(TempString) ;
00004EE0  2F0C      8900          move.l    A4,-(A7)
00004EE2  4EB8 0CCC 8901          jsr       _strcatInstruction
00004EE6  584F      8902          addq.w    #4,A7
                    8903   DisassembleInstruction_220:
                    8904   ; }
                    8905   ; Mask = Mask >> 1 ;
00004EE8  302E FFFE 8906          move.w    -2(A6),D0
00004EEC  E240      8907          asr.w     #1,D0
00004EEE  3D40 FFFE 8908          move.w    D0,-2(A6)
00004EF2  5284      8909          addq.l    #1,D4
00004EF4  6000 FF5C 8910          bra       DisassembleInstruction_217
                    8911   DisassembleInstruction_219:
                    8912   ; }
                    8913   ; strcatInstruction(",") ;
00004EF8  4879 0000 8914          pea       @m68kde~2_188.L
00004EFC  818E      
00004EFE  4EB8 0CCC 8915          jsr       _strcatInstruction
00004F02  584F      8916          addq.w    #4,A7
                    8917   ; Decode6BitEA(OpCode,0,0,0) ;
00004F04  42A7      8918          clr.l     -(A7)
00004F06  42A7      8919          clr.l     -(A7)
00004F08  42A7      8920          clr.l     -(A7)
00004F0A  2F02      8921          move.l    D2,-(A7)
00004F0C  4EB8 343C 8922          jsr       _Decode6BitEA
00004F10  DEFC 0010 8923          add.w     #16,A7
00004F14  6000 00C0 8924          bra       DisassembleInstruction_230
                    8925   DisassembleInstruction_215:
                    8926   ; }
                    8927   ; //movem  (An)+,reg
                    8928   ; else    {
                    8929   ; Decode6BitEA(OpCode,0,0,0) ;
00004F18  42A7      8930          clr.l     -(A7)
00004F1A  42A7      8931          clr.l     -(A7)
00004F1C  42A7      8932          clr.l     -(A7)
00004F1E  2F02      8933          move.l    D2,-(A7)
00004F20  4EB8 343C 8934          jsr       _Decode6BitEA
00004F24  DEFC 0010 8935          add.w     #16,A7
                    8936   ; strcatInstruction(",") ;
00004F28  4879 0000 8937          pea       @m68kde~2_188.L
00004F2C  818E      
00004F2E  4EB8 0CCC 8938          jsr       _strcatInstruction
00004F32  584F      8939          addq.w    #4,A7
                    8940   ; Mask = 0x0001 ;                     // bit 0 = 1
00004F34  3D7C 0001 8941          move.w    #1,-2(A6)
00004F38  FFFE      
                    8942   ; DoneSlash = 0 ;
00004F3A  4246      8943          clr.w     D6
                    8944   ; for(i = 0; i < 16 ; i ++)    {
00004F3C  4284      8945          clr.l     D4
                    8946   DisassembleInstruction_228:
00004F3E  0C84 0000 8947          cmp.l     #16,D4
00004F42  0010      
00004F44  6C00 0090 8948          bge       DisassembleInstruction_230
                    8949   ; if((OpCode[1] & Mask) == Mask)    {
00004F48  2042      8950          move.l    D2,A0
00004F4A  3028 0002 8951          move.w    2(A0),D0
00004F4E  C06E FFFE 8952          and.w     -2(A6),D0
00004F52  B06E FFFE 8953          cmp.w     -2(A6),D0
00004F56  6600 006E 8954          bne       DisassembleInstruction_231
                    8955   ; if(i < 8)   {       // data registers in bits 7-0
00004F5A  0C84 0000 8956          cmp.l     #8,D4
00004F5E  0008      
00004F60  6C2C      8957          bge.s     DisassembleInstruction_233
                    8958   ; if(DoneSlash == 0)  {
00004F62  4A46      8959          tst.w     D6
00004F64  6614      8960          bne.s     DisassembleInstruction_235
                    8961   ; sprintf(TempString, "D%d", i) ;
00004F66  2F04      8962          move.l    D4,-(A7)
00004F68  4879 0000 8963          pea       @m68kde~2_278.L
00004F6C  8408      
00004F6E  2F0C      8964          move.l    A4,-(A7)
00004F70  4E95      8965          jsr       (A5)
00004F72  DEFC 000C 8966          add.w     #12,A7
                    8967   ; DoneSlash = 1;
00004F76  7C01      8968          moveq     #1,D6
00004F78  6010      8969          bra.s     DisassembleInstruction_236
                    8970   DisassembleInstruction_235:
                    8971   ; }
                    8972   ; else
                    8973   ; sprintf(TempString, "/D%d", i) ;
00004F7A  2F04      8974          move.l    D4,-(A7)
00004F7C  4879 0000 8975          pea       @m68kde~2_279.L
00004F80  840C      
00004F82  2F0C      8976          move.l    A4,-(A7)
00004F84  4E95      8977          jsr       (A5)
00004F86  DEFC 000C 8978          add.w     #12,A7
                    8979   DisassembleInstruction_236:
00004F8A  6000 0032 8980          bra       DisassembleInstruction_238
                    8981   DisassembleInstruction_233:
                    8982   ; }
                    8983   ; else    {
                    8984   ; if(DoneSlash == 0)  {
00004F8E  4A46      8985          tst.w     D6
00004F90  6618      8986          bne.s     DisassembleInstruction_237
                    8987   ; sprintf(TempString, "A%d", i-8) ;
00004F92  2204      8988          move.l    D4,D1
00004F94  5181      8989          subq.l    #8,D1
00004F96  2F01      8990          move.l    D1,-(A7)
00004F98  4879 0000 8991          pea       @m68kde~2_280.L
00004F9C  8412      
00004F9E  2F0C      8992          move.l    A4,-(A7)
00004FA0  4E95      8993          jsr       (A5)
00004FA2  DEFC 000C 8994          add.w     #12,A7
                    8995   ; DoneSlash = 1;
00004FA6  7C01      8996          moveq     #1,D6
00004FA8  6014      8997          bra.s     DisassembleInstruction_238
                    8998   DisassembleInstruction_237:
                    8999   ; }
                    9000   ; else
                    9001   ; sprintf(TempString, "/A%d", i-8) ;
00004FAA  2204      9002          move.l    D4,D1
00004FAC  5181      9003          subq.l    #8,D1
00004FAE  2F01      9004          move.l    D1,-(A7)
00004FB0  4879 0000 9005          pea       @m68kde~2_281.L
00004FB4  8416      
00004FB6  2F0C      9006          move.l    A4,-(A7)
00004FB8  4E95      9007          jsr       (A5)
00004FBA  DEFC 000C 9008          add.w     #12,A7
                    9009   DisassembleInstruction_238:
                    9010   ; }
                    9011   ; strcatInstruction(TempString) ;
00004FBE  2F0C      9012          move.l    A4,-(A7)
00004FC0  4EB8 0CCC 9013          jsr       _strcatInstruction
00004FC4  584F      9014          addq.w    #4,A7
                    9015   DisassembleInstruction_231:
                    9016   ; }
                    9017   ; Mask = Mask << 1 ;
00004FC6  302E FFFE 9018          move.w    -2(A6),D0
00004FCA  E340      9019          asl.w     #1,D0
00004FCC  3D40 FFFE 9020          move.w    D0,-2(A6)
00004FD0  5284      9021          addq.l    #1,D4
00004FD2  6000 FF6A 9022          bra       DisassembleInstruction_228
                    9023   DisassembleInstruction_230:
                    9024   ; }
                    9025   ; }
                    9026   ; }
                    9027   ; }
                    9028   ; /////////////////////////////////////////////////////////////////////////////////
                    9029   ; // if instruction is MOVEP
                    9030   ; /////////////////////////////////////////////////////////////////////////////////
                    9031   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004FD6  2042      9032          move.l    D2,A0
00004FD8  3010      9033          move.w    (A0),D0
00004FDA  C07C F038 9034          and.w     #61496,D0
00004FDE  0C40 0008 9035          cmp.w     #8,D0
00004FE2  6600 0112 9036          bne       DisassembleInstruction_247
                    9037   ; {
                    9038   ; InstructionSize = 1;
00004FE6  24BC 0000 9039          move.l    #1,(A2)
00004FEA  0001      
                    9040   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004FEC  2042      9041          move.l    D2,A0
00004FEE  3010      9042          move.w    (A0),D0
00004FF0  E040      9043          asr.w     #8,D0
00004FF2  E240      9044          asr.w     #1,D0
00004FF4  C07C 0007 9045          and.w     #7,D0
00004FF8  3A00      9046          move.w    D0,D5
                    9047   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004FFA  2042      9048          move.l    D2,A0
00004FFC  3010      9049          move.w    (A0),D0
00004FFE  C07C 0007 9050          and.w     #7,D0
00005002  3D40 FFF8 9051          move.w    D0,-8(A6)
                    9052   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00005006  2042      9053          move.l    D2,A0
00005008  3010      9054          move.w    (A0),D0
0000500A  EC40      9055          asr.w     #6,D0
0000500C  C07C 0007 9056          and.w     #7,D0
00005010  3600      9057          move.w    D0,D3
                    9058   ; InstructionSize++ ;
00005012  5292      9059          addq.l    #1,(A2)
                    9060   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00005014  0C43 0004 9061          cmp.w     #4,D3
00005018  6634      9062          bne.s     DisassembleInstruction_241
                    9063   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
0000501A  CABC 0000 9064          and.l     #65535,D5
0000501E  FFFF      
00005020  2F05      9065          move.l    D5,-(A7)
00005022  322E FFF8 9066          move.w    -8(A6),D1
00005026  C2BC 0000 9067          and.l     #65535,D1
0000502A  FFFF      
0000502C  2F01      9068          move.l    D1,-(A7)
0000502E  2042      9069          move.l    D2,A0
00005030  3228 0002 9070          move.w    2(A0),D1
00005034  48C1      9071          ext.l     D1
00005036  2F01      9072          move.l    D1,-(A7)
00005038  4879 0000 9073          pea       @m68kde~2_282.L
0000503C  841C      
0000503E  4879 0803 9074          pea       _Instruction.L
00005042  04E2      
00005044  4E95      9075          jsr       (A5)
00005046  DEFC 0014 9076          add.w     #20,A7
0000504A  6000 00AA 9077          bra       DisassembleInstruction_247
                    9078   DisassembleInstruction_241:
                    9079   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
0000504E  0C43 0005 9080          cmp.w     #5,D3
00005052  6634      9081          bne.s     DisassembleInstruction_243
                    9082   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00005054  CABC 0000 9083          and.l     #65535,D5
00005058  FFFF      
0000505A  2F05      9084          move.l    D5,-(A7)
0000505C  322E FFF8 9085          move.w    -8(A6),D1
00005060  C2BC 0000 9086          and.l     #65535,D1
00005064  FFFF      
00005066  2F01      9087          move.l    D1,-(A7)
00005068  2042      9088          move.l    D2,A0
0000506A  3228 0002 9089          move.w    2(A0),D1
0000506E  48C1      9090          ext.l     D1
00005070  2F01      9091          move.l    D1,-(A7)
00005072  4879 0000 9092          pea       @m68kde~2_283.L
00005076  8432      
00005078  4879 0803 9093          pea       _Instruction.L
0000507C  04E2      
0000507E  4E95      9094          jsr       (A5)
00005080  DEFC 0014 9095          add.w     #20,A7
00005084  6000 0070 9096          bra       DisassembleInstruction_247
                    9097   DisassembleInstruction_243:
                    9098   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00005088  0C43 0006 9099          cmp.w     #6,D3
0000508C  6632      9100          bne.s     DisassembleInstruction_245
                    9101   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
0000508E  322E FFF8 9102          move.w    -8(A6),D1
00005092  C2BC 0000 9103          and.l     #65535,D1
00005096  FFFF      
00005098  2F01      9104          move.l    D1,-(A7)
0000509A  2042      9105          move.l    D2,A0
0000509C  3228 0002 9106          move.w    2(A0),D1
000050A0  48C1      9107          ext.l     D1
000050A2  2F01      9108          move.l    D1,-(A7)
000050A4  CABC 0000 9109          and.l     #65535,D5
000050A8  FFFF      
000050AA  2F05      9110          move.l    D5,-(A7)
000050AC  4879 0000 9111          pea       @m68kde~2_284.L
000050B0  8448      
000050B2  4879 0803 9112          pea       _Instruction.L
000050B6  04E2      
000050B8  4E95      9113          jsr       (A5)
000050BA  DEFC 0014 9114          add.w     #20,A7
000050BE  6036      9115          bra.s     DisassembleInstruction_247
                    9116   DisassembleInstruction_245:
                    9117   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
000050C0  0C43 0007 9118          cmp.w     #7,D3
000050C4  6630      9119          bne.s     DisassembleInstruction_247
                    9120   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
000050C6  322E FFF8 9121          move.w    -8(A6),D1
000050CA  C2BC 0000 9122          and.l     #65535,D1
000050CE  FFFF      
000050D0  2F01      9123          move.l    D1,-(A7)
000050D2  2042      9124          move.l    D2,A0
000050D4  3228 0002 9125          move.w    2(A0),D1
000050D8  48C1      9126          ext.l     D1
000050DA  2F01      9127          move.l    D1,-(A7)
000050DC  CABC 0000 9128          and.l     #65535,D5
000050E0  FFFF      
000050E2  2F05      9129          move.l    D5,-(A7)
000050E4  4879 0000 9130          pea       @m68kde~2_285.L
000050E8  845E      
000050EA  4879 0803 9131          pea       _Instruction.L
000050EE  04E2      
000050F0  4E95      9132          jsr       (A5)
000050F2  DEFC 0014 9133          add.w     #20,A7
                    9134   DisassembleInstruction_247:
                    9135   ; }
                    9136   ; /////////////////////////////////////////////////////////////////////////////////
                    9137   ; // if instruction is MOVEQ
                    9138   ; /////////////////////////////////////////////////////////////////////////////////
                    9139   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
000050F6  2042      9140          move.l    D2,A0
000050F8  3010      9141          move.w    (A0),D0
000050FA  C07C F100 9142          and.w     #61696,D0
000050FE  0C40 7000 9143          cmp.w     #28672,D0
00005102  6600 0040 9144          bne       DisassembleInstruction_249
                    9145   ; {
                    9146   ; InstructionSize = 1;
00005106  24BC 0000 9147          move.l    #1,(A2)
0000510A  0001      
                    9148   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
0000510C  2042      9149          move.l    D2,A0
0000510E  3010      9150          move.w    (A0),D0
00005110  E040      9151          asr.w     #8,D0
00005112  E240      9152          asr.w     #1,D0
00005114  C07C 0007 9153          and.w     #7,D0
00005118  3A00      9154          move.w    D0,D5
                    9155   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
0000511A  CABC 0000 9156          and.l     #65535,D5
0000511E  FFFF      
00005120  2F05      9157          move.l    D5,-(A7)
00005122  2042      9158          move.l    D2,A0
00005124  3210      9159          move.w    (A0),D1
00005126  C27C 00FF 9160          and.w     #255,D1
0000512A  C2BC 0000 9161          and.l     #65535,D1
0000512E  FFFF      
00005130  2F01      9162          move.l    D1,-(A7)
00005132  4879 0000 9163          pea       @m68kde~2_286.L
00005136  8474      
00005138  4879 0803 9164          pea       _Instruction.L
0000513C  04E2      
0000513E  4E95      9165          jsr       (A5)
00005140  DEFC 0010 9166          add.w     #16,A7
                    9167   DisassembleInstruction_249:
                    9168   ; }
                    9169   ; /////////////////////////////////////////////////////////////////////////////////
                    9170   ; // if instruction is MULS.W
                    9171   ; /////////////////////////////////////////////////////////////////////////////////
                    9172   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00005144  2042      9173          move.l    D2,A0
00005146  3010      9174          move.w    (A0),D0
00005148  C07C F1C0 9175          and.w     #61888,D0
0000514C  0C40 C1C0 9176          cmp.w     #49600,D0
00005150  6600 004E 9177          bne       DisassembleInstruction_251
                    9178   ; {
                    9179   ; InstructionSize = 1;
00005154  24BC 0000 9180          move.l    #1,(A2)
00005158  0001      
                    9181   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
0000515A  2042      9182          move.l    D2,A0
0000515C  3010      9183          move.w    (A0),D0
0000515E  E040      9184          asr.w     #8,D0
00005160  E240      9185          asr.w     #1,D0
00005162  C07C 0007 9186          and.w     #7,D0
00005166  3A00      9187          move.w    D0,D5
                    9188   ; strcpyInstruction("MULS ");
00005168  4879 0000 9189          pea       @m68kde~2_287.L
0000516C  8484      
0000516E  4E93      9190          jsr       (A3)
00005170  584F      9191          addq.w    #4,A7
                    9192   ; Decode6BitEA(OpCode,0,0,0) ;
00005172  42A7      9193          clr.l     -(A7)
00005174  42A7      9194          clr.l     -(A7)
00005176  42A7      9195          clr.l     -(A7)
00005178  2F02      9196          move.l    D2,-(A7)
0000517A  4EB8 343C 9197          jsr       _Decode6BitEA
0000517E  DEFC 0010 9198          add.w     #16,A7
                    9199   ; sprintf(TempString, ",D%d", DataRegister) ;
00005182  CABC 0000 9200          and.l     #65535,D5
00005186  FFFF      
00005188  2F05      9201          move.l    D5,-(A7)
0000518A  4879 0000 9202          pea       @m68kde~2_243.L
0000518E  82DA      
00005190  2F0C      9203          move.l    A4,-(A7)
00005192  4E95      9204          jsr       (A5)
00005194  DEFC 000C 9205          add.w     #12,A7
                    9206   ; strcatInstruction(TempString);
00005198  2F0C      9207          move.l    A4,-(A7)
0000519A  4EB8 0CCC 9208          jsr       _strcatInstruction
0000519E  584F      9209          addq.w    #4,A7
                    9210   DisassembleInstruction_251:
                    9211   ; }
                    9212   ; /////////////////////////////////////////////////////////////////////////////////
                    9213   ; // if instruction is MULU.W
                    9214   ; /////////////////////////////////////////////////////////////////////////////////
                    9215   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
000051A0  2042      9216          move.l    D2,A0
000051A2  3010      9217          move.w    (A0),D0
000051A4  C07C F1C0 9218          and.w     #61888,D0
000051A8  0C40 C0C0 9219          cmp.w     #49344,D0
000051AC  6600 004E 9220          bne       DisassembleInstruction_253
                    9221   ; {
                    9222   ; InstructionSize = 1;
000051B0  24BC 0000 9223          move.l    #1,(A2)
000051B4  0001      
                    9224   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
000051B6  2042      9225          move.l    D2,A0
000051B8  3010      9226          move.w    (A0),D0
000051BA  E040      9227          asr.w     #8,D0
000051BC  E240      9228          asr.w     #1,D0
000051BE  C07C 0007 9229          and.w     #7,D0
000051C2  3A00      9230          move.w    D0,D5
                    9231   ; strcpyInstruction("MULU ");
000051C4  4879 0000 9232          pea       @m68kde~2_288.L
000051C8  848A      
000051CA  4E93      9233          jsr       (A3)
000051CC  584F      9234          addq.w    #4,A7
                    9235   ; Decode6BitEA(OpCode,0,0,0) ;
000051CE  42A7      9236          clr.l     -(A7)
000051D0  42A7      9237          clr.l     -(A7)
000051D2  42A7      9238          clr.l     -(A7)
000051D4  2F02      9239          move.l    D2,-(A7)
000051D6  4EB8 343C 9240          jsr       _Decode6BitEA
000051DA  DEFC 0010 9241          add.w     #16,A7
                    9242   ; sprintf(TempString, ",D%d", DataRegister) ;
000051DE  CABC 0000 9243          and.l     #65535,D5
000051E2  FFFF      
000051E4  2F05      9244          move.l    D5,-(A7)
000051E6  4879 0000 9245          pea       @m68kde~2_243.L
000051EA  82DA      
000051EC  2F0C      9246          move.l    A4,-(A7)
000051EE  4E95      9247          jsr       (A5)
000051F0  DEFC 000C 9248          add.w     #12,A7
                    9249   ; strcatInstruction(TempString);
000051F4  2F0C      9250          move.l    A4,-(A7)
000051F6  4EB8 0CCC 9251          jsr       _strcatInstruction
000051FA  584F      9252          addq.w    #4,A7
                    9253   DisassembleInstruction_253:
                    9254   ; }
                    9255   ; /////////////////////////////////////////////////////////////////////////////////
                    9256   ; // if instruction is NBCD <EA>
                    9257   ; /////////////////////////////////////////////////////////////////////////////////
                    9258   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
000051FC  2042      9259          move.l    D2,A0
000051FE  3010      9260          move.w    (A0),D0
00005200  C07C FFC0 9261          and.w     #65472,D0
00005204  0C40 4800 9262          cmp.w     #18432,D0
00005208  6620      9263          bne.s     DisassembleInstruction_255
                    9264   ; {
                    9265   ; InstructionSize = 1;
0000520A  24BC 0000 9266          move.l    #1,(A2)
0000520E  0001      
                    9267   ; strcpyInstruction("NBCD ");
00005210  4879 0000 9268          pea       @m68kde~2_289.L
00005214  8490      
00005216  4E93      9269          jsr       (A3)
00005218  584F      9270          addq.w    #4,A7
                    9271   ; Decode6BitEA(OpCode,0,0,0);
0000521A  42A7      9272          clr.l     -(A7)
0000521C  42A7      9273          clr.l     -(A7)
0000521E  42A7      9274          clr.l     -(A7)
00005220  2F02      9275          move.l    D2,-(A7)
00005222  4EB8 343C 9276          jsr       _Decode6BitEA
00005226  DEFC 0010 9277          add.w     #16,A7
                    9278   DisassembleInstruction_255:
                    9279   ; }
                    9280   ; /////////////////////////////////////////////////////////////////////////////////
                    9281   ; // if instruction is NEG <EA>
                    9282   ; /////////////////////////////////////////////////////////////////////////////////
                    9283   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
0000522A  2042      9284          move.l    D2,A0
0000522C  3010      9285          move.w    (A0),D0
0000522E  C07C FF00 9286          and.w     #65280,D0
00005232  0C40 4400 9287          cmp.w     #17408,D0
00005236  6600 0046 9288          bne       DisassembleInstruction_259
                    9289   ; {
                    9290   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
0000523A  2042      9291          move.l    D2,A0
0000523C  3010      9292          move.w    (A0),D0
0000523E  EC40      9293          asr.w     #6,D0
00005240  C07C 0003 9294          and.w     #3,D0
00005244  0C40 0003 9295          cmp.w     #3,D0
00005248  6700 0034 9296          beq       DisassembleInstruction_259
                    9297   ; {
                    9298   ; InstructionSize = 1;
0000524C  24BC 0000 9299          move.l    #1,(A2)
00005250  0001      
                    9300   ; strcpyInstruction("NEG");
00005252  4879 0000 9301          pea       @m68kde~2_290.L
00005256  8496      
00005258  4E93      9302          jsr       (A3)
0000525A  584F      9303          addq.w    #4,A7
                    9304   ; Decode2BitOperandSize(*OpCode) ;
0000525C  2042      9305          move.l    D2,A0
0000525E  3210      9306          move.w    (A0),D1
00005260  C2BC 0000 9307          and.l     #65535,D1
00005264  FFFF      
00005266  2F01      9308          move.l    D1,-(A7)
00005268  4EB8 31A8 9309          jsr       _Decode2BitOperandSize
0000526C  584F      9310          addq.w    #4,A7
                    9311   ; Decode6BitEA(OpCode,0,0,0);
0000526E  42A7      9312          clr.l     -(A7)
00005270  42A7      9313          clr.l     -(A7)
00005272  42A7      9314          clr.l     -(A7)
00005274  2F02      9315          move.l    D2,-(A7)
00005276  4EB8 343C 9316          jsr       _Decode6BitEA
0000527A  DEFC 0010 9317          add.w     #16,A7
                    9318   DisassembleInstruction_259:
                    9319   ; }
                    9320   ; }
                    9321   ; /////////////////////////////////////////////////////////////////////////////////
                    9322   ; // if instruction is NEGX <EA>
                    9323   ; /////////////////////////////////////////////////////////////////////////////////
                    9324   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
0000527E  2042      9325          move.l    D2,A0
00005280  3010      9326          move.w    (A0),D0
00005282  C07C FF00 9327          and.w     #65280,D0
00005286  0C40 4000 9328          cmp.w     #16384,D0
0000528A  6600 0046 9329          bne       DisassembleInstruction_263
                    9330   ; {
                    9331   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
0000528E  2042      9332          move.l    D2,A0
00005290  3010      9333          move.w    (A0),D0
00005292  EC40      9334          asr.w     #6,D0
00005294  C07C 0003 9335          and.w     #3,D0
00005298  0C40 0003 9336          cmp.w     #3,D0
0000529C  6700 0034 9337          beq       DisassembleInstruction_263
                    9338   ; {
                    9339   ; InstructionSize = 1;
000052A0  24BC 0000 9340          move.l    #1,(A2)
000052A4  0001      
                    9341   ; strcpyInstruction("NEGX");
000052A6  4879 0000 9342          pea       @m68kde~2_291.L
000052AA  849A      
000052AC  4E93      9343          jsr       (A3)
000052AE  584F      9344          addq.w    #4,A7
                    9345   ; Decode2BitOperandSize(*OpCode) ;
000052B0  2042      9346          move.l    D2,A0
000052B2  3210      9347          move.w    (A0),D1
000052B4  C2BC 0000 9348          and.l     #65535,D1
000052B8  FFFF      
000052BA  2F01      9349          move.l    D1,-(A7)
000052BC  4EB8 31A8 9350          jsr       _Decode2BitOperandSize
000052C0  584F      9351          addq.w    #4,A7
                    9352   ; Decode6BitEA(OpCode,0,0,0);
000052C2  42A7      9353          clr.l     -(A7)
000052C4  42A7      9354          clr.l     -(A7)
000052C6  42A7      9355          clr.l     -(A7)
000052C8  2F02      9356          move.l    D2,-(A7)
000052CA  4EB8 343C 9357          jsr       _Decode6BitEA
000052CE  DEFC 0010 9358          add.w     #16,A7
                    9359   DisassembleInstruction_263:
                    9360   ; }
                    9361   ; }
                    9362   ; /////////////////////////////////////////////////////////////////////////////////
                    9363   ; // if instruction is NOP
                    9364   ; /////////////////////////////////////////////////////////////////////////////////
                    9365   ; if(*OpCode == (unsigned short int)(0x4E71))
000052D2  2042      9366          move.l    D2,A0
000052D4  3010      9367          move.w    (A0),D0
000052D6  0C40 4E71 9368          cmp.w     #20081,D0
000052DA  6610      9369          bne.s     DisassembleInstruction_265
                    9370   ; {
                    9371   ; InstructionSize = 1;
000052DC  24BC 0000 9372          move.l    #1,(A2)
000052E0  0001      
                    9373   ; strcpyInstruction("NOP");
000052E2  4879 0000 9374          pea       @m68kde~2_292.L
000052E6  84A0      
000052E8  4E93      9375          jsr       (A3)
000052EA  584F      9376          addq.w    #4,A7
                    9377   DisassembleInstruction_265:
                    9378   ; }
                    9379   ; /////////////////////////////////////////////////////////////////////////////////
                    9380   ; // if instruction is NOT <EA>
                    9381   ; /////////////////////////////////////////////////////////////////////////////////
                    9382   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
000052EC  2042      9383          move.l    D2,A0
000052EE  3010      9384          move.w    (A0),D0
000052F0  C07C FF00 9385          and.w     #65280,D0
000052F4  0C40 4600 9386          cmp.w     #17920,D0
000052F8  6600 0046 9387          bne       DisassembleInstruction_269
                    9388   ; {
                    9389   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
000052FC  2042      9390          move.l    D2,A0
000052FE  3010      9391          move.w    (A0),D0
00005300  EC40      9392          asr.w     #6,D0
00005302  C07C 0003 9393          and.w     #3,D0
00005306  0C40 0003 9394          cmp.w     #3,D0
0000530A  6700 0034 9395          beq       DisassembleInstruction_269
                    9396   ; {
                    9397   ; InstructionSize = 1;
0000530E  24BC 0000 9398          move.l    #1,(A2)
00005312  0001      
                    9399   ; strcpyInstruction("NOT");
00005314  4879 0000 9400          pea       @m68kde~2_293.L
00005318  84A4      
0000531A  4E93      9401          jsr       (A3)
0000531C  584F      9402          addq.w    #4,A7
                    9403   ; Decode2BitOperandSize(*OpCode) ;
0000531E  2042      9404          move.l    D2,A0
00005320  3210      9405          move.w    (A0),D1
00005322  C2BC 0000 9406          and.l     #65535,D1
00005326  FFFF      
00005328  2F01      9407          move.l    D1,-(A7)
0000532A  4EB8 31A8 9408          jsr       _Decode2BitOperandSize
0000532E  584F      9409          addq.w    #4,A7
                    9410   ; Decode6BitEA(OpCode,0,0,0);
00005330  42A7      9411          clr.l     -(A7)
00005332  42A7      9412          clr.l     -(A7)
00005334  42A7      9413          clr.l     -(A7)
00005336  2F02      9414          move.l    D2,-(A7)
00005338  4EB8 343C 9415          jsr       _Decode6BitEA
0000533C  DEFC 0010 9416          add.w     #16,A7
                    9417   DisassembleInstruction_269:
                    9418   ; }
                    9419   ; }
                    9420   ; /////////////////////////////////////////////////////////////////////////////////
                    9421   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    9422   ; /////////////////////////////////////////////////////////////////////////////////
                    9423   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00005340  2042      9424          move.l    D2,A0
00005342  3010      9425          move.w    (A0),D0
00005344  C07C F000 9426          and.w     #61440,D0
00005348  0C40 8000 9427          cmp.w     #32768,D0
0000534C  6600 0038 9428          bne       DisassembleInstruction_273
                    9429   ; {
                    9430   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00005350  2042      9431          move.l    D2,A0
00005352  3010      9432          move.w    (A0),D0
00005354  EC40      9433          asr.w     #6,D0
00005356  C07C 0007 9434          and.w     #7,D0
0000535A  3600      9435          move.w    D0,D3
                    9436   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
0000535C  0C43 0002 9437          cmp.w     #2,D3
00005360  630C      9438          bls.s     DisassembleInstruction_275
00005362  0C43 0004 9439          cmp.w     #4,D3
00005366  651E      9440          blo.s     DisassembleInstruction_273
00005368  0C43 0006 9441          cmp.w     #6,D3
0000536C  6218      9442          bhi.s     DisassembleInstruction_273
                    9443   DisassembleInstruction_275:
                    9444   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    9445   ; {
                    9446   ; InstructionSize = 1;
0000536E  24BC 0000 9447          move.l    #1,(A2)
00005372  0001      
                    9448   ; strcpyInstruction("OR") ;
00005374  4879 0000 9449          pea       @m68kde~2_294.L
00005378  84A8      
0000537A  4E93      9450          jsr       (A3)
0000537C  584F      9451          addq.w    #4,A7
                    9452   ; Decode3BitOperandMode(OpCode) ;
0000537E  2F02      9453          move.l    D2,-(A7)
00005380  4EB8 3864 9454          jsr       _Decode3BitOperandMode
00005384  584F      9455          addq.w    #4,A7
                    9456   DisassembleInstruction_273:
                    9457   ; }
                    9458   ; }
                    9459   ; /////////////////////////////////////////////////////////////////////////////////
                    9460   ; // if instruction is ORI to CCR
                    9461   ; /////////////////////////////////////////////////////////////////////////////////
                    9462   ; if(*OpCode == (unsigned short int)(0x003C))   {
00005386  2042      9463          move.l    D2,A0
00005388  3010      9464          move.w    (A0),D0
0000538A  0C40 003C 9465          cmp.w     #60,D0
0000538E  662A      9466          bne.s     DisassembleInstruction_276
                    9467   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00005390  2042      9468          move.l    D2,A0
00005392  3228 0002 9469          move.w    2(A0),D1
00005396  C27C 00FF 9470          and.w     #255,D1
0000539A  C2BC 0000 9471          and.l     #65535,D1
0000539E  FFFF      
000053A0  2F01      9472          move.l    D1,-(A7)
000053A2  4879 0000 9473          pea       @m68kde~2_295.L
000053A6  84AC      
000053A8  4879 0803 9474          pea       _Instruction.L
000053AC  04E2      
000053AE  4E95      9475          jsr       (A5)
000053B0  DEFC 000C 9476          add.w     #12,A7
                    9477   ; InstructionSize = 2;
000053B4  24BC 0000 9478          move.l    #2,(A2)
000053B8  0002      
                    9479   DisassembleInstruction_276:
                    9480   ; }
                    9481   ; /////////////////////////////////////////////////////////////////////////////////
                    9482   ; // if instruction is ORI #data,SR
                    9483   ; /////////////////////////////////////////////////////////////////////////////////
                    9484   ; if(*OpCode  == (unsigned short int)(0x007c))
000053BA  2042      9485          move.l    D2,A0
000053BC  3010      9486          move.w    (A0),D0
000053BE  0C40 007C 9487          cmp.w     #124,D0
000053C2  6622      9488          bne.s     DisassembleInstruction_278
                    9489   ; {
                    9490   ; InstructionSize = 2;
000053C4  24BC 0000 9491          move.l    #2,(A2)
000053C8  0002      
                    9492   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
000053CA  2042      9493          move.l    D2,A0
000053CC  3228 0002 9494          move.w    2(A0),D1
000053D0  48C1      9495          ext.l     D1
000053D2  2F01      9496          move.l    D1,-(A7)
000053D4  4879 0000 9497          pea       @m68kde~2_296.L
000053D8  84BA      
000053DA  4879 0803 9498          pea       _Instruction.L
000053DE  04E2      
000053E0  4E95      9499          jsr       (A5)
000053E2  DEFC 000C 9500          add.w     #12,A7
                    9501   DisassembleInstruction_278:
                    9502   ; }
                    9503   ; /////////////////////////////////////////////////////////////////////////////////
                    9504   ; // if instruction is PEA
                    9505   ; /////////////////////////////////////////////////////////////////////////////////
                    9506   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
000053E6  2042      9507          move.l    D2,A0
000053E8  3010      9508          move.w    (A0),D0
000053EA  C07C FFC0 9509          and.w     #65472,D0
000053EE  0C40 4840 9510          cmp.w     #18496,D0
000053F2  6620      9511          bne.s     DisassembleInstruction_280
                    9512   ; {
                    9513   ; InstructionSize = 1;
000053F4  24BC 0000 9514          move.l    #1,(A2)
000053F8  0001      
                    9515   ; strcpyInstruction("PEA ");
000053FA  4879 0000 9516          pea       @m68kde~2_297.L
000053FE  84C8      
00005400  4E93      9517          jsr       (A3)
00005402  584F      9518          addq.w    #4,A7
                    9519   ; Decode6BitEA(OpCode,0,0,0);
00005404  42A7      9520          clr.l     -(A7)
00005406  42A7      9521          clr.l     -(A7)
00005408  42A7      9522          clr.l     -(A7)
0000540A  2F02      9523          move.l    D2,-(A7)
0000540C  4EB8 343C 9524          jsr       _Decode6BitEA
00005410  DEFC 0010 9525          add.w     #16,A7
                    9526   DisassembleInstruction_280:
                    9527   ; }
                    9528   ; /////////////////////////////////////////////////////////////////////////////////
                    9529   ; // if instruction is reset
                    9530   ; /////////////////////////////////////////////////////////////////////////////////
                    9531   ; if(*OpCode  == (unsigned short int)(0x4E70))
00005414  2042      9532          move.l    D2,A0
00005416  3010      9533          move.w    (A0),D0
00005418  0C40 4E70 9534          cmp.w     #20080,D0
0000541C  6616      9535          bne.s     DisassembleInstruction_282
                    9536   ; {
                    9537   ; InstructionSize = 1;
0000541E  24BC 0000 9538          move.l    #1,(A2)
00005422  0001      
                    9539   ; sprintf(Instruction, "RESET");
00005424  4879 0000 9540          pea       @m68kde~2_298.L
00005428  84CE      
0000542A  4879 0803 9541          pea       _Instruction.L
0000542E  04E2      
00005430  4E95      9542          jsr       (A5)
00005432  504F      9543          addq.w    #8,A7
                    9544   DisassembleInstruction_282:
                    9545   ; }
                    9546   ; /////////////////////////////////////////////////////////////////////////////////
                    9547   ; // if instruction is RTE
                    9548   ; /////////////////////////////////////////////////////////////////////////////////
                    9549   ; if(*OpCode  == (unsigned short int)(0x4E73))
00005434  2042      9550          move.l    D2,A0
00005436  3010      9551          move.w    (A0),D0
00005438  0C40 4E73 9552          cmp.w     #20083,D0
0000543C  6616      9553          bne.s     DisassembleInstruction_284
                    9554   ; {
                    9555   ; InstructionSize = 1;
0000543E  24BC 0000 9556          move.l    #1,(A2)
00005442  0001      
                    9557   ; sprintf(Instruction, "RTE");
00005444  4879 0000 9558          pea       @m68kde~2_299.L
00005448  84D4      
0000544A  4879 0803 9559          pea       _Instruction.L
0000544E  04E2      
00005450  4E95      9560          jsr       (A5)
00005452  504F      9561          addq.w    #8,A7
                    9562   DisassembleInstruction_284:
                    9563   ; }
                    9564   ; /////////////////////////////////////////////////////////////////////////////////
                    9565   ; // if instruction is RTR
                    9566   ; /////////////////////////////////////////////////////////////////////////////////
                    9567   ; if(*OpCode == (unsigned short int)(0x4E77))
00005454  2042      9568          move.l    D2,A0
00005456  3010      9569          move.w    (A0),D0
00005458  0C40 4E77 9570          cmp.w     #20087,D0
0000545C  6610      9571          bne.s     DisassembleInstruction_286
                    9572   ; {
                    9573   ; InstructionSize = 1;
0000545E  24BC 0000 9574          move.l    #1,(A2)
00005462  0001      
                    9575   ; strcpyInstruction("RTR");
00005464  4879 0000 9576          pea       @m68kde~2_300.L
00005468  84D8      
0000546A  4E93      9577          jsr       (A3)
0000546C  584F      9578          addq.w    #4,A7
                    9579   DisassembleInstruction_286:
                    9580   ; }
                    9581   ; /////////////////////////////////////////////////////////////////////////////////
                    9582   ; // if instruction is RTS
                    9583   ; /////////////////////////////////////////////////////////////////////////////////
                    9584   ; if(*OpCode == (unsigned short int)(0x4E75))
0000546E  2042      9585          move.l    D2,A0
00005470  3010      9586          move.w    (A0),D0
00005472  0C40 4E75 9587          cmp.w     #20085,D0
00005476  6610      9588          bne.s     DisassembleInstruction_288
                    9589   ; {
                    9590   ; InstructionSize = 1;
00005478  24BC 0000 9591          move.l    #1,(A2)
0000547C  0001      
                    9592   ; strcpyInstruction("RTS");
0000547E  4879 0000 9593          pea       @m68kde~2_301.L
00005482  84DC      
00005484  4E93      9594          jsr       (A3)
00005486  584F      9595          addq.w    #4,A7
                    9596   DisassembleInstruction_288:
                    9597   ; }
                    9598   ; /////////////////////////////////////////////////////////////////////////////////
                    9599   ; // if instruction is STOP
                    9600   ; /////////////////////////////////////////////////////////////////////////////////
                    9601   ; if(*OpCode  == (unsigned short int)(0x4E72))
00005488  2042      9602          move.l    D2,A0
0000548A  3010      9603          move.w    (A0),D0
0000548C  0C40 4E72 9604          cmp.w     #20082,D0
00005490  6622      9605          bne.s     DisassembleInstruction_290
                    9606   ; {
                    9607   ; InstructionSize = 2;
00005492  24BC 0000 9608          move.l    #2,(A2)
00005496  0002      
                    9609   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
00005498  2042      9610          move.l    D2,A0
0000549A  3228 0002 9611          move.w    2(A0),D1
0000549E  48C1      9612          ext.l     D1
000054A0  2F01      9613          move.l    D1,-(A7)
000054A2  4879 0000 9614          pea       @m68kde~2_302.L
000054A6  84E0      
000054A8  4879 0803 9615          pea       _Instruction.L
000054AC  04E2      
000054AE  4E95      9616          jsr       (A5)
000054B0  DEFC 000C 9617          add.w     #12,A7
                    9618   DisassembleInstruction_290:
                    9619   ; }
                    9620   ; /////////////////////////////////////////////////////////////////////////////////
                    9621   ; // if instruction is SBCD
                    9622   ; /////////////////////////////////////////////////////////////////////////////////
                    9623   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
000054B4  2042      9624          move.l    D2,A0
000054B6  3010      9625          move.w    (A0),D0
000054B8  C07C F1F0 9626          and.w     #61936,D0
000054BC  0C40 8100 9627          cmp.w     #33024,D0
000054C0  6600 0092 9628          bne       DisassembleInstruction_295
                    9629   ; {
                    9630   ; InstructionSize = 1;
000054C4  24BC 0000 9631          move.l    #1,(A2)
000054C8  0001      
                    9632   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
000054CA  2042      9633          move.l    D2,A0
000054CC  3010      9634          move.w    (A0),D0
000054CE  E040      9635          asr.w     #8,D0
000054D0  E240      9636          asr.w     #1,D0
000054D2  C07C 0007 9637          and.w     #7,D0
000054D6  3D40 FFE0 9638          move.w    D0,-32(A6)
                    9639   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
000054DA  2042      9640          move.l    D2,A0
000054DC  3010      9641          move.w    (A0),D0
000054DE  C07C 0007 9642          and.w     #7,D0
000054E2  3D40 FFDE 9643          move.w    D0,-34(A6)
                    9644   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
000054E6  2042      9645          move.l    D2,A0
000054E8  3010      9646          move.w    (A0),D0
000054EA  E640      9647          asr.w     #3,D0
000054EC  48C0      9648          ext.l     D0
000054EE  C0BC 0000 9649          and.l     #1,D0
000054F2  0001      
000054F4  2D40 FFE4 9650          move.l    D0,-28(A6)
                    9651   ; if(Mode == 0)
000054F8  202E FFE4 9652          move.l    -28(A6),D0
000054FC  662C      9653          bne.s     DisassembleInstruction_294
                    9654   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
000054FE  322E FFE0 9655          move.w    -32(A6),D1
00005502  C2BC 0000 9656          and.l     #65535,D1
00005506  FFFF      
00005508  2F01      9657          move.l    D1,-(A7)
0000550A  322E FFDE 9658          move.w    -34(A6),D1
0000550E  C2BC 0000 9659          and.l     #65535,D1
00005512  FFFF      
00005514  2F01      9660          move.l    D1,-(A7)
00005516  4879 0000 9661          pea       @m68kde~2_303.L
0000551A  84EA      
0000551C  4879 0803 9662          pea       _Instruction.L
00005520  04E2      
00005522  4E95      9663          jsr       (A5)
00005524  DEFC 0010 9664          add.w     #16,A7
00005528  602A      9665          bra.s     DisassembleInstruction_295
                    9666   DisassembleInstruction_294:
                    9667   ; else
                    9668   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
0000552A  322E FFE0 9669          move.w    -32(A6),D1
0000552E  C2BC 0000 9670          and.l     #65535,D1
00005532  FFFF      
00005534  2F01      9671          move.l    D1,-(A7)
00005536  322E FFDE 9672          move.w    -34(A6),D1
0000553A  C2BC 0000 9673          and.l     #65535,D1
0000553E  FFFF      
00005540  2F01      9674          move.l    D1,-(A7)
00005542  4879 0000 9675          pea       @m68kde~2_304.L
00005546  84F8      
00005548  4879 0803 9676          pea       _Instruction.L
0000554C  04E2      
0000554E  4E95      9677          jsr       (A5)
00005550  DEFC 0010 9678          add.w     #16,A7
                    9679   DisassembleInstruction_295:
                    9680   ; }
                    9681   ; /////////////////////////////////////////////////////////////////////////////////
                    9682   ; // if instruction is Scc
                    9683   ; /////////////////////////////////////////////////////////////////////////////////
                    9684   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
00005554  2042      9685          move.l    D2,A0
00005556  3010      9686          move.w    (A0),D0
00005558  C07C F0C0 9687          and.w     #61632,D0
0000555C  0C40 50C0 9688          cmp.w     #20672,D0
00005560  6600 0060 9689          bne       DisassembleInstruction_298
                    9690   ; {
                    9691   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
00005564  2042      9692          move.l    D2,A0
00005566  3010      9693          move.w    (A0),D0
00005568  E640      9694          asr.w     #3,D0
0000556A  C07C 0007 9695          and.w     #7,D0
0000556E  3D40 FFEC 9696          move.w    D0,-20(A6)
                    9697   ; if(EAMode != (unsigned short int)(0x0001))
00005572  302E FFEC 9698          move.w    -20(A6),D0
00005576  0C40 0001 9699          cmp.w     #1,D0
0000557A  6700 0046 9700          beq       DisassembleInstruction_298
                    9701   ; {
                    9702   ; InstructionSize = 1;
0000557E  24BC 0000 9703          move.l    #1,(A2)
00005582  0001      
                    9704   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00005584  2042      9705          move.l    D2,A0
00005586  3010      9706          move.w    (A0),D0
00005588  E040      9707          asr.w     #8,D0
0000558A  C07C 000F 9708          and.w     #15,D0
0000558E  1D40 FFE9 9709          move.b    D0,-23(A6)
                    9710   ; strcpyInstruction("S") ;
00005592  4879 0000 9711          pea       @m68kde~2_305.L
00005596  850C      
00005598  4E93      9712          jsr       (A3)
0000559A  584F      9713          addq.w    #4,A7
                    9714   ; DecodeBranchCondition(Condition) ;
0000559C  122E FFE9 9715          move.b    -23(A6),D1
000055A0  C27C 00FF 9716          and.w     #255,D1
000055A4  C2BC 0000 9717          and.l     #65535,D1
000055A8  FFFF      
000055AA  2F01      9718          move.l    D1,-(A7)
000055AC  4EB8 38FA 9719          jsr       _DecodeBranchCondition
000055B0  584F      9720          addq.w    #4,A7
                    9721   ; Decode6BitEA(OpCode,0,0,0);
000055B2  42A7      9722          clr.l     -(A7)
000055B4  42A7      9723          clr.l     -(A7)
000055B6  42A7      9724          clr.l     -(A7)
000055B8  2F02      9725          move.l    D2,-(A7)
000055BA  4EB8 343C 9726          jsr       _Decode6BitEA
000055BE  DEFC 0010 9727          add.w     #16,A7
                    9728   DisassembleInstruction_298:
                    9729   ; }
                    9730   ; }
                    9731   ; /////////////////////////////////////////////////////////////////////////////////
                    9732   ; // if instruction is SUB or SUBA
                    9733   ; /////////////////////////////////////////////////////////////////////////////////
                    9734   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
000055C2  2042      9735          move.l    D2,A0
000055C4  3010      9736          move.w    (A0),D0
000055C6  C07C F000 9737          and.w     #61440,D0
000055CA  0C40 9000 9738          cmp.w     #36864,D0
000055CE  6600 008C 9739          bne       DisassembleInstruction_303
                    9740   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000055D2  2042      9741          move.l    D2,A0
000055D4  3010      9742          move.w    (A0),D0
000055D6  EC40      9743          asr.w     #6,D0
000055D8  C07C 0007 9744          and.w     #7,D0
000055DC  3600      9745          move.w    D0,D3
                    9746   ; InstructionSize = 1;
000055DE  24BC 0000 9747          move.l    #1,(A2)
000055E2  0001      
                    9748   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000055E4  0C43 0003 9749          cmp.w     #3,D3
000055E8  6708      9750          beq.s     DisassembleInstruction_304
000055EA  0C43 0007 9751          cmp.w     #7,D3
000055EE  6600 005A 9752          bne       DisassembleInstruction_302
                    9753   DisassembleInstruction_304:
                    9754   ; {
                    9755   ; if(OpMode == (unsigned short int)(0x0003))
000055F2  0C43 0003 9756          cmp.w     #3,D3
000055F6  660C      9757          bne.s     DisassembleInstruction_305
                    9758   ; strcpyInstruction("SUBA.W ") ;
000055F8  4879 0000 9759          pea       @m68kde~2_306.L
000055FC  850E      
000055FE  4E93      9760          jsr       (A3)
00005600  584F      9761          addq.w    #4,A7
00005602  600A      9762          bra.s     DisassembleInstruction_306
                    9763   DisassembleInstruction_305:
                    9764   ; else
                    9765   ; strcpyInstruction("SUBA.L ") ;
00005604  4879 0000 9766          pea       @m68kde~2_307.L
00005608  8516      
0000560A  4E93      9767          jsr       (A3)
0000560C  584F      9768          addq.w    #4,A7
                    9769   DisassembleInstruction_306:
                    9770   ; Decode6BitEA(OpCode,0,0,0)  ;
0000560E  42A7      9771          clr.l     -(A7)
00005610  42A7      9772          clr.l     -(A7)
00005612  42A7      9773          clr.l     -(A7)
00005614  2F02      9774          move.l    D2,-(A7)
00005616  4EB8 343C 9775          jsr       _Decode6BitEA
0000561A  DEFC 0010 9776          add.w     #16,A7
                    9777   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000561E  2042      9778          move.l    D2,A0
00005620  3210      9779          move.w    (A0),D1
00005622  E041      9780          asr.w     #8,D1
00005624  E241      9781          asr.w     #1,D1
00005626  C27C 0007 9782          and.w     #7,D1
0000562A  C2BC 0000 9783          and.l     #65535,D1
0000562E  FFFF      
00005630  2F01      9784          move.l    D1,-(A7)
00005632  4879 0000 9785          pea       @m68kde~2_210.L
00005636  820A      
00005638  2F0C      9786          move.l    A4,-(A7)
0000563A  4E95      9787          jsr       (A5)
0000563C  DEFC 000C 9788          add.w     #12,A7
                    9789   ; strcatInstruction(TempString) ;
00005640  2F0C      9790          move.l    A4,-(A7)
00005642  4EB8 0CCC 9791          jsr       _strcatInstruction
00005646  584F      9792          addq.w    #4,A7
00005648  6012      9793          bra.s     DisassembleInstruction_303
                    9794   DisassembleInstruction_302:
                    9795   ; }
                    9796   ; else {
                    9797   ; strcpyInstruction("SUB") ;
0000564A  4879 0000 9798          pea       @m68kde~2_308.L
0000564E  851E      
00005650  4E93      9799          jsr       (A3)
00005652  584F      9800          addq.w    #4,A7
                    9801   ; Decode3BitOperandMode(OpCode) ;
00005654  2F02      9802          move.l    D2,-(A7)
00005656  4EB8 3864 9803          jsr       _Decode3BitOperandMode
0000565A  584F      9804          addq.w    #4,A7
                    9805   DisassembleInstruction_303:
                    9806   ; }
                    9807   ; }
                    9808   ; /////////////////////////////////////////////////////////////////////////////////
                    9809   ; // if instruction is SUBQ
                    9810   ; /////////////////////////////////////////////////////////////////////////////////
                    9811   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
0000565C  2042      9812          move.l    D2,A0
0000565E  3010      9813          move.w    (A0),D0
00005660  C07C F100 9814          and.w     #61696,D0
00005664  0C40 5100 9815          cmp.w     #20736,D0
00005668  6600 0072 9816          bne       DisassembleInstruction_309
                    9817   ; {
                    9818   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000566C  2042      9819          move.l    D2,A0
0000566E  3010      9820          move.w    (A0),D0
00005670  EC40      9821          asr.w     #6,D0
00005672  C07C 0003 9822          and.w     #3,D0
00005676  3600      9823          move.w    D0,D3
                    9824   ; if(OpMode <= (unsigned short int)(0x0002))
00005678  0C43 0002 9825          cmp.w     #2,D3
0000567C  6200 005E 9826          bhi       DisassembleInstruction_309
                    9827   ; {
                    9828   ; InstructionSize = 1;
00005680  24BC 0000 9829          move.l    #1,(A2)
00005684  0001      
                    9830   ; strcpyInstruction("SUBQ") ;
00005686  4879 0000 9831          pea       @m68kde~2_309.L
0000568A  8522      
0000568C  4E93      9832          jsr       (A3)
0000568E  584F      9833          addq.w    #4,A7
                    9834   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005690  2042      9835          move.l    D2,A0
00005692  3210      9836          move.w    (A0),D1
00005694  C2BC 0000 9837          and.l     #65535,D1
00005698  FFFF      
0000569A  2F01      9838          move.l    D1,-(A7)
0000569C  4EB8 31A8 9839          jsr       _Decode2BitOperandSize
000056A0  584F      9840          addq.w    #4,A7
                    9841   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
000056A2  2042      9842          move.l    D2,A0
000056A4  3210      9843          move.w    (A0),D1
000056A6  E041      9844          asr.w     #8,D1
000056A8  E241      9845          asr.w     #1,D1
000056AA  C27C 0007 9846          and.w     #7,D1
000056AE  C2BC 0000 9847          and.l     #65535,D1
000056B2  FFFF      
000056B4  2F01      9848          move.l    D1,-(A7)
000056B6  4879 0000 9849          pea       @m68kde~2_220.L
000056BA  824A      
000056BC  2F0C      9850          move.l    A4,-(A7)
000056BE  4E95      9851          jsr       (A5)
000056C0  DEFC 000C 9852          add.w     #12,A7
                    9853   ; strcatInstruction(TempString) ;
000056C4  2F0C      9854          move.l    A4,-(A7)
000056C6  4EB8 0CCC 9855          jsr       _strcatInstruction
000056CA  584F      9856          addq.w    #4,A7
                    9857   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
000056CC  42A7      9858          clr.l     -(A7)
000056CE  42A7      9859          clr.l     -(A7)
000056D0  42A7      9860          clr.l     -(A7)
000056D2  2F02      9861          move.l    D2,-(A7)
000056D4  4EB8 343C 9862          jsr       _Decode6BitEA
000056D8  DEFC 0010 9863          add.w     #16,A7
                    9864   DisassembleInstruction_309:
                    9865   ; }
                    9866   ; }
                    9867   ; /////////////////////////////////////////////////////////////////////////////////
                    9868   ; // if instruction is SUBX
                    9869   ; /////////////////////////////////////////////////////////////////////////////////
                    9870   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
000056DC  2042      9871          move.l    D2,A0
000056DE  3010      9872          move.w    (A0),D0
000056E0  C07C F130 9873          and.w     #61744,D0
000056E4  0C40 9100 9874          cmp.w     #37120,D0
000056E8  6600 00A4 9875          bne       DisassembleInstruction_313
                    9876   ; {
                    9877   ; InstructionSize = 1;
000056EC  24BC 0000 9878          move.l    #1,(A2)
000056F0  0001      
                    9879   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
000056F2  2042      9880          move.l    D2,A0
000056F4  3010      9881          move.w    (A0),D0
000056F6  EC40      9882          asr.w     #6,D0
000056F8  C07C 0003 9883          and.w     #3,D0
000056FC  3600      9884          move.w    D0,D3
                    9885   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
000056FE  0C43 0003 9886          cmp.w     #3,D3
00005702  6700 008A 9887          beq       DisassembleInstruction_313
                    9888   ; {
                    9889   ; strcpyInstruction("SUBX") ;
00005706  4879 0000 9890          pea       @m68kde~2_310.L
0000570A  8528      
0000570C  4E93      9891          jsr       (A3)
0000570E  584F      9892          addq.w    #4,A7
                    9893   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005710  2042      9894          move.l    D2,A0
00005712  3210      9895          move.w    (A0),D1
00005714  C2BC 0000 9896          and.l     #65535,D1
00005718  FFFF      
0000571A  2F01      9897          move.l    D1,-(A7)
0000571C  4EB8 31A8 9898          jsr       _Decode2BitOperandSize
00005720  584F      9899          addq.w    #4,A7
                    9900   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00005722  2042      9901          move.l    D2,A0
00005724  3010      9902          move.w    (A0),D0
00005726  C07C 0008 9903          and.w     #8,D0
0000572A  6600 0030 9904          bne       DisassembleInstruction_315
                    9905   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
0000572E  2042      9906          move.l    D2,A0
00005730  3210      9907          move.w    (A0),D1
00005732  E041      9908          asr.w     #8,D1
00005734  E241      9909          asr.w     #1,D1
00005736  C27C 0007 9910          and.w     #7,D1
0000573A  48C1      9911          ext.l     D1
0000573C  2F01      9912          move.l    D1,-(A7)
0000573E  2042      9913          move.l    D2,A0
00005740  3210      9914          move.w    (A0),D1
00005742  C27C 0007 9915          and.w     #7,D1
00005746  48C1      9916          ext.l     D1
00005748  2F01      9917          move.l    D1,-(A7)
0000574A  4879 0000 9918          pea       @m68kde~2_311.L
0000574E  852E      
00005750  2F0C      9919          move.l    A4,-(A7)
00005752  4E95      9920          jsr       (A5)
00005754  DEFC 0010 9921          add.w     #16,A7
00005758  6000 002C 9922          bra       DisassembleInstruction_316
                    9923   DisassembleInstruction_315:
                    9924   ; else        // -(ax),-(ay) mode used
                    9925   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
0000575C  2042      9926          move.l    D2,A0
0000575E  3210      9927          move.w    (A0),D1
00005760  E041      9928          asr.w     #8,D1
00005762  E241      9929          asr.w     #1,D1
00005764  C27C 0007 9930          and.w     #7,D1
00005768  48C1      9931          ext.l     D1
0000576A  2F01      9932          move.l    D1,-(A7)
0000576C  2042      9933          move.l    D2,A0
0000576E  3210      9934          move.w    (A0),D1
00005770  C27C 0007 9935          and.w     #7,D1
00005774  48C1      9936          ext.l     D1
00005776  2F01      9937          move.l    D1,-(A7)
00005778  4879 0000 9938          pea       @m68kde~2_312.L
0000577C  8538      
0000577E  2F0C      9939          move.l    A4,-(A7)
00005780  4E95      9940          jsr       (A5)
00005782  DEFC 0010 9941          add.w     #16,A7
                    9942   DisassembleInstruction_316:
                    9943   ; strcatInstruction(TempString) ;
00005786  2F0C      9944          move.l    A4,-(A7)
00005788  4EB8 0CCC 9945          jsr       _strcatInstruction
0000578C  584F      9946          addq.w    #4,A7
                    9947   DisassembleInstruction_313:
                    9948   ; }
                    9949   ; }
                    9950   ; /////////////////////////////////////////////////////////////////////////////////
                    9951   ; // if instruction is SWAP
                    9952   ; /////////////////////////////////////////////////////////////////////////////////
                    9953   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
0000578E  2042      9954          move.l    D2,A0
00005790  3010      9955          move.w    (A0),D0
00005792  C07C FFF8 9956          and.w     #65528,D0
00005796  0C40 4840 9957          cmp.w     #18496,D0
0000579A  662A      9958          bne.s     DisassembleInstruction_317
                    9959   ; {
                    9960   ; InstructionSize = 1;
0000579C  24BC 0000 9961          move.l    #1,(A2)
000057A0  0001      
                    9962   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
000057A2  2042      9963          move.l    D2,A0
000057A4  3010      9964          move.w    (A0),D0
000057A6  C07C 0007 9965          and.w     #7,D0
000057AA  3A00      9966          move.w    D0,D5
                    9967   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
000057AC  CABC 0000 9968          and.l     #65535,D5
000057B0  FFFF      
000057B2  2F05      9969          move.l    D5,-(A7)
000057B4  4879 0000 9970          pea       @m68kde~2_313.L
000057B8  8548      
000057BA  4879 0803 9971          pea       _Instruction.L
000057BE  04E2      
000057C0  4E95      9972          jsr       (A5)
000057C2  DEFC 000C 9973          add.w     #12,A7
                    9974   DisassembleInstruction_317:
                    9975   ; }
                    9976   ; /////////////////////////////////////////////////////////////////////////////////
                    9977   ; // if instruction is TAS
                    9978   ; /////////////////////////////////////////////////////////////////////////////////
                    9979   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
000057C6  2042      9980          move.l    D2,A0
000057C8  3010      9981          move.w    (A0),D0
000057CA  C07C FFC0 9982          and.w     #65472,D0
000057CE  0C40 4AC0 9983          cmp.w     #19136,D0
000057D2  662A      9984          bne.s     DisassembleInstruction_321
                    9985   ; {
                    9986   ; if(*OpCode != (unsigned short int)(0x4AFC))
000057D4  2042      9987          move.l    D2,A0
000057D6  3010      9988          move.w    (A0),D0
000057D8  0C40 4AFC 9989          cmp.w     #19196,D0
000057DC  6720      9990          beq.s     DisassembleInstruction_321
                    9991   ; {
                    9992   ; InstructionSize = 1;
000057DE  24BC 0000 9993          move.l    #1,(A2)
000057E2  0001      
                    9994   ; strcpyInstruction("TAS ") ;
000057E4  4879 0000 9995          pea       @m68kde~2_314.L
000057E8  8552      
000057EA  4E93      9996          jsr       (A3)
000057EC  584F      9997          addq.w    #4,A7
                    9998   ; Decode6BitEA(OpCode,0,0,0) ;
000057EE  42A7      9999          clr.l     -(A7)
000057F0  42A7      10000          clr.l     -(A7)
000057F2  42A7      10001          clr.l     -(A7)
000057F4  2F02      10002          move.l    D2,-(A7)
000057F6  4EB8 343C 10003          jsr       _Decode6BitEA
000057FA  DEFC 0010 10004          add.w     #16,A7
                    10005   DisassembleInstruction_321:
                    10006   ; }
                    10007   ; }
                    10008   ; /////////////////////////////////////////////////////////////////////////////////
                    10009   ; // if instruction is TRAP
                    10010   ; /////////////////////////////////////////////////////////////////////////////////
                    10011   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
000057FE  2042      10012          move.l    D2,A0
00005800  3010      10013          move.w    (A0),D0
00005802  C07C FFF0 10014          and.w     #65520,D0
00005806  0C40 4E40 10015          cmp.w     #20032,D0
0000580A  6622      10016          bne.s     DisassembleInstruction_323
                    10017   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
0000580C  2042      10018          move.l    D2,A0
0000580E  3210      10019          move.w    (A0),D1
00005810  C27C 000F 10020          and.w     #15,D1
00005814  C2BC 0000 10021          and.l     #65535,D1
00005818  FFFF      
0000581A  2F01      10022          move.l    D1,-(A7)
0000581C  4879 0000 10023          pea       @m68kde~2_315.L
00005820  8558      
00005822  4879 0803 10024          pea       _Instruction.L
00005826  04E2      
00005828  4E95      10025          jsr       (A5)
0000582A  DEFC 000C 10026          add.w     #12,A7
                    10027   DisassembleInstruction_323:
                    10028   ; }
                    10029   ; /////////////////////////////////////////////////////////////////////////////////
                    10030   ; // if instruction is TRAPV
                    10031   ; /////////////////////////////////////////////////////////////////////////////////
                    10032   ; if(*OpCode == (unsigned short int)(0x4E76))
0000582E  2042      10033          move.l    D2,A0
00005830  3010      10034          move.w    (A0),D0
00005832  0C40 4E76 10035          cmp.w     #20086,D0
00005836  6610      10036          bne.s     DisassembleInstruction_325
                    10037   ; {
                    10038   ; InstructionSize = 1;
00005838  24BC 0000 10039          move.l    #1,(A2)
0000583C  0001      
                    10040   ; strcpyInstruction("TRAPV") ;
0000583E  4879 0000 10041          pea       @m68kde~2_316.L
00005842  8562      
00005844  4E93      10042          jsr       (A3)
00005846  584F      10043          addq.w    #4,A7
                    10044   DisassembleInstruction_325:
                    10045   ; }
                    10046   ; /////////////////////////////////////////////////////////////////////////////////
                    10047   ; // if instruction is TST
                    10048   ; /////////////////////////////////////////////////////////////////////////////////
                    10049   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
00005848  2042      10050          move.l    D2,A0
0000584A  3010      10051          move.w    (A0),D0
0000584C  C07C FF00 10052          and.w     #65280,D0
00005850  0C40 4A00 10053          cmp.w     #18944,D0
00005854  6600 005A 10054          bne       DisassembleInstruction_329
                    10055   ; {
                    10056   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00005858  2042      10057          move.l    D2,A0
0000585A  3010      10058          move.w    (A0),D0
0000585C  EC40      10059          asr.w     #6,D0
0000585E  C07C 0003 10060          and.w     #3,D0
00005862  3D40 FFE2 10061          move.w    D0,-30(A6)
                    10062   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
00005866  2042      10063          move.l    D2,A0
00005868  3010      10064          move.w    (A0),D0
0000586A  0C40 4AFC 10065          cmp.w     #19196,D0
0000586E  6700 0040 10066          beq       DisassembleInstruction_329
00005872  302E FFE2 10067          move.w    -30(A6),D0
00005876  0C40 0003 10068          cmp.w     #3,D0
0000587A  6700 0034 10069          beq       DisassembleInstruction_329
                    10070   ; InstructionSize = 1;
0000587E  24BC 0000 10071          move.l    #1,(A2)
00005882  0001      
                    10072   ; strcpyInstruction("TST") ;
00005884  4879 0000 10073          pea       @m68kde~2_317.L
00005888  8568      
0000588A  4E93      10074          jsr       (A3)
0000588C  584F      10075          addq.w    #4,A7
                    10076   ; Decode2BitOperandSize(*OpCode) ;
0000588E  2042      10077          move.l    D2,A0
00005890  3210      10078          move.w    (A0),D1
00005892  C2BC 0000 10079          and.l     #65535,D1
00005896  FFFF      
00005898  2F01      10080          move.l    D1,-(A7)
0000589A  4EB8 31A8 10081          jsr       _Decode2BitOperandSize
0000589E  584F      10082          addq.w    #4,A7
                    10083   ; Decode6BitEA(OpCode,0,0,0) ;
000058A0  42A7      10084          clr.l     -(A7)
000058A2  42A7      10085          clr.l     -(A7)
000058A4  42A7      10086          clr.l     -(A7)
000058A6  2F02      10087          move.l    D2,-(A7)
000058A8  4EB8 343C 10088          jsr       _Decode6BitEA
000058AC  DEFC 0010 10089          add.w     #16,A7
                    10090   DisassembleInstruction_329:
                    10091   ; }
                    10092   ; }
                    10093   ; /////////////////////////////////////////////////////////////////////////////////
                    10094   ; // if instruction is UNLK
                    10095   ; //////////////////////////////////////////////////////////
                    10096   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
000058B0  2042      10097          move.l    D2,A0
000058B2  3010      10098          move.w    (A0),D0
000058B4  C07C FFF8 10099          and.w     #65528,D0
000058B8  0C40 4E58 10100          cmp.w     #20056,D0
000058BC  6628      10101          bne.s     DisassembleInstruction_331
                    10102   ; {
                    10103   ; InstructionSize = 1;
000058BE  24BC 0000 10104          move.l    #1,(A2)
000058C2  0001      
                    10105   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
000058C4  2042      10106          move.l    D2,A0
000058C6  3210      10107          move.w    (A0),D1
000058C8  C27C 0007 10108          and.w     #7,D1
000058CC  C2BC 0000 10109          and.l     #65535,D1
000058D0  FFFF      
000058D2  2F01      10110          move.l    D1,-(A7)
000058D4  4879 0000 10111          pea       @m68kde~2_318.L
000058D8  856C      
000058DA  4879 0803 10112          pea       _Instruction.L
000058DE  04E2      
000058E0  4E95      10113          jsr       (A5)
000058E2  DEFC 000C 10114          add.w     #12,A7
                    10115   DisassembleInstruction_331:
                    10116   ; }
                    10117   ; FormatInstruction() ;
000058E6  4EB8 3116 10118          jsr       _FormatInstruction
000058EA  4CDF 3CFC 10119          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000058EE  4E5E      10120          unlk      A6
000058F0  4E75      10121          rts
                    10122   ; }
                    10123   _strcpy:
000058F2  206F 0004 10124          move.l    (4,A7),A0
000058F6  226F 0008 10125          move.l    (8,A7),A1
000058FA  2008      10126          move.l    A0,D0
                    10127   strcpy_1:
000058FC  10D9      10128          move.b    (A1)+,(A0)+
000058FE  66FC      10129          bne.s     strcpy_1
00005900  4E75      10130          rts
                    10131   ULDIV:
00005902  4E56 0000 10132          link    A6,#0
00005906  48E7 C000 10133          movem.l D0/D1,-(A7)
0000590A  222E 0008 10134          move.l  8(A6),D1
0000590E  202E 000C 10135          move.l  12(A6),D0
00005912  6036      10136          bra.s   ldiv_3
                    10137   LDIV:
00005914  4E56 0000 10138          link    A6,#0
00005918  48E7 C000 10139          movem.l D0/D1,-(A7)
0000591C  222E 0008 10140          move.l  8(A6),D1
00005920  202E 000C 10141          move.l  12(A6),D0
00005924  4A80      10142          tst.l   D0
00005926  6A0E      10143          bpl.s   ldiv_1
00005928  4480      10144          neg.l   D0
0000592A  4A81      10145          tst.l   D1
0000592C  6A14      10146          bpl.s   ldiv_2
0000592E  4481      10147          neg.l   D1
00005930  612A      10148          bsr.s   dodiv
00005932  4481      10149          neg.l   D1
00005934  6016      10150          bra.s   ldiv_4
                    10151   ldiv_1:
00005936  4A81      10152          tst.l   D1
00005938  6A10      10153          bpl.s   ldiv_3
0000593A  4481      10154          neg.l   D1
0000593C  611E      10155          bsr.s   dodiv
0000593E  4480      10156          neg.l   D0
00005940  600A      10157          bra.s   ldiv_4
                    10158   ldiv_2:
00005942  6118      10159          bsr.s   dodiv
00005944  4480      10160          neg.l   D0
00005946  4481      10161          neg.l   D1
00005948  6002      10162          bra.s   ldiv_4
                    10163   ldiv_3:
0000594A  6110      10164          bsr.s   dodiv
                    10165   ldiv_4:
0000594C  2D40 0008 10166          move.l  D0,8(A6)
00005950  2D41 000C 10167          move.l  D1,12(A6)
00005954  4CDF 0003 10168          movem.l (A7)+,D0/D1
00005958  4E5E      10169          unlk    A6
0000595A  4E75      10170          rts
                    10171   dodiv:
0000595C  0C81 0000 10172          cmpi.l  #$FFFF,D1
00005960  FFFF      
00005962  6236      10173          bhi.s   dodiv_2
00005964  0C80 0000 10174          cmpi.l  #$FFFF,D0
00005968  FFFF      
0000596A  6210      10175          bhi.s   dodiv_1
0000596C  80C1      10176          divu    D1,D0
0000596E  2200      10177          move.l  D0,D1
00005970  4241      10178          clr.w   D1
00005972  4841      10179          swap    D1
00005974  0280 0000 10180          andi.l  #$FFFF,D0
00005978  FFFF      
0000597A  4E75      10181          rts
                    10182   dodiv_1:
0000597C  48A7 A000 10183          movem.w D0/D2,-(A7)
00005980  4240      10184          clr.w   D0
00005982  4840      10185          swap    D0
00005984  80C1      10186          divu    D1,D0
00005986  3400      10187          move.w  D0,D2
00005988  301F      10188          move.w  (A7)+,D0
0000598A  80C1      10189          divu    D1,D0
0000598C  4840      10190          swap    D0
0000598E  4281      10191          clr.l   D1
00005990  3200      10192          move.w  D0,D1
00005992  3002      10193          move.w  D2,D0
00005994  4840      10194          swap    D0
00005996  341F      10195          move.w  (A7)+,D2
00005998  4E75      10196          rts
                    10197   dodiv_2:
0000599A  48E7 3800 10198          movem.l D2/D3/D4,-(A7)
0000599E  2401      10199          move.l  D1,D2
000059A0  4242      10200          clr.w   D2
000059A2  4842      10201          swap    D2
000059A4  5282      10202          addq.l  #1,D2
000059A6  2600      10203          move.l  D0,D3
000059A8  2801      10204          move.l  D1,D4
000059AA  2202      10205          move.l  D2,D1
000059AC  61CE      10206          bsr.s   dodiv_1
000059AE  2204      10207          move.l  D4,D1
000059B0  82C2      10208          divu    D2,D1
000059B2  80C1      10209          divu    D1,D0
000059B4  0280 0000 10210          andi.l  #$FFFF,D0
000059B8  FFFF      
                    10211   dodiv_3:
000059BA  2204      10212          move.l  D4,D1
000059BC  2404      10213          move.l  D4,D2
000059BE  4842      10214          swap    D2
000059C0  C2C0      10215          mulu    D0,D1
000059C2  C4C0      10216          mulu    D0,D2
000059C4  4842      10217          swap    D2
000059C6  D282      10218          add.l   D2,D1
000059C8  9283      10219          sub.l   D3,D1
000059CA  620A      10220          bhi.s   dodiv_4
000059CC  4481      10221          neg.l   D1
000059CE  B881      10222          cmp.l   D1,D4
000059D0  6208      10223          bhi.s   dodiv_5
000059D2  5280      10224          addq.l  #1,D0
000059D4  60E4      10225          bra.s   dodiv_3
                    10226   dodiv_4:
000059D6  5380      10227          subq.l  #1,D0
000059D8  60E0      10228          bra.s   dodiv_3
                    10229   dodiv_5:
000059DA  4CDF 001C 10230          movem.l (A7)+,D2/D3/D4
000059DE  4E75      10231          rts
                    10232   _putch:
000059E0  4E56 0000 10233          link      A6,#0
000059E4  2F02      10234          move.l    D2,-(A7)
000059E6  242E 0008 10235          move.l    8(A6),D2
000059EA  0C82 0000 10236          cmp.l     #10,D2
000059EE  000A      
000059F0  660A      10237          bne.s     putch_1
000059F2  4878 000D 10238          pea       13
000059F6  4EB8 0B3C 10239          jsr       __putch
000059FA  584F      10240          addq.w    #4,A7
                    10241   putch_1:
000059FC  2F02      10242          move.l    D2,-(A7)
000059FE  4EB8 0B3C 10243          jsr       __putch
00005A02  584F      10244          addq.w    #4,A7
00005A04  2002      10245          move.l    D2,D0
00005A06  241F      10246          move.l    (A7)+,D2
00005A08  4E5E      10247          unlk      A6
00005A0A  4E75      10248          rts
                    10249   _getch:
00005A0C  2F02      10250          move.l    D2,-(A7)
00005A0E  2439 0803 10251          move.l    __ungetbuf.L,D2
00005A12  00C0      
00005A14  2039 0803 10252          move.l    __ungetbuf.L,D0
00005A18  00C0      
00005A1A  0C80 FFFF 10253          cmp.l     #-1,D0
00005A1E  FFFF      
00005A20  670C      10254          beq.s     getch_1
00005A22  23FC FFFF 10255          move.l    #-1,__ungetbuf.L
00005A26  FFFF 0803 
00005A2A  00C0      
00005A2C  6010      10256          bra.s     getch_3
                    10257   getch_1:
00005A2E  4EB8 0B68 10258          jsr       __getch
00005A32  2400      10259          move.l    D0,D2
00005A34  0C80 0000 10260          cmp.l     #13,D0
00005A38  000D      
00005A3A  6602      10261          bne.s     getch_3
00005A3C  740A      10262          moveq     #10,D2
                    10263   getch_3:
00005A3E  2002      10264          move.l    D2,D0
00005A40  241F      10265          move.l    (A7)+,D2
00005A42  4E75      10266          rts
                    10267   _tolower:
00005A44  202F 0004 10268          move.l    4(A7),D0
00005A48  0C80 0000 10269          cmp.l     #'A',D0
00005A4C  0041      
00005A4E  6D0E      10270          blt.s     tolower_1
00005A50  0C80 0000 10271          cmp.l     #'Z',D0
00005A54  005A      
00005A56  6E06      10272          bgt.s     tolower_1
00005A58  0680 0000 10273          add.l     #$20,D0
00005A5C  0020      
                    10274   tolower_1:
00005A5E  4E75      10275          rts
                    10276   _sprintf:
00005A60  4E56 FFFC 10277          link      A6,#-4
00005A64  2F02      10278          move.l    D2,-(A7)
00005A66  41EE 000C 10279          lea       12(A6),A0
00005A6A  5848      10280          addq.w    #4,A0
00005A6C  2408      10281          move.l    A0,D2
00005A6E  2F02      10282          move.l    D2,-(A7)
00005A70  2F2E 000C 10283          move.l    12(A6),-(A7)
00005A74  2F2E 0008 10284          move.l    8(A6),-(A7)
00005A78  4EB9 0000 10285          jsr       _doprint
00005A7C  64A4      
00005A7E  DEFC 000C 10286          add.w     #12,A7
00005A82  2D40 FFFC 10287          move.l    D0,-4(A6)
00005A86  4282      10288          clr.l     D2
00005A88  202E FFFC 10289          move.l    -4(A6),D0
00005A8C  241F      10290          move.l    (A7)+,D2
00005A8E  4E5E      10291          unlk      A6
00005A90  4E75      10292          rts
                    10293   _strcat:
00005A92  206F 0004 10294          move.l    (4,A7),A0
00005A96  226F 0008 10295          move.l    (8,A7),A1
00005A9A  2008      10296          move.l    A0,D0
                    10297   strcat_1:
00005A9C  4A18      10298          tst.b     (A0)+
00005A9E  66FC      10299          bne.s     strcat_1
00005AA0  5388      10300          subq.l    #1,A0
                    10301   strcat_2:
00005AA2  10D9      10302          move.b    (A1)+,(A0)+
00005AA4  66FC      10303          bne.s     strcat_2
00005AA6  4E75      10304          rts
                    10305   _toupper:
00005AA8  202F 0004 10306          move.l    4(A7),D0
00005AAC  0C80 0000 10307          cmp.l     #'a',D0
00005AB0  0061      
00005AB2  6D0E      10308          blt.s     toupper_1
00005AB4  0C80 0000 10309          cmp.l     #'z',D0
00005AB8  007A      
00005ABA  6E06      10310          bgt.s     toupper_1
00005ABC  0480 0000 10311          sub.l     #$20,D0
00005AC0  0020      
                    10312   toupper_1:
00005AC2  4E75      10313          rts
                    10314   _scanf:
00005AC4  4E56 FFFC 10315          link      A6,#-4
00005AC8  2F02      10316          move.l    D2,-(A7)
00005ACA  41EE 0008 10317          lea       8(A6),A0
00005ACE  5848      10318          addq.w    #4,A0
00005AD0  2408      10319          move.l    A0,D2
00005AD2  2F02      10320          move.l    D2,-(A7)
00005AD4  2F2E 0008 10321          move.l    8(A6),-(A7)
00005AD8  42A7      10322          clr.l     -(A7)
00005ADA  4EB9 0000 10323          jsr       _doscan
00005ADE  5D8E      
00005AE0  DEFC 000C 10324          add.w     #12,A7
00005AE4  2D40 FFFC 10325          move.l    D0,-4(A6)
00005AE8  4282      10326          clr.l     D2
00005AEA  202E FFFC 10327          move.l    -4(A6),D0
00005AEE  241F      10328          move.l    (A7)+,D2
00005AF0  4E5E      10329          unlk      A6
00005AF2  4E75      10330          rts
                    10331   @doscan_read:
00005AF4  4E56 FFFC 10332          link      A6,#-4
00005AF8  2F0A      10333          move.l    A2,-(A7)
00005AFA  45F9 0000 10334          lea       @doscan_lpbuf.L,A2
00005AFE  8686      
00005B00  4AAE 0008 10335          tst.l     8(A6)
00005B04  6700 0032 10336          beq       @doscan_read_1
00005B08  206E 0008 10337          move.l    8(A6),A0
00005B0C  58AE 0008 10338          addq.l    #4,8(A6)
00005B10  2050      10339          move.l    (A0),A0
00005B12  1010      10340          move.b    (A0),D0
00005B14  4880      10341          ext.w     D0
00005B16  48C0      10342          ext.l     D0
00005B18  2D40 FFFC 10343          move.l    D0,-4(A6)
00005B1C  4201      10344          clr.b     D1
00005B1E  C2BC 0000 10345          and.l     #255,D1
00005B22  00FF      
00005B24  B081      10346          cmp.l     D1,D0
00005B26  6706      10347          beq.s     @doscan_read_3
00005B28  202E FFFC 10348          move.l    -4(A6),D0
00005B2C  6006      10349          bra.s     @doscan_read_4
                    10350   @doscan_read_3:
00005B2E  70FF      10351          moveq     #-1,D0
00005B30  4880      10352          ext.w     D0
00005B32  48C0      10353          ext.l     D0
                    10354   @doscan_read_4:
00005B34  6000 0034 10355          bra       @doscan_read_5
                    10356   @doscan_read_1:
00005B38  2052      10357          move.l    (A2),A0
00005B3A  1010      10358          move.b    (A0),D0
00005B3C  6622      10359          bne.s     @doscan_read_6
00005B3E  4879 0803 10360          pea       @doscan_buf.L
00005B42  05AA      
00005B44  4EB9 0000 10361          jsr       _gets
00005B48  6B6C      
00005B4A  584F      10362          addq.w    #4,A7
00005B4C  2480      10363          move.l    D0,(A2)
00005B4E  4879 0000 10364          pea       @doscan_1.L
00005B52  8576      
00005B54  4879 0803 10365          pea       @doscan_buf.L
00005B58  05AA      
00005B5A  4EB8 5A92 10366          jsr       _strcat
00005B5E  504F      10367          addq.w    #8,A7
                    10368   @doscan_read_6:
00005B60  2052      10369          move.l    (A2),A0
00005B62  5292      10370          addq.l    #1,(A2)
00005B64  1010      10371          move.b    (A0),D0
00005B66  4880      10372          ext.w     D0
00005B68  48C0      10373          ext.l     D0
                    10374   @doscan_read_5:
00005B6A  245F      10375          move.l    (A7)+,A2
00005B6C  4E5E      10376          unlk      A6
00005B6E  4E75      10377          rts
                    10378   @doscan_putback:
00005B70  4E56 0000 10379          link      A6,#0
00005B74  48E7 3000 10380          movem.l   D2/D3,-(A7)
00005B78  242E 000C 10381          move.l    12(A6),D2
00005B7C  262E 0008 10382          move.l    8(A6),D3
00005B80  6718      10383          beq.s     @doscan_putback_1
00005B82  0C82 FFFF 10384          cmp.l     #-1,D2
00005B86  FFFF      
00005B88  670A      10385          beq.s     @doscan_putback_3
00005B8A  5983      10386          subq.l    #4,D3
00005B8C  2043      10387          move.l    D3,A0
00005B8E  2050      10388          move.l    (A0),A0
00005B90  1082      10389          move.b    D2,(A0)
00005B92  6004      10390          bra.s     @doscan_putback_4
                    10391   @doscan_putback_3:
00005B94  2043      10392          move.l    D3,A0
00005B96  5390      10393          subq.l    #1,(A0)
                    10394   @doscan_putback_4:
00005B98  6030      10395          bra.s     @doscan_putback_6
                    10396   @doscan_putback_1:
00005B9A  41F9 0803 10397          lea       @doscan_buf.L,A0
00005B9E  05AA      
00005BA0  2008      10398          move.l    A0,D0
00005BA2  B0B9 0000 10399          cmp.l     @doscan_lpbuf.L,D0
00005BA6  8686      
00005BA8  6612      10400          bne.s     @doscan_putback_5
00005BAA  4239 0803 10401          clr.b     @doscan_buf.L
00005BAE  05AA      
00005BB0  2F02      10402          move.l    D2,-(A7)
00005BB2  4EB9 0000 10403          jsr       _ungetch
00005BB6  6BDE      
00005BB8  584F      10404          addq.w    #4,A7
00005BBA  600E      10405          bra.s     @doscan_putback_6
                    10406   @doscan_putback_5:
00005BBC  53B9 0000 10407          subq.l    #1,@doscan_lpbuf.L
00005BC0  8686      
00005BC2  2079 0000 10408          move.l    @doscan_lpbuf.L,A0
00005BC6  8686      
00005BC8  1082      10409          move.b    D2,(A0)
                    10410   @doscan_putback_6:
00005BCA  2002      10411          move.l    D2,D0
00005BCC  4CDF 000C 10412          movem.l   (A7)+,D2/D3
00005BD0  4E5E      10413          unlk      A6
00005BD2  4E75      10414          rts
                    10415   @doscan_space:
00005BD4  4E56 0000 10416          link      A6,#0
00005BD8  2F02      10417          move.l    D2,-(A7)
                    10418   @doscan_space_1:
00005BDA  2F2E 0008 10419          move.l    8(A6),-(A7)
00005BDE  4EB8 5AF4 10420          jsr       @doscan_read
00005BE2  584F      10421          addq.w    #4,A7
00005BE4  2400      10422          move.l    D0,D2
00005BE6  206E 000C 10423          move.l    12(A6),A0
00005BEA  5290      10424          addq.l    #1,(A0)
00005BEC  2002      10425          move.l    D2,D0
00005BEE  5280      10426          addq.l    #1,D0
00005BF0  41F9 0000 10427          lea       __ctype.L,A0
00005BF4  8578      
00005BF6  1030 0800 10428          move.b    0(A0,D0.L),D0
00005BFA  C03C 0010 10429          and.b     #16,D0
00005BFE  66DA      10430          bne       @doscan_space_1
00005C00  2002      10431          move.l    D2,D0
00005C02  241F      10432          move.l    (A7)+,D2
00005C04  4E5E      10433          unlk      A6
00005C06  4E75      10434          rts
                    10435   @doscan_select:
00005C08  4E56 0000 10436          link      A6,#0
00005C0C  48E7 3F20 10437          movem.l   D2/D3/D4/D5/D6/D7/A2,-(A7)
00005C10  262E 000C 10438          move.l    12(A6),D3
00005C14  2C2E 0018 10439          move.l    24(A6),D6
00005C18  2E2E 0014 10440          move.l    20(A6),D7
00005C1C  2043      10441          move.l    D3,A0
00005C1E  1010      10442          move.b    (A0),D0
00005C20  0C00 005E 10443          cmp.b     #94,D0
00005C24  6608      10444          bne.s     @doscan_select_1
00005C26  347C 0001 10445          move.w    #1,A2
00005C2A  5283      10446          addq.l    #1,D3
00005C2C  6004      10447          bra.s     @doscan_select_2
                    10448   @doscan_select_1:
00005C2E  347C 0000 10449          move.w    #0,A2
                    10450   @doscan_select_2:
00005C32  202E 0010 10451          move.l    16(A6),D0
00005C36  53AE 0010 10452          subq.l    #1,16(A6)
00005C3A  4A80      10453          tst.l     D0
00005C3C  6700 00F4 10454          beq       @doscan_select_5
00005C40  2F2E 0008 10455          move.l    8(A6),-(A7)
00005C44  4EB8 5AF4 10456          jsr       @doscan_read
00005C48  584F      10457          addq.w    #4,A7
00005C4A  2800      10458          move.l    D0,D4
00005C4C  0C84 FFFF 10459          cmp.l     #-1,D4
00005C50  FFFF      
00005C52  6604      10460          bne.s     @doscan_select_6
00005C54  6000 00DC 10461          bra       @doscan_select_5
                    10462   @doscan_select_6:
00005C58  206E 001C 10463          move.l    28(A6),A0
00005C5C  5290      10464          addq.l    #1,(A0)
00005C5E  4285      10465          clr.l     D5
00005C60  4282      10466          clr.l     D2
                    10467   @doscan_select_8:
00005C62  2043      10468          move.l    D3,A0
00005C64  1030 2800 10469          move.b    0(A0,D2.L),D0
00005C68  0C00 005D 10470          cmp.b     #93,D0
00005C6C  6700 0086 10471          beq       @doscan_select_10
00005C70  4A82      10472          tst.l     D2
00005C72  6710      10473          beq.s     @doscan_select_11
00005C74  2043      10474          move.l    D3,A0
00005C76  1030 2800 10475          move.b    0(A0,D2.L),D0
00005C7A  0C00 005D 10476          cmp.b     #93,D0
00005C7E  6604      10477          bne.s     @doscan_select_11
00005C80  6000 0072 10478          bra       @doscan_select_10
                    10479   @doscan_select_11:
00005C84  4A82      10480          tst.l     D2
00005C86  6700 0056 10481          beq       @doscan_select_15
00005C8A  2043      10482          move.l    D3,A0
00005C8C  1030 2800 10483          move.b    0(A0,D2.L),D0
00005C90  0C00 002D 10484          cmp.b     #45,D0
00005C94  6600 0048 10485          bne       @doscan_select_15
00005C98  2043      10486          move.l    D3,A0
00005C9A  2002      10487          move.l    D2,D0
00005C9C  5380      10488          subq.l    #1,D0
00005C9E  2243      10489          move.l    D3,A1
00005CA0  2202      10490          move.l    D2,D1
00005CA2  5281      10491          addq.l    #1,D1
00005CA4  2F00      10492          move.l    D0,-(A7)
00005CA6  1030 0800 10493          move.b    0(A0,D0.L),D0
00005CAA  B031 1800 10494          cmp.b     0(A1,D1.L),D0
00005CAE  6C00 002E 10495          bge       @doscan_select_15
00005CB2  201F      10496          move.l    (A7)+,D0
00005CB4  2043      10497          move.l    D3,A0
00005CB6  2002      10498          move.l    D2,D0
00005CB8  5380      10499          subq.l    #1,D0
00005CBA  1030 0800 10500          move.b    0(A0,D0.L),D0
00005CBE  4880      10501          ext.w     D0
00005CC0  48C0      10502          ext.l     D0
00005CC2  B880      10503          cmp.l     D0,D4
00005CC4  6D14      10504          blt.s     @doscan_select_17
00005CC6  2043      10505          move.l    D3,A0
00005CC8  2002      10506          move.l    D2,D0
00005CCA  5280      10507          addq.l    #1,D0
00005CCC  1030 0800 10508          move.b    0(A0,D0.L),D0
00005CD0  4880      10509          ext.w     D0
00005CD2  48C0      10510          ext.l     D0
00005CD4  B880      10511          cmp.l     D0,D4
00005CD6  6E02      10512          bgt.s     @doscan_select_17
00005CD8  601A      10513          bra.s     @doscan_select_10
                    10514   @doscan_select_17:
00005CDA  5282      10515          addq.l    #1,D2
00005CDC  6010      10516          bra.s     @doscan_select_19
                    10517   @doscan_select_15:
00005CDE  2043      10518          move.l    D3,A0
00005CE0  1030 2800 10519          move.b    0(A0,D2.L),D0
00005CE4  4880      10520          ext.w     D0
00005CE6  48C0      10521          ext.l     D0
00005CE8  B880      10522          cmp.l     D0,D4
00005CEA  6602      10523          bne.s     @doscan_select_19
00005CEC  6006      10524          bra.s     @doscan_select_10
                    10525   @doscan_select_19:
00005CEE  5282      10526          addq.l    #1,D2
00005CF0  6000 FF70 10527          bra       @doscan_select_8
                    10528   @doscan_select_10:
00005CF4  4A82      10529          tst.l     D2
00005CF6  670C      10530          beq.s     @doscan_select_23
00005CF8  2043      10531          move.l    D3,A0
00005CFA  1030 2800 10532          move.b    0(A0,D2.L),D0
00005CFE  0C00 005D 10533          cmp.b     #93,D0
00005D02  6702      10534          beq.s     @doscan_select_21
                    10535   @doscan_select_23:
00005D04  7A01      10536          moveq     #1,D5
                    10537   @doscan_select_21:
00005D06  200A      10538          move.l    A2,D0
00005D08  6712      10539          beq.s     @doscan_select_24
00005D0A  4A85      10540          tst.l     D5
00005D0C  660C      10541          bne.s     @doscan_select_26
00005D0E  4A87      10542          tst.l     D7
00005D10  6606      10543          bne.s     @doscan_select_28
00005D12  2046      10544          move.l    D6,A0
00005D14  5286      10545          addq.l    #1,D6
00005D16  1084      10546          move.b    D4,(A0)
                    10547   @doscan_select_28:
00005D18  6014      10548          bra.s     @doscan_select_4
                    10549   @doscan_select_26:
00005D1A  6016      10550          bra.s     @doscan_select_5
                    10551   @doscan_select_24:
00005D1C  4A85      10552          tst.l     D5
00005D1E  670C      10553          beq.s     @doscan_select_30
00005D20  4A87      10554          tst.l     D7
00005D22  6606      10555          bne.s     @doscan_select_32
00005D24  2046      10556          move.l    D6,A0
00005D26  5286      10557          addq.l    #1,D6
00005D28  1084      10558          move.b    D4,(A0)
                    10559   @doscan_select_32:
00005D2A  6002      10560          bra.s     @doscan_select_4
                    10561   @doscan_select_30:
00005D2C  6004      10562          bra.s     @doscan_select_5
                    10563   @doscan_select_4:
00005D2E  6000 FF02 10564          bra       @doscan_select_2
                    10565   @doscan_select_5:
00005D32  0C84 FFFF 10566          cmp.l     #-1,D4
00005D36  FFFF      
00005D38  6712      10567          beq.s     @doscan_select_34
00005D3A  2F04      10568          move.l    D4,-(A7)
00005D3C  2F2E 0008 10569          move.l    8(A6),-(A7)
00005D40  4EB8 5B70 10570          jsr       @doscan_putback
00005D44  504F      10571          addq.w    #8,A7
00005D46  206E 001C 10572          move.l    28(A6),A0
00005D4A  5390      10573          subq.l    #1,(A0)
                    10574   @doscan_select_34:
00005D4C  4A87      10575          tst.l     D7
00005D4E  6604      10576          bne.s     @doscan_select_36
00005D50  2046      10577          move.l    D6,A0
00005D52  4210      10578          clr.b     (A0)
                    10579   @doscan_select_36:
00005D54  5283      10580          addq.l    #1,D3
00005D56  2043      10581          move.l    D3,A0
00005D58  1010      10582          move.b    (A0),D0
00005D5A  0C00 005D 10583          cmp.b     #93,D0
00005D5E  6702      10584          beq.s     @doscan_select_40
00005D60  60F2      10585          bra       @doscan_select_36
                    10586   @doscan_select_40:
00005D62  5283      10587          addq.l    #1,D3
00005D64  2003      10588          move.l    D3,D0
00005D66  4CDF 04FC 10589          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2
00005D6A  4E5E      10590          unlk      A6
00005D6C  4E75      10591          rts
                    10592   _scanflush:
00005D6E  41F9 0803 10593          lea       @doscan_buf.L,A0
00005D72  05AA      
00005D74  23C8 0000 10594          move.l    A0,@doscan_lpbuf.L
00005D78  8686      
00005D7A  4239 0803 10595          clr.b     @doscan_buf.L
00005D7E  05AA      
00005D80  4878 FFFF 10596          pea       -1
00005D84  4EB9 0000 10597          jsr       _ungetch
00005D88  6BDE      
00005D8A  584F      10598          addq.w    #4,A7
00005D8C  4E75      10599          rts
                    10600   _doscan:
00005D8E  4E56 FF88 10601          link      A6,#-120
00005D92  48E7 3F3C 10602          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00005D96  47F8 5AF4 10603          lea       @doscan_read.L,A3
00005D9A  4AAE 0008 10604          tst.l     8(A6)
00005D9E  6706      10605          beq.s     doscan_1
00005DA0  41EE 0008 10606          lea       8(A6),A0
00005DA4  6008      10607          bra.s     doscan_2
                    10608   doscan_1:
00005DA6  4200      10609          clr.b     D0
00005DA8  4880      10610          ext.w     D0
00005DAA  48C0      10611          ext.l     D0
00005DAC  2040      10612          move.l    D0,A0
                    10613   doscan_2:
00005DAE  2A08      10614          move.l    A0,D5
00005DB0  42AE FFE4 10615          clr.l     -28(A6)
00005DB4  4284      10616          clr.l     D4
                    10617   doscan_3:
00005DB6  206E 000C 10618          move.l    12(A6),A0
00005DBA  52AE 000C 10619          addq.l    #1,12(A6)
00005DBE  1010      10620          move.b    (A0),D0
00005DC0  4880      10621          ext.w     D0
00005DC2  48C0      10622          ext.l     D0
00005DC4  2600      10623          move.l    D0,D3
00005DC6  4201      10624          clr.b     D1
00005DC8  C2BC 0000 10625          and.l     #255,D1
00005DCC  00FF      
00005DCE  B081      10626          cmp.l     D1,D0
00005DD0  6700 05F2 10627          beq       doscan_5
00005DD4  4286      10628          clr.l     D6
00005DD6  387C 0000 10629          move.w    #0,A4
00005DDA  0C83 0000 10630          cmp.l     #32,D3
00005DDE  0020      
00005DE0  6712      10631          beq.s     doscan_8
00005DE2  0C83 0000 10632          cmp.l     #9,D3
00005DE6  0009      
00005DE8  670A      10633          beq.s     doscan_8
00005DEA  0C83 0000 10634          cmp.l     #10,D3
00005DEE  000A      
00005DF0  6600 004E 10635          bne       doscan_6
                    10636   doscan_8:
00005DF4  2F05      10637          move.l    D5,-(A7)
00005DF6  4E93      10638          jsr       (A3)
00005DF8  584F      10639          addq.w    #4,A7
00005DFA  2400      10640          move.l    D0,D2
00005DFC  52AE FFE4 10641          addq.l    #1,-28(A6)
00005E00  0C82 FFFF 10642          cmp.l     #-1,D2
00005E04  FFFF      
00005E06  6612      10643          bne.s     doscan_11
00005E08  4A84      10644          tst.l     D4
00005E0A  6704      10645          beq.s     doscan_13
00005E0C  2004      10646          move.l    D4,D0
00005E0E  6006      10647          bra.s     doscan_14
                    10648   doscan_13:
00005E10  70FF      10649          moveq     #-1,D0
00005E12  4880      10650          ext.w     D0
00005E14  48C0      10651          ext.l     D0
                    10652   doscan_14:
00005E16  6000 05AE 10653          bra       doscan_15
                    10654   doscan_11:
00005E1A  2002      10655          move.l    D2,D0
00005E1C  5280      10656          addq.l    #1,D0
00005E1E  41F9 0000 10657          lea       __ctype.L,A0
00005E22  8578      
00005E24  1030 0800 10658          move.b    0(A0,D0.L),D0
00005E28  C03C 0010 10659          and.b     #16,D0
00005E2C  66C6      10660          bne       doscan_8
00005E2E  53AE FFE4 10661          subq.l    #1,-28(A6)
00005E32  2F02      10662          move.l    D2,-(A7)
00005E34  2F05      10663          move.l    D5,-(A7)
00005E36  4EB8 5B70 10664          jsr       @doscan_putback
00005E3A  504F      10665          addq.w    #8,A7
00005E3C  6000 0582 10666          bra       doscan_141
                    10667   doscan_6:
00005E40  0C83 0000 10668          cmp.l     #37,D3
00005E44  0025      
00005E46  6600 053E 10669          bne       doscan_129
00005E4A  206E 000C 10670          move.l    12(A6),A0
00005E4E  52AE 000C 10671          addq.l    #1,12(A6)
00005E52  1010      10672          move.b    (A0),D0
00005E54  4880      10673          ext.w     D0
00005E56  48C0      10674          ext.l     D0
00005E58  2600      10675          move.l    D0,D3
00005E5A  42AE FFEC 10676          clr.l     -20(A6)
00005E5E  4286      10677          clr.l     D6
00005E60  42AE FFE8 10678          clr.l     -24(A6)
00005E64  347C 7FFF 10679          move.w    #32767,A2
00005E68  0C83 0000 10680          cmp.l     #42,D3
00005E6C  002A      
00005E6E  6612      10681          bne.s     doscan_18
00005E70  7C01      10682          moveq     #1,D6
00005E72  206E 000C 10683          move.l    12(A6),A0
00005E76  52AE 000C 10684          addq.l    #1,12(A6)
00005E7A  1010      10685          move.b    (A0),D0
00005E7C  4880      10686          ext.w     D0
00005E7E  48C0      10687          ext.l     D0
00005E80  2600      10688          move.l    D0,D3
                    10689   doscan_18:
00005E82  2003      10690          move.l    D3,D0
00005E84  5280      10691          addq.l    #1,D0
00005E86  41F9 0000 10692          lea       __ctype.L,A0
00005E8A  8578      
00005E8C  1030 0800 10693          move.b    0(A0,D0.L),D0
00005E90  C03C 0004 10694          and.b     #4,D0
00005E94  6700 004C 10695          beq       doscan_24
00005E98  2003      10696          move.l    D3,D0
00005E9A  0480 0000 10697          sub.l     #48,D0
00005E9E  0030      
00005EA0  2440      10698          move.l    D0,A2
                    10699   doscan_22:
00005EA2  206E 000C 10700          move.l    12(A6),A0
00005EA6  52AE 000C 10701          addq.l    #1,12(A6)
00005EAA  1010      10702          move.b    (A0),D0
00005EAC  4880      10703          ext.w     D0
00005EAE  48C0      10704          ext.l     D0
00005EB0  2600      10705          move.l    D0,D3
00005EB2  5280      10706          addq.l    #1,D0
00005EB4  41F9 0000 10707          lea       __ctype.L,A0
00005EB8  8578      
00005EBA  1030 0800 10708          move.b    0(A0,D0.L),D0
00005EBE  C03C 0004 10709          and.b     #4,D0
00005EC2  671E      10710          beq.s     doscan_24
00005EC4  2F0A      10711          move.l    A2,-(A7)
00005EC6  4878 000A 10712          pea       10
00005ECA  4EB9 0000 10713          jsr       LMUL
00005ECE  6ADE      
00005ED0  2017      10714          move.l    (A7),D0
00005ED2  504F      10715          addq.w    #8,A7
00005ED4  2203      10716          move.l    D3,D1
00005ED6  0481 0000 10717          sub.l     #48,D1
00005EDA  0030      
00005EDC  D081      10718          add.l     D1,D0
00005EDE  2440      10719          move.l    D0,A2
00005EE0  60C0      10720          bra       doscan_22
                    10721   doscan_24:
00005EE2  0C83 0000 10722          cmp.l     #108,D3
00005EE6  006C      
00005EE8  6708      10723          beq.s     doscan_27
00005EEA  0C83 0000 10724          cmp.l     #76,D3
00005EEE  004C      
00005EF0  661A      10725          bne.s     doscan_25
                    10726   doscan_27:
00005EF2  2D7C 0000 10727          move.l    #1,-24(A6)
00005EF6  0001 FFE8 
00005EFA  206E 000C 10728          move.l    12(A6),A0
00005EFE  52AE 000C 10729          addq.l    #1,12(A6)
00005F02  1010      10730          move.b    (A0),D0
00005F04  4880      10731          ext.w     D0
00005F06  48C0      10732          ext.l     D0
00005F08  2600      10733          move.l    D0,D3
00005F0A  6020      10734          bra.s     doscan_28
                    10735   doscan_25:
00005F0C  0C83 0000 10736          cmp.l     #104,D3
00005F10  0068      
00005F12  6618      10737          bne.s     doscan_28
00005F14  2D7C 0000 10738          move.l    #1,-20(A6)
00005F18  0001 FFEC 
00005F1C  206E 000C 10739          move.l    12(A6),A0
00005F20  52AE 000C 10740          addq.l    #1,12(A6)
00005F24  1010      10741          move.b    (A0),D0
00005F26  4880      10742          ext.w     D0
00005F28  48C0      10743          ext.l     D0
00005F2A  2600      10744          move.l    D0,D3
                    10745   doscan_28:
00005F2C  0C83 0000 10746          cmp.l     #91,D3
00005F30  005B      
00005F32  6600 0036 10747          bne       doscan_30
00005F36  4A86      10748          tst.l     D6
00005F38  660A      10749          bne.s     doscan_32
00005F3A  206E 0010 10750          move.l    16(A6),A0
00005F3E  58AE 0010 10751          addq.l    #4,16(A6)
00005F42  2E10      10752          move.l    (A0),D7
                    10753   doscan_32:
00005F44  486E FFE4 10754          pea       -28(A6)
00005F48  2F07      10755          move.l    D7,-(A7)
00005F4A  2F06      10756          move.l    D6,-(A7)
00005F4C  2F0A      10757          move.l    A2,-(A7)
00005F4E  2F2E 000C 10758          move.l    12(A6),-(A7)
00005F52  2F05      10759          move.l    D5,-(A7)
00005F54  4EB8 5C08 10760          jsr       @doscan_select
00005F58  DEFC 0018 10761          add.w     #24,A7
00005F5C  2D40 000C 10762          move.l    D0,12(A6)
00005F60  4A86      10763          tst.l     D6
00005F62  6602      10764          bne.s     doscan_34
00005F64  5284      10765          addq.l    #1,D4
                    10766   doscan_34:
00005F66  6000 0458 10767          bra       doscan_141
                    10768   doscan_30:
00005F6A  0C83 0000 10769          cmp.l     #110,D3
00005F6E  006E      
00005F70  661A      10770          bne.s     doscan_36
00005F72  4A86      10771          tst.l     D6
00005F74  6612      10772          bne.s     doscan_38
00005F76  206E 0010 10773          move.l    16(A6),A0
00005F7A  58AE 0010 10774          addq.l    #4,16(A6)
00005F7E  2E10      10775          move.l    (A0),D7
00005F80  2047      10776          move.l    D7,A0
00005F82  20AE FFE4 10777          move.l    -28(A6),(A0)
00005F86  5284      10778          addq.l    #1,D4
                    10779   doscan_38:
00005F88  6000 0436 10780          bra       doscan_141
                    10781   doscan_36:
00005F8C  0C83 0000 10782          cmp.l     #115,D3
00005F90  0073      
00005F92  6600 00C0 10783          bne       doscan_40
00005F96  486E FFE4 10784          pea       -28(A6)
00005F9A  2F05      10785          move.l    D5,-(A7)
00005F9C  4EB8 5BD4 10786          jsr       @doscan_space
00005FA0  504F      10787          addq.w    #8,A7
00005FA2  2400      10788          move.l    D0,D2
00005FA4  4A86      10789          tst.l     D6
00005FA6  660A      10790          bne.s     doscan_42
00005FA8  206E 0010 10791          move.l    16(A6),A0
00005FAC  58AE 0010 10792          addq.l    #4,16(A6)
00005FB0  2E10      10793          move.l    (A0),D7
                    10794   doscan_42:
00005FB2  52AE FFE4 10795          addq.l    #1,-28(A6)
                    10796   doscan_44:
00005FB6  200A      10797          move.l    A2,D0
00005FB8  534A      10798          subq.w    #1,A2
00005FBA  4A80      10799          tst.l     D0
00005FBC  6700 0048 10800          beq       doscan_46
00005FC0  2002      10801          move.l    D2,D0
00005FC2  5280      10802          addq.l    #1,D0
00005FC4  41F9 0000 10803          lea       __ctype.L,A0
00005FC8  8578      
00005FCA  1030 0800 10804          move.b    0(A0,D0.L),D0
00005FCE  C03C 0010 10805          and.b     #16,D0
00005FD2  6604      10806          bne.s     doscan_47
00005FD4  7001      10807          moveq     #1,D0
00005FD6  6002      10808          bra.s     doscan_48
                    10809   doscan_47:
00005FD8  4280      10810          clr.l     D0
                    10811   doscan_48:
00005FDA  C0BC 0000 10812          and.l     #255,D0
00005FDE  00FF      
00005FE0  6724      10813          beq.s     doscan_46
00005FE2  0C82 FFFF 10814          cmp.l     #-1,D2
00005FE6  FFFF      
00005FE8  671C      10815          beq.s     doscan_46
00005FEA  387C 0001 10816          move.w    #1,A4
00005FEE  4A86      10817          tst.l     D6
00005FF0  6606      10818          bne.s     doscan_49
00005FF2  2047      10819          move.l    D7,A0
00005FF4  5287      10820          addq.l    #1,D7
00005FF6  1082      10821          move.b    D2,(A0)
                    10822   doscan_49:
00005FF8  2F05      10823          move.l    D5,-(A7)
00005FFA  4E93      10824          jsr       (A3)
00005FFC  584F      10825          addq.w    #4,A7
00005FFE  2400      10826          move.l    D0,D2
00006000  52AE FFE4 10827          addq.l    #1,-28(A6)
00006004  60B0      10828          bra       doscan_44
                    10829   doscan_46:
00006006  4A86      10830          tst.l     D6
00006008  660A      10831          bne.s     doscan_53
0000600A  2047      10832          move.l    D7,A0
0000600C  4210      10833          clr.b     (A0)
0000600E  200C      10834          move.l    A4,D0
00006010  6702      10835          beq.s     doscan_53
00006012  5284      10836          addq.l    #1,D4
                    10837   doscan_53:
00006014  0C82 FFFF 10838          cmp.l     #-1,D2
00006018  FFFF      
0000601A  6708      10839          beq.s     doscan_57
0000601C  4A86      10840          tst.l     D6
0000601E  6622      10841          bne.s     doscan_55
00006020  200C      10842          move.l    A4,D0
00006022  661E      10843          bne.s     doscan_55
                    10844   doscan_57:
00006024  4A84      10845          tst.l     D4
00006026  6704      10846          beq.s     doscan_58
00006028  2004      10847          move.l    D4,D0
0000602A  6012      10848          bra.s     doscan_61
                    10849   doscan_58:
0000602C  0C82 FFFF 10850          cmp.l     #-1,D2
00006030  FFFF      
00006032  6608      10851          bne.s     doscan_60
00006034  70FF      10852          moveq     #-1,D0
00006036  4880      10853          ext.w     D0
00006038  48C0      10854          ext.l     D0
0000603A  6002      10855          bra.s     doscan_61
                    10856   doscan_60:
0000603C  2004      10857          move.l    D4,D0
                    10858   doscan_61:
0000603E  6000 0386 10859          bra       doscan_15
                    10860   doscan_55:
00006042  53AE FFE4 10861          subq.l    #1,-28(A6)
00006046  2F02      10862          move.l    D2,-(A7)
00006048  2F05      10863          move.l    D5,-(A7)
0000604A  4EB8 5B70 10864          jsr       @doscan_putback
0000604E  504F      10865          addq.w    #8,A7
00006050  6000 036E 10866          bra       doscan_141
                    10867   doscan_40:
00006054  0C83 0000 10868          cmp.l     #99,D3
00006058  0063      
0000605A  6600 0092 10869          bne       doscan_62
0000605E  4A86      10870          tst.l     D6
00006060  660A      10871          bne.s     doscan_64
00006062  206E 0010 10872          move.l    16(A6),A0
00006066  58AE 0010 10873          addq.l    #4,16(A6)
0000606A  2E10      10874          move.l    (A0),D7
                    10875   doscan_64:
0000606C  2F05      10876          move.l    D5,-(A7)
0000606E  4E93      10877          jsr       (A3)
00006070  584F      10878          addq.w    #4,A7
00006072  2400      10879          move.l    D0,D2
00006074  52AE FFE4 10880          addq.l    #1,-28(A6)
00006078  200A      10881          move.l    A2,D0
0000607A  0C80 0000 10882          cmp.l     #32767,D0
0000607E  7FFF      
00006080  6604      10883          bne.s     doscan_66
00006082  347C 0001 10884          move.w    #1,A2
                    10885   doscan_66:
00006086  0C82 FFFF 10886          cmp.l     #-1,D2
0000608A  FFFF      
0000608C  6606      10887          bne.s     doscan_68
0000608E  4A86      10888          tst.l     D6
00006090  6602      10889          bne.s     doscan_68
00006092  5384      10890          subq.l    #1,D4
                    10891   doscan_68:
00006094  200A      10892          move.l    A2,D0
00006096  534A      10893          subq.w    #1,A2
00006098  4A80      10894          tst.l     D0
0000609A  6720      10895          beq.s     doscan_72
0000609C  0C82 FFFF 10896          cmp.l     #-1,D2
000060A0  FFFF      
000060A2  6718      10897          beq.s     doscan_72
000060A4  4A86      10898          tst.l     D6
000060A6  6606      10899          bne.s     doscan_73
000060A8  2047      10900          move.l    D7,A0
000060AA  5287      10901          addq.l    #1,D7
000060AC  1082      10902          move.b    D2,(A0)
                    10903   doscan_73:
000060AE  2F05      10904          move.l    D5,-(A7)
000060B0  4E93      10905          jsr       (A3)
000060B2  584F      10906          addq.w    #4,A7
000060B4  2400      10907          move.l    D0,D2
000060B6  52AE FFE4 10908          addq.l    #1,-28(A6)
000060BA  60D8      10909          bra       doscan_68
                    10910   doscan_72:
000060BC  0C82 FFFF 10911          cmp.l     #-1,D2
000060C0  FFFF      
000060C2  6612      10912          bne.s     doscan_75
000060C4  4A84      10913          tst.l     D4
000060C6  6704      10914          beq.s     doscan_77
000060C8  2004      10915          move.l    D4,D0
000060CA  6006      10916          bra.s     doscan_78
                    10917   doscan_77:
000060CC  70FF      10918          moveq     #-1,D0
000060CE  4880      10919          ext.w     D0
000060D0  48C0      10920          ext.l     D0
                    10921   doscan_78:
000060D2  6000 02F2 10922          bra       doscan_15
                    10923   doscan_75:
000060D6  4A86      10924          tst.l     D6
000060D8  6602      10925          bne.s     doscan_79
000060DA  5284      10926          addq.l    #1,D4
                    10927   doscan_79:
000060DC  53AE FFE4 10928          subq.l    #1,-28(A6)
000060E0  2F02      10929          move.l    D2,-(A7)
000060E2  2F05      10930          move.l    D5,-(A7)
000060E4  4EB8 5B70 10931          jsr       @doscan_putback
000060E8  504F      10932          addq.w    #8,A7
000060EA  6000 02D4 10933          bra       doscan_141
                    10934   doscan_62:
000060EE  0C83 0000 10935          cmp.l     #105,D3
000060F2  0069      
000060F4  6600 0060 10936          bne       doscan_84
000060F8  486E FFE4 10937          pea       -28(A6)
000060FC  2F05      10938          move.l    D5,-(A7)
000060FE  4EB8 5BD4 10939          jsr       @doscan_space
00006102  504F      10940          addq.w    #8,A7
00006104  2400      10941          move.l    D0,D2
00006106  0C82 0000 10942          cmp.l     #48,D2
0000610A  0030      
0000610C  6600 0038 10943          bne       doscan_83
00006110  387C 0001 10944          move.w    #1,A4
00006114  2F05      10945          move.l    D5,-(A7)
00006116  4E93      10946          jsr       (A3)
00006118  584F      10947          addq.w    #4,A7
0000611A  2400      10948          move.l    D0,D2
0000611C  2F02      10949          move.l    D2,-(A7)
0000611E  4EB8 5A44 10950          jsr       _tolower
00006122  584F      10951          addq.w    #4,A7
00006124  0C80 0000 10952          cmp.l     #120,D0
00006128  0078      
0000612A  6604      10953          bne.s     doscan_85
0000612C  7678      10954          moveq     #120,D3
0000612E  6010      10955          bra.s     doscan_86
                    10956   doscan_85:
00006130  53AE FFE4 10957          subq.l    #1,-28(A6)
00006134  2F02      10958          move.l    D2,-(A7)
00006136  2F05      10959          move.l    D5,-(A7)
00006138  4EB8 5B70 10960          jsr       @doscan_putback
0000613C  504F      10961          addq.w    #8,A7
0000613E  766F      10962          moveq     #111,D3
                    10963   doscan_86:
00006140  52AE FFE4 10964          addq.l    #1,-28(A6)
00006144  6010      10965          bra.s     doscan_84
                    10966   doscan_83:
00006146  53AE FFE4 10967          subq.l    #1,-28(A6)
0000614A  2F02      10968          move.l    D2,-(A7)
0000614C  2F05      10969          move.l    D5,-(A7)
0000614E  4EB8 5B70 10970          jsr       @doscan_putback
00006152  504F      10971          addq.w    #8,A7
00006154  7664      10972          moveq     #100,D3
                    10973   doscan_84:
00006156  0C83 0000 10974          cmp.l     #100,D3
0000615A  0064      
0000615C  671A      10975          beq.s     doscan_89
0000615E  0C83 0000 10976          cmp.l     #117,D3
00006162  0075      
00006164  6712      10977          beq.s     doscan_89
00006166  0C83 0000 10978          cmp.l     #120,D3
0000616A  0078      
0000616C  670A      10979          beq.s     doscan_89
0000616E  0C83 0000 10980          cmp.l     #111,D3
00006172  006F      
00006174  6600 01C4 10981          bne       doscan_87
                    10982   doscan_89:
00006178  486E FFE4 10983          pea       -28(A6)
0000617C  2F05      10984          move.l    D5,-(A7)
0000617E  4EB8 5BD4 10985          jsr       @doscan_space
00006182  504F      10986          addq.w    #8,A7
00006184  2400      10987          move.l    D0,D2
00006186  2D7C 0000 10988          move.l    #10,-4(A6)
0000618A  000A FFFC 
0000618E  0C83 0000 10989          cmp.l     #120,D3
00006192  0078      
00006194  6608      10990          bne.s     doscan_90
00006196  2D7C 0000 10991          move.l    #16,-4(A6)
0000619A  0010 FFFC 
                    10992   doscan_90:
0000619E  0C83 0000 10993          cmp.l     #111,D3
000061A2  006F      
000061A4  6608      10994          bne.s     doscan_92
000061A6  2D7C 0000 10995          move.l    #8,-4(A6)
000061AA  0008 FFFC 
                    10996   doscan_92:
000061AE  4A86      10997          tst.l     D6
000061B0  660A      10998          bne.s     doscan_94
000061B2  206E 0010 10999          move.l    16(A6),A0
000061B6  58AE 0010 11000          addq.l    #4,16(A6)
000061BA  2E10      11001          move.l    (A0),D7
                    11002   doscan_94:
000061BC  42AE FFE0 11003          clr.l     -32(A6)
000061C0  52AE FFE4 11004          addq.l    #1,-28(A6)
000061C4  0C83 0000 11005          cmp.l     #117,D3
000061C8  0075      
000061CA  6720      11006          beq.s     doscan_96
000061CC  0C82 0000 11007          cmp.l     #45,D2
000061D0  002D      
000061D2  6618      11008          bne.s     doscan_96
000061D4  2F05      11009          move.l    D5,-(A7)
000061D6  4E93      11010          jsr       (A3)
000061D8  584F      11011          addq.w    #4,A7
000061DA  2400      11012          move.l    D0,D2
000061DC  52AE FFE4 11013          addq.l    #1,-28(A6)
000061E0  2D7C 0000 11014          move.l    #1,-32(A6)
000061E4  0001 FFE0 
000061E8  387C 0001 11015          move.w    #1,A4
                    11016   doscan_96:
000061EC  3A7C 0000 11017          move.w    #0,A5
000061F0  0C82 FFFF 11018          cmp.l     #-1,D2
000061F4  FFFF      
000061F6  6612      11019          bne.s     doscan_98
000061F8  4A84      11020          tst.l     D4
000061FA  6704      11021          beq.s     doscan_100
000061FC  2004      11022          move.l    D4,D0
000061FE  6006      11023          bra.s     doscan_101
                    11024   doscan_100:
00006200  70FF      11025          moveq     #-1,D0
00006202  4880      11026          ext.w     D0
00006204  48C0      11027          ext.l     D0
                    11028   doscan_101:
00006206  6000 01BE 11029          bra       doscan_15
                    11030   doscan_98:
0000620A  200A      11031          move.l    A2,D0
0000620C  534A      11032          subq.w    #1,A2
0000620E  4A80      11033          tst.l     D0
00006210  6700 00A4 11034          beq       doscan_104
00006214  0C83 0000 11035          cmp.l     #120,D3
00006218  0078      
0000621A  6620      11036          bne.s     doscan_106
0000621C  2F02      11037          move.l    D2,-(A7)
0000621E  4EB8 5AA8 11038          jsr       _toupper
00006222  584F      11039          addq.w    #4,A7
00006224  0C80 0000 11040          cmp.l     #65,D0
00006228  0041      
0000622A  6D10      11041          blt.s     doscan_106
0000622C  2F02      11042          move.l    D2,-(A7)
0000622E  4EB8 5AA8 11043          jsr       _toupper
00006232  584F      11044          addq.w    #4,A7
00006234  0C80 0000 11045          cmp.l     #70,D0
00006238  0046      
0000623A  6F1C      11046          ble.s     doscan_105
                    11047   doscan_106:
0000623C  2002      11048          move.l    D2,D0
0000623E  5280      11049          addq.l    #1,D0
00006240  41F9 0000 11050          lea       __ctype.L,A0
00006244  8578      
00006246  1030 0800 11051          move.b    0(A0,D0.L),D0
0000624A  C03C 0004 11052          and.b     #4,D0
0000624E  C0BC 0000 11053          and.l     #255,D0
00006252  00FF      
00006254  6700 0060 11054          beq       doscan_104
                    11055   doscan_105:
00006258  2002      11056          move.l    D2,D0
0000625A  5280      11057          addq.l    #1,D0
0000625C  41F9 0000 11058          lea       __ctype.L,A0
00006260  8578      
00006262  1030 0800 11059          move.b    0(A0,D0.L),D0
00006266  C03C 0004 11060          and.b     #4,D0
0000626A  661C      11061          bne.s     doscan_107
0000626C  2F02      11062          move.l    D2,-(A7)
0000626E  4EB8 5AA8 11063          jsr       _toupper
00006272  584F      11064          addq.w    #4,A7
00006274  0480 0000 11065          sub.l     #65,D0
00006278  0041      
0000627A  0680 0000 11066          add.l     #10,D0
0000627E  000A      
00006280  0680 0000 11067          add.l     #48,D0
00006284  0030      
00006286  2400      11068          move.l    D0,D2
                    11069   doscan_107:
00006288  2F0D      11070          move.l    A5,-(A7)
0000628A  2F2E FFFC 11071          move.l    -4(A6),-(A7)
0000628E  4EB9 0000 11072          jsr       LMUL
00006292  6ADE      
00006294  2017      11073          move.l    (A7),D0
00006296  504F      11074          addq.w    #8,A7
00006298  D082      11075          add.l     D2,D0
0000629A  0480 0000 11076          sub.l     #48,D0
0000629E  0030      
000062A0  2A40      11077          move.l    D0,A5
000062A2  2F05      11078          move.l    D5,-(A7)
000062A4  4E93      11079          jsr       (A3)
000062A6  584F      11080          addq.w    #4,A7
000062A8  2400      11081          move.l    D0,D2
000062AA  52AE FFE4 11082          addq.l    #1,-28(A6)
000062AE  387C 0001 11083          move.w    #1,A4
000062B2  6000 FF56 11084          bra       doscan_98
                    11085   doscan_104:
000062B6  0C82 FFFF 11086          cmp.l     #-1,D2
000062BA  FFFF      
000062BC  671A      11087          beq.s     doscan_109
000062BE  2F02      11088          move.l    D2,-(A7)
000062C0  2F05      11089          move.l    D5,-(A7)
000062C2  4EB8 5B70 11090          jsr       @doscan_putback
000062C6  504F      11091          addq.w    #8,A7
000062C8  53AE FFE4 11092          subq.l    #1,-28(A6)
000062CC  200C      11093          move.l    A4,D0
000062CE  6606      11094          bne.s     doscan_111
000062D0  2004      11095          move.l    D4,D0
000062D2  6000 00F2 11096          bra       doscan_15
                    11097   doscan_111:
000062D6  6016      11098          bra.s     doscan_113
                    11099   doscan_109:
000062D8  200C      11100          move.l    A4,D0
000062DA  6612      11101          bne.s     doscan_113
000062DC  4A84      11102          tst.l     D4
000062DE  6704      11103          beq.s     doscan_115
000062E0  2004      11104          move.l    D4,D0
000062E2  6006      11105          bra.s     doscan_116
                    11106   doscan_115:
000062E4  70FF      11107          moveq     #-1,D0
000062E6  4880      11108          ext.w     D0
000062E8  48C0      11109          ext.l     D0
                    11110   doscan_116:
000062EA  6000 00DA 11111          bra       doscan_15
                    11112   doscan_113:
000062EE  4AAE FFE0 11113          tst.l     -32(A6)
000062F2  6706      11114          beq.s     doscan_117
000062F4  200D      11115          move.l    A5,D0
000062F6  4480      11116          neg.l     D0
000062F8  2A40      11117          move.l    D0,A5
                    11118   doscan_117:
000062FA  4A86      11119          tst.l     D6
000062FC  661E      11120          bne.s     doscan_119
000062FE  4AAE FFE8 11121          tst.l     -24(A6)
00006302  6706      11122          beq.s     doscan_121
00006304  2047      11123          move.l    D7,A0
00006306  208D      11124          move.l    A5,(A0)
00006308  6010      11125          bra.s     doscan_124
                    11126   doscan_121:
0000630A  4AAE FFEC 11127          tst.l     -20(A6)
0000630E  6706      11128          beq.s     doscan_123
00006310  2047      11129          move.l    D7,A0
00006312  308D      11130          move.w    A5,(A0)
00006314  6004      11131          bra.s     doscan_124
                    11132   doscan_123:
00006316  2047      11133          move.l    D7,A0
00006318  208D      11134          move.l    A5,(A0)
                    11135   doscan_124:
0000631A  5284      11136          addq.l    #1,D4
                    11137   doscan_119:
0000631C  0C82 FFFF 11138          cmp.l     #-1,D2
00006320  FFFF      
00006322  6612      11139          bne.s     doscan_125
00006324  4A84      11140          tst.l     D4
00006326  6704      11141          beq.s     doscan_127
00006328  2004      11142          move.l    D4,D0
0000632A  6006      11143          bra.s     doscan_128
                    11144   doscan_127:
0000632C  70FF      11145          moveq     #-1,D0
0000632E  4880      11146          ext.w     D0
00006330  48C0      11147          ext.l     D0
                    11148   doscan_128:
00006332  6000 0092 11149          bra       doscan_15
                    11150   doscan_125:
00006336  6000 0088 11151          bra       doscan_141
                    11152   doscan_87:
0000633A  0C83 0000 11153          cmp.l     #37,D3
0000633E  0025      
00006340  6600 0044 11154          bne       doscan_129
00006344  2F05      11155          move.l    D5,-(A7)
00006346  4E93      11156          jsr       (A3)
00006348  584F      11157          addq.w    #4,A7
0000634A  2400      11158          move.l    D0,D2
0000634C  0C82 FFFF 11159          cmp.l     #-1,D2
00006350  FFFF      
00006352  6612      11160          bne.s     doscan_131
00006354  4A84      11161          tst.l     D4
00006356  6704      11162          beq.s     doscan_133
00006358  2004      11163          move.l    D4,D0
0000635A  6006      11164          bra.s     doscan_134
                    11165   doscan_133:
0000635C  70FF      11166          moveq     #-1,D0
0000635E  4880      11167          ext.w     D0
00006360  48C0      11168          ext.l     D0
                    11169   doscan_134:
00006362  6000 0062 11170          bra       doscan_15
                    11171   doscan_131:
00006366  52AE FFE4 11172          addq.l    #1,-28(A6)
0000636A  B483      11173          cmp.l     D3,D2
0000636C  6714      11174          beq.s     doscan_135
0000636E  2F02      11175          move.l    D2,-(A7)
00006370  2F05      11176          move.l    D5,-(A7)
00006372  4EB8 5B70 11177          jsr       @doscan_putback
00006376  504F      11178          addq.w    #8,A7
00006378  53AE FFE4 11179          subq.l    #1,-28(A6)
0000637C  2004      11180          move.l    D4,D0
0000637E  6000 0046 11181          bra       doscan_15
                    11182   doscan_135:
00006382  6000 003C 11183          bra       doscan_141
                    11184   doscan_129:
00006386  2F05      11185          move.l    D5,-(A7)
00006388  4E93      11186          jsr       (A3)
0000638A  584F      11187          addq.w    #4,A7
0000638C  2400      11188          move.l    D0,D2
0000638E  52AE FFE4 11189          addq.l    #1,-28(A6)
00006392  0C82 FFFF 11190          cmp.l     #-1,D2
00006396  FFFF      
00006398  6610      11191          bne.s     doscan_137
0000639A  4A84      11192          tst.l     D4
0000639C  6704      11193          beq.s     doscan_139
0000639E  2004      11194          move.l    D4,D0
000063A0  6006      11195          bra.s     doscan_140
                    11196   doscan_139:
000063A2  70FF      11197          moveq     #-1,D0
000063A4  4880      11198          ext.w     D0
000063A6  48C0      11199          ext.l     D0
                    11200   doscan_140:
000063A8  601C      11201          bra.s     doscan_15
                    11202   doscan_137:
000063AA  B483      11203          cmp.l     D3,D2
000063AC  6712      11204          beq.s     doscan_141
000063AE  2F02      11205          move.l    D2,-(A7)
000063B0  2F05      11206          move.l    D5,-(A7)
000063B2  4EB8 5B70 11207          jsr       @doscan_putback
000063B6  504F      11208          addq.w    #8,A7
000063B8  53AE FFE4 11209          subq.l    #1,-28(A6)
000063BC  2004      11210          move.l    D4,D0
000063BE  6006      11211          bra.s     doscan_15
                    11212   doscan_141:
000063C0  6000 F9F4 11213          bra       doscan_3
                    11214   doscan_5:
000063C4  2004      11215          move.l    D4,D0
                    11216   doscan_15:
000063C6  4CDF 3CFC 11217          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000063CA  4E5E      11218          unlk      A6
000063CC  4E75      11219          rts
                    11220   _printf:
000063CE  4E56 FFFC 11221          link      A6,#-4
000063D2  2F02      11222          move.l    D2,-(A7)
000063D4  41EE 0008 11223          lea       8(A6),A0
000063D8  5848      11224          addq.w    #4,A0
000063DA  2408      11225          move.l    A0,D2
000063DC  2F02      11226          move.l    D2,-(A7)
000063DE  2F2E 0008 11227          move.l    8(A6),-(A7)
000063E2  42A7      11228          clr.l     -(A7)
000063E4  4EB9 0000 11229          jsr       _doprint
000063E8  64A4      
000063EA  DEFC 000C 11230          add.w     #12,A7
000063EE  2D40 FFFC 11231          move.l    D0,-4(A6)
000063F2  4282      11232          clr.l     D2
000063F4  202E FFFC 11233          move.l    -4(A6),D0
000063F8  241F      11234          move.l    (A7)+,D2
000063FA  4E5E      11235          unlk      A6
000063FC  4E75      11236          rts
                    11237   @doprint_copy:
000063FE  4E56 0000 11238          link      A6,#0
00006402  206E 0008 11239          move.l    8(A6),A0
00006406  4A90      11240          tst.l     (A0)
00006408  6710      11241          beq.s     @doprint_copy_1
0000640A  202E 000C 11242          move.l    12(A6),D0
0000640E  206E 0008 11243          move.l    8(A6),A0
00006412  2250      11244          move.l    (A0),A1
00006414  5290      11245          addq.l    #1,(A0)
00006416  1280      11246          move.b    D0,(A1)
00006418  600A      11247          bra.s     @doprint_copy_2
                    11248   @doprint_copy_1:
0000641A  2F2E 000C 11249          move.l    12(A6),-(A7)
0000641E  4EB8 59E0 11250          jsr       _putch
00006422  584F      11251          addq.w    #4,A7
                    11252   @doprint_copy_2:
00006424  4E5E      11253          unlk      A6
00006426  4E75      11254          rts
                    11255   @doprint_getval:
00006428  4E56 0000 11256          link      A6,#0
0000642C  48E7 3000 11257          movem.l   D2/D3,-(A7)
00006430  262E 0008 11258          move.l    8(A6),D3
00006434  4282      11259          clr.l     D2
00006436  2043      11260          move.l    D3,A0
00006438  2050      11261          move.l    (A0),A0
0000643A  1010      11262          move.b    (A0),D0
0000643C  0C00 002A 11263          cmp.b     #42,D0
00006440  6612      11264          bne.s     @doprint_getval_1
00006442  206E 000C 11265          move.l    12(A6),A0
00006446  2250      11266          move.l    (A0),A1
00006448  5890      11267          addq.l    #4,(A0)
0000644A  2411      11268          move.l    (A1),D2
0000644C  2043      11269          move.l    D3,A0
0000644E  5290      11270          addq.l    #1,(A0)
00006450  6000 0048 11271          bra       @doprint_getval_5
                    11272   @doprint_getval_1:
00006454  7001      11273          moveq     #1,D0
00006456  2043      11274          move.l    D3,A0
00006458  2050      11275          move.l    (A0),A0
0000645A  1210      11276          move.b    (A0),D1
0000645C  4881      11277          ext.w     D1
0000645E  48C1      11278          ext.l     D1
00006460  D081      11279          add.l     D1,D0
00006462  41F9 0000 11280          lea       __ctype.L,A0
00006466  8578      
00006468  1030 0800 11281          move.b    0(A0,D0.L),D0
0000646C  C03C 0004 11282          and.b     #4,D0
00006470  6728      11283          beq.s     @doprint_getval_5
00006472  2F02      11284          move.l    D2,-(A7)
00006474  4878 000A 11285          pea       10
00006478  4EB9 0000 11286          jsr       LMUL
0000647C  6ADE      
0000647E  2017      11287          move.l    (A7),D0
00006480  504F      11288          addq.w    #8,A7
00006482  2043      11289          move.l    D3,A0
00006484  2250      11290          move.l    (A0),A1
00006486  5290      11291          addq.l    #1,(A0)
00006488  1211      11292          move.b    (A1),D1
0000648A  4881      11293          ext.w     D1
0000648C  48C1      11294          ext.l     D1
0000648E  D081      11295          add.l     D1,D0
00006490  0480 0000 11296          sub.l     #48,D0
00006494  0030      
00006496  2400      11297          move.l    D0,D2
00006498  60BA      11298          bra       @doprint_getval_1
                    11299   @doprint_getval_5:
0000649A  2002      11300          move.l    D2,D0
0000649C  4CDF 000C 11301          movem.l   (A7)+,D2/D3
000064A0  4E5E      11302          unlk      A6
000064A2  4E75      11303          rts
                    11304   _doprint:
000064A4  4E56 FFCC 11305          link      A6,#-52
000064A8  48E7 3F3C 11306          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000064AC  45EE 0008 11307          lea       8(A6),A2
000064B0  47F8 63FE 11308          lea       @doprint_copy.L,A3
000064B4  49F9 0000 11309          lea       _ultoa.L,A4
000064B8  6CF2      
000064BA  4286      11310          clr.l     D6
                    11311   doprint_1:
000064BC  206E 000C 11312          move.l    12(A6),A0
000064C0  4A10      11313          tst.b     (A0)
000064C2  6700 05EA 11314          beq       doprint_3
000064C6  206E 000C 11315          move.l    12(A6),A0
000064CA  1010      11316          move.b    (A0),D0
000064CC  0C00 0025 11317          cmp.b     #37,D0
000064D0  671C      11318          beq.s     doprint_4
000064D2  206E 000C 11319          move.l    12(A6),A0
000064D6  52AE 000C 11320          addq.l    #1,12(A6)
000064DA  1210      11321          move.b    (A0),D1
000064DC  4881      11322          ext.w     D1
000064DE  48C1      11323          ext.l     D1
000064E0  2F01      11324          move.l    D1,-(A7)
000064E2  2F0A      11325          move.l    A2,-(A7)
000064E4  4E93      11326          jsr       (A3)
000064E6  504F      11327          addq.w    #8,A7
000064E8  5286      11328          addq.l    #1,D6
000064EA  6000 05BE 11329          bra       doprint_2
                    11330   doprint_4:
000064EE  52AE 000C 11331          addq.l    #1,12(A6)
000064F2  422E FFD3 11332          clr.b     -45(A6)
000064F6  422E FFD2 11333          clr.b     -46(A6)
000064FA  422E FFD0 11334          clr.b     -48(A6)
000064FE  422E FFCF 11335          clr.b     -49(A6)
00006502  422E FFCE 11336          clr.b     -50(A6)
00006506  422E FFCD 11337          clr.b     -51(A6)
0000650A  42AE FFFC 11338          clr.l     -4(A6)
0000650E  7AFF      11339          moveq     #-1,D5
00006510  41EE FFDC 11340          lea       -36(A6),A0
00006514  2608      11341          move.l    A0,D3
00006516  2408      11342          move.l    A0,D2
                    11343   doprint_6:
00006518  206E 000C 11344          move.l    12(A6),A0
0000651C  1010      11345          move.b    (A0),D0
0000651E  4880      11346          ext.w     D0
00006520  48C0      11347          ext.l     D0
00006522  0C80 0000 11348          cmp.l     #43,D0
00006526  002B      
00006528  6730      11349          beq.s     doprint_12
0000652A  6E18      11350          bgt.s     doprint_15
0000652C  0C80 0000 11351          cmp.l     #35,D0
00006530  0023      
00006532  6700 003E 11352          beq       doprint_14
00006536  6E00 0046 11353          bgt       doprint_9
0000653A  0C80 0000 11354          cmp.l     #32,D0
0000653E  0020      
00006540  6724      11355          beq.s     doprint_13
00006542  603A      11356          bra.s     doprint_9
                    11357   doprint_15:
00006544  0C80 0000 11358          cmp.l     #45,D0
00006548  002D      
0000654A  6702      11359          beq.s     doprint_11
0000654C  6030      11360          bra.s     doprint_9
                    11361   doprint_11:
0000654E  1D7C 0001 11362          move.b    #1,-51(A6)
00006552  FFCD      
00006554  52AE 000C 11363          addq.l    #1,12(A6)
00006558  6026      11364          bra.s     doprint_7
                    11365   doprint_12:
0000655A  1D7C 0001 11366          move.b    #1,-50(A6)
0000655E  FFCE      
00006560  52AE 000C 11367          addq.l    #1,12(A6)
00006564  601A      11368          bra.s     doprint_7
                    11369   doprint_13:
00006566  1D7C 0001 11370          move.b    #1,-49(A6)
0000656A  FFCF      
0000656C  52AE 000C 11371          addq.l    #1,12(A6)
00006570  600E      11372          bra.s     doprint_7
                    11373   doprint_14:
00006572  1D7C 0001 11374          move.b    #1,-48(A6)
00006576  FFD0      
00006578  52AE 000C 11375          addq.l    #1,12(A6)
0000657C  6002      11376          bra.s     doprint_7
                    11377   doprint_9:
0000657E  6002      11378          bra.s     doprint_8
                    11379   doprint_7:
00006580  6096      11380          bra       doprint_6
                    11381   doprint_8:
00006582  206E 000C 11382          move.l    12(A6),A0
00006586  1010      11383          move.b    (A0),D0
00006588  0C00 0030 11384          cmp.b     #48,D0
0000658C  660A      11385          bne.s     doprint_16
0000658E  52AE 000C 11386          addq.l    #1,12(A6)
00006592  1D7C 0001 11387          move.b    #1,-46(A6)
00006596  FFD2      
                    11388   doprint_16:
00006598  486E 0010 11389          pea       16(A6)
0000659C  486E 000C 11390          pea       12(A6)
000065A0  4EB8 6428 11391          jsr       @doprint_getval
000065A4  504F      11392          addq.w    #8,A7
000065A6  2A40      11393          move.l    D0,A5
000065A8  206E 000C 11394          move.l    12(A6),A0
000065AC  1010      11395          move.b    (A0),D0
000065AE  0C00 002E 11396          cmp.b     #46,D0
000065B2  6614      11397          bne.s     doprint_18
000065B4  52AE 000C 11398          addq.l    #1,12(A6)
000065B8  486E 0010 11399          pea       16(A6)
000065BC  486E 000C 11400          pea       12(A6)
000065C0  4EB8 6428 11401          jsr       @doprint_getval
000065C4  504F      11402          addq.w    #8,A7
000065C6  2A00      11403          move.l    D0,D5
                    11404   doprint_18:
000065C8  206E 000C 11405          move.l    12(A6),A0
000065CC  1010      11406          move.b    (A0),D0
000065CE  0C00 006C 11407          cmp.b     #108,D0
000065D2  660A      11408          bne.s     doprint_20
000065D4  52AE 000C 11409          addq.l    #1,12(A6)
000065D8  1D7C 0001 11410          move.b    #1,-45(A6)
000065DC  FFD3      
                    11411   doprint_20:
000065DE  206E 000C 11412          move.l    12(A6),A0
000065E2  1010      11413          move.b    (A0),D0
000065E4  4880      11414          ext.w     D0
000065E6  48C0      11415          ext.l     D0
000065E8  0C80 0000 11416          cmp.l     #111,D0
000065EC  006F      
000065EE  6700 00D8 11417          beq       doprint_27
000065F2  6E34      11418          bgt.s     doprint_33
000065F4  0C80 0000 11419          cmp.l     #100,D0
000065F8  0064      
000065FA  6700 0054 11420          beq       doprint_24
000065FE  6E1C      11421          bgt.s     doprint_34
00006600  0C80 0000 11422          cmp.l     #99,D0
00006604  0063      
00006606  6700 0130 11423          beq       doprint_30
0000660A  6E00 0174 11424          bgt       doprint_22
0000660E  0C80 0000 11425          cmp.l     #88,D0
00006612  0058      
00006614  6700 00EA 11426          beq       doprint_28
00006618  6000 0166 11427          bra       doprint_22
                    11428   doprint_34:
0000661C  0C80 0000 11429          cmp.l     #105,D0
00006620  0069      
00006622  672C      11430          beq.s     doprint_24
00006624  6000 015A 11431          bra       doprint_22
                    11432   doprint_33:
00006628  0C80 0000 11433          cmp.l     #117,D0
0000662C  0075      
0000662E  6700 0060 11434          beq       doprint_26
00006632  6E0E      11435          bgt.s     doprint_35
00006634  0C80 0000 11436          cmp.l     #115,D0
00006638  0073      
0000663A  6700 0124 11437          beq       doprint_31
0000663E  6000 0140 11438          bra       doprint_22
                    11439   doprint_35:
00006642  0C80 0000 11440          cmp.l     #120,D0
00006646  0078      
00006648  6700 00B6 11441          beq       doprint_28
0000664C  6000 0132 11442          bra       doprint_22
                    11443   doprint_24:
00006650  4A2E FFD3 11444          tst.b     -45(A6)
00006654  671C      11445          beq.s     doprint_36
00006656  4878 000A 11446          pea       10
0000665A  2F03      11447          move.l    D3,-(A7)
0000665C  206E 0010 11448          move.l    16(A6),A0
00006660  58AE 0010 11449          addq.l    #4,16(A6)
00006664  2F10      11450          move.l    (A0),-(A7)
00006666  4EB9 0000 11451          jsr       _ltoa
0000666A  6C6E      
0000666C  DEFC 000C 11452          add.w     #12,A7
00006670  601A      11453          bra.s     doprint_37
                    11454   doprint_36:
00006672  4878 000A 11455          pea       10
00006676  2F03      11456          move.l    D3,-(A7)
00006678  206E 0010 11457          move.l    16(A6),A0
0000667C  58AE 0010 11458          addq.l    #4,16(A6)
00006680  2F10      11459          move.l    (A0),-(A7)
00006682  4EB9 0000 11460          jsr       _ltoa
00006686  6C6E      
00006688  DEFC 000C 11461          add.w     #12,A7
                    11462   doprint_37:
0000668C  6000 0100 11463          bra       doprint_23
                    11464   doprint_26:
00006690  4A2E FFD3 11465          tst.b     -45(A6)
00006694  6718      11466          beq.s     doprint_38
00006696  4878 000A 11467          pea       10
0000669A  2F03      11468          move.l    D3,-(A7)
0000669C  206E 0010 11469          move.l    16(A6),A0
000066A0  58AE 0010 11470          addq.l    #4,16(A6)
000066A4  2F10      11471          move.l    (A0),-(A7)
000066A6  4E94      11472          jsr       (A4)
000066A8  DEFC 000C 11473          add.w     #12,A7
000066AC  6016      11474          bra.s     doprint_39
                    11475   doprint_38:
000066AE  4878 000A 11476          pea       10
000066B2  2F03      11477          move.l    D3,-(A7)
000066B4  206E 0010 11478          move.l    16(A6),A0
000066B8  58AE 0010 11479          addq.l    #4,16(A6)
000066BC  2F10      11480          move.l    (A0),-(A7)
000066BE  4E94      11481          jsr       (A4)
000066C0  DEFC 000C 11482          add.w     #12,A7
                    11483   doprint_39:
000066C4  6000 00C8 11484          bra       doprint_23
                    11485   doprint_27:
000066C8  4A2E FFD3 11486          tst.b     -45(A6)
000066CC  6718      11487          beq.s     doprint_40
000066CE  4878 0008 11488          pea       8
000066D2  2F03      11489          move.l    D3,-(A7)
000066D4  206E 0010 11490          move.l    16(A6),A0
000066D8  58AE 0010 11491          addq.l    #4,16(A6)
000066DC  2F10      11492          move.l    (A0),-(A7)
000066DE  4E94      11493          jsr       (A4)
000066E0  DEFC 000C 11494          add.w     #12,A7
000066E4  6016      11495          bra.s     doprint_41
                    11496   doprint_40:
000066E6  4878 0008 11497          pea       8
000066EA  2F03      11498          move.l    D3,-(A7)
000066EC  206E 0010 11499          move.l    16(A6),A0
000066F0  58AE 0010 11500          addq.l    #4,16(A6)
000066F4  2F10      11501          move.l    (A0),-(A7)
000066F6  4E94      11502          jsr       (A4)
000066F8  DEFC 000C 11503          add.w     #12,A7
                    11504   doprint_41:
000066FC  6000 0090 11505          bra       doprint_23
                    11506   doprint_28:
00006700  4A2E FFD3 11507          tst.b     -45(A6)
00006704  6718      11508          beq.s     doprint_42
00006706  4878 0010 11509          pea       16
0000670A  2F03      11510          move.l    D3,-(A7)
0000670C  206E 0010 11511          move.l    16(A6),A0
00006710  58AE 0010 11512          addq.l    #4,16(A6)
00006714  2F10      11513          move.l    (A0),-(A7)
00006716  4E94      11514          jsr       (A4)
00006718  DEFC 000C 11515          add.w     #12,A7
0000671C  6016      11516          bra.s     doprint_43
                    11517   doprint_42:
0000671E  4878 0010 11518          pea       16
00006722  2F03      11519          move.l    D3,-(A7)
00006724  206E 0010 11520          move.l    16(A6),A0
00006728  58AE 0010 11521          addq.l    #4,16(A6)
0000672C  2F10      11522          move.l    (A0),-(A7)
0000672E  4E94      11523          jsr       (A4)
00006730  DEFC 000C 11524          add.w     #12,A7
                    11525   doprint_43:
00006734  6000 0058 11526          bra       doprint_23
                    11527   doprint_30:
00006738  206E 0010 11528          move.l    16(A6),A0
0000673C  58AE 0010 11529          addq.l    #4,16(A6)
00006740  2010      11530          move.l    (A0),D0
00006742  2042      11531          move.l    D2,A0
00006744  5282      11532          addq.l    #1,D2
00006746  1080      11533          move.b    D0,(A0)
00006748  2042      11534          move.l    D2,A0
0000674A  4210      11535          clr.b     (A0)
0000674C  200D      11536          move.l    A5,D0
0000674E  6704      11537          beq.s     doprint_44
00006750  200D      11538          move.l    A5,D0
00006752  6006      11539          bra.s     doprint_45
                    11540   doprint_44:
00006754  7001      11541          moveq     #1,D0
00006756  4880      11542          ext.w     D0
00006758  48C0      11543          ext.l     D0
                    11544   doprint_45:
0000675A  2A00      11545          move.l    D0,D5
0000675C  6000 0030 11546          bra       doprint_23
                    11547   doprint_31:
00006760  206E 0010 11548          move.l    16(A6),A0
00006764  58AE 0010 11549          addq.l    #4,16(A6)
00006768  2610      11550          move.l    (A0),D3
0000676A  0C85 FFFF 11551          cmp.l     #-1,D5
0000676E  FFFF      
00006770  660C      11552          bne.s     doprint_46
00006772  2F03      11553          move.l    D3,-(A7)
00006774  4EB9 0000 11554          jsr       _strlen
00006778  6D54      
0000677A  584F      11555          addq.w    #4,A7
0000677C  2A00      11556          move.l    D0,D5
                    11557   doprint_46:
0000677E  600E      11558          bra.s     doprint_23
                    11559   doprint_22:
00006780  206E 000C 11560          move.l    12(A6),A0
00006784  2242      11561          move.l    D2,A1
00006786  5282      11562          addq.l    #1,D2
00006788  1290      11563          move.b    (A0),(A1)
0000678A  2042      11564          move.l    D2,A0
0000678C  4210      11565          clr.b     (A0)
                    11566   doprint_23:
0000678E  2F03      11567          move.l    D3,-(A7)
00006790  4EB9 0000 11568          jsr       _strlen
00006794  6D54      
00006796  584F      11569          addq.w    #4,A7
00006798  1800      11570          move.b    D0,D4
0000679A  206E 000C 11571          move.l    12(A6),A0
0000679E  1010      11572          move.b    (A0),D0
000067A0  0C00 0073 11573          cmp.b     #115,D0
000067A4  661C      11574          bne.s     doprint_48
000067A6  0C85 0000 11575          cmp.l     #0,D5
000067AA  0000      
000067AC  6D14      11576          blt.s     doprint_48
000067AE  4884      11577          ext.w     D4
000067B0  48C4      11578          ext.l     D4
000067B2  B885      11579          cmp.l     D5,D4
000067B4  6F04      11580          ble.s     doprint_50
000067B6  2005      11581          move.l    D5,D0
000067B8  6006      11582          bra.s     doprint_51
                    11583   doprint_50:
000067BA  1004      11584          move.b    D4,D0
000067BC  4880      11585          ext.w     D0
000067BE  48C0      11586          ext.l     D0
                    11587   doprint_51:
000067C0  1800      11588          move.b    D0,D4
                    11589   doprint_48:
000067C2  206E 000C 11590          move.l    12(A6),A0
000067C6  1010      11591          move.b    (A0),D0
000067C8  0C00 0058 11592          cmp.b     #88,D0
000067CC  6600 0026 11593          bne       doprint_56
000067D0  41EE FFDC 11594          lea       -36(A6),A0
000067D4  2408      11595          move.l    A0,D2
                    11596   doprint_54:
000067D6  2042      11597          move.l    D2,A0
000067D8  4A10      11598          tst.b     (A0)
000067DA  6718      11599          beq.s     doprint_56
000067DC  2042      11600          move.l    D2,A0
000067DE  1210      11601          move.b    (A0),D1
000067E0  4881      11602          ext.w     D1
000067E2  48C1      11603          ext.l     D1
000067E4  2F01      11604          move.l    D1,-(A7)
000067E6  4EB8 5AA8 11605          jsr       _toupper
000067EA  584F      11606          addq.w    #4,A7
000067EC  2042      11607          move.l    D2,A0
000067EE  1080      11608          move.b    D0,(A0)
000067F0  5282      11609          addq.l    #1,D2
000067F2  60E2      11610          bra       doprint_54
                    11611   doprint_56:
000067F4  7E00      11612          moveq     #0,D7
000067F6  41EE FFD4 11613          lea       -44(A6),A0
000067FA  2408      11614          move.l    A0,D2
000067FC  206E 000C 11615          move.l    12(A6),A0
00006800  1010      11616          move.b    (A0),D0
00006802  0C00 0064 11617          cmp.b     #100,D0
00006806  670E      11618          beq.s     doprint_59
00006808  206E 000C 11619          move.l    12(A6),A0
0000680C  1010      11620          move.b    (A0),D0
0000680E  0C00 0069 11621          cmp.b     #105,D0
00006812  6600 0068 11622          bne       doprint_65
                    11623   doprint_59:
00006816  102E FFCE 11624          move.b    -50(A6),D0
0000681A  4880      11625          ext.w     D0
0000681C  48C0      11626          ext.l     D0
0000681E  4A80      11627          tst.l     D0
00006820  660C      11628          bne.s     doprint_62
00006822  2043      11629          move.l    D3,A0
00006824  1010      11630          move.b    (A0),D0
00006826  0C00 002D 11631          cmp.b     #45,D0
0000682A  6600 0028 11632          bne       doprint_60
                    11633   doprint_62:
0000682E  2043      11634          move.l    D3,A0
00006830  1010      11635          move.b    (A0),D0
00006832  0C00 002D 11636          cmp.b     #45,D0
00006836  660E      11637          bne.s     doprint_63
00006838  2043      11638          move.l    D3,A0
0000683A  5283      11639          addq.l    #1,D3
0000683C  2242      11640          move.l    D2,A1
0000683E  5282      11641          addq.l    #1,D2
00006840  1290      11642          move.b    (A0),(A1)
00006842  5304      11643          subq.b    #1,D4
00006844  6008      11644          bra.s     doprint_64
                    11645   doprint_63:
00006846  2042      11646          move.l    D2,A0
00006848  5282      11647          addq.l    #1,D2
0000684A  10BC 002B 11648          move.b    #43,(A0)
                    11649   doprint_64:
0000684E  5287      11650          addq.l    #1,D7
00006850  6000 002A 11651          bra       doprint_65
                    11652   doprint_60:
00006854  4A2E FFCF 11653          tst.b     -49(A6)
00006858  6722      11654          beq.s     doprint_65
0000685A  2043      11655          move.l    D3,A0
0000685C  1010      11656          move.b    (A0),D0
0000685E  0C00 002D 11657          cmp.b     #45,D0
00006862  660E      11658          bne.s     doprint_67
00006864  2043      11659          move.l    D3,A0
00006866  5283      11660          addq.l    #1,D3
00006868  2242      11661          move.l    D2,A1
0000686A  5282      11662          addq.l    #1,D2
0000686C  1290      11663          move.b    (A0),(A1)
0000686E  5304      11664          subq.b    #1,D4
00006870  6008      11665          bra.s     doprint_68
                    11666   doprint_67:
00006872  2042      11667          move.l    D2,A0
00006874  5282      11668          addq.l    #1,D2
00006876  10BC 0020 11669          move.b    #32,(A0)
                    11670   doprint_68:
0000687A  5287      11671          addq.l    #1,D7
                    11672   doprint_65:
0000687C  4A2E FFD0 11673          tst.b     -48(A6)
00006880  6700 005A 11674          beq       doprint_77
00006884  206E 000C 11675          move.l    12(A6),A0
00006888  1010      11676          move.b    (A0),D0
0000688A  4880      11677          ext.w     D0
0000688C  48C0      11678          ext.l     D0
0000688E  0C80 0000 11679          cmp.l     #111,D0
00006892  006F      
00006894  671A      11680          beq.s     doprint_73
00006896  6E0C      11681          bgt.s     doprint_76
00006898  0C80 0000 11682          cmp.l     #88,D0
0000689C  0058      
0000689E  6710      11683          beq.s     doprint_73
000068A0  6000 003A 11684          bra       doprint_77
                    11685   doprint_76:
000068A4  0C80 0000 11686          cmp.l     #120,D0
000068A8  0078      
000068AA  6704      11687          beq.s     doprint_73
000068AC  6000 002E 11688          bra       doprint_77
                    11689   doprint_73:
000068B0  2042      11690          move.l    D2,A0
000068B2  5282      11691          addq.l    #1,D2
000068B4  10BC 0030 11692          move.b    #48,(A0)
000068B8  5287      11693          addq.l    #1,D7
000068BA  206E 000C 11694          move.l    12(A6),A0
000068BE  1010      11695          move.b    (A0),D0
000068C0  0C00 0078 11696          cmp.b     #120,D0
000068C4  670C      11697          beq.s     doprint_79
000068C6  206E 000C 11698          move.l    12(A6),A0
000068CA  1010      11699          move.b    (A0),D0
000068CC  0C00 0058 11700          cmp.b     #88,D0
000068D0  660A      11701          bne.s     doprint_77
                    11702   doprint_79:
000068D2  2042      11703          move.l    D2,A0
000068D4  5282      11704          addq.l    #1,D2
000068D6  10BC 0078 11705          move.b    #120,(A0)
000068DA  5287      11706          addq.l    #1,D7
                    11707   doprint_77:
000068DC  2042      11708          move.l    D2,A0
000068DE  4210      11709          clr.b     (A0)
000068E0  206E 000C 11710          move.l    12(A6),A0
000068E4  1010      11711          move.b    (A0),D0
000068E6  4880      11712          ext.w     D0
000068E8  48C0      11713          ext.l     D0
000068EA  0C80 0000 11714          cmp.l     #105,D0
000068EE  0069      
000068F0  6700 0076 11715          beq       doprint_82
000068F4  6E42      11716          bgt.s     doprint_93
000068F6  0C80 0000 11717          cmp.l     #99,D0
000068FA  0063      
000068FC  6700 0084 11718          beq       doprint_96
00006900  6E1C      11719          bgt.s     doprint_94
00006902  0C80 0000 11720          cmp.l     #88,D0
00006906  0058      
00006908  6700 005E 11721          beq       doprint_82
0000690C  6E00 0184 11722          bgt       doprint_80
00006910  0C80 0000 11723          cmp.l     #69,D0
00006914  0045      
00006916  6700 0050 11724          beq       doprint_82
0000691A  6000 0176 11725          bra       doprint_80
                    11726   doprint_94:
0000691E  0C80 0000 11727          cmp.l     #101,D0
00006922  0065      
00006924  6700 0042 11728          beq       doprint_82
00006928  6E00 0168 11729          bgt       doprint_80
0000692C  0C80 0000 11730          cmp.l     #100,D0
00006930  0064      
00006932  6734      11731          beq.s     doprint_82
00006934  6000 015C 11732          bra       doprint_80
                    11733   doprint_93:
00006938  0C80 0000 11734          cmp.l     #117,D0
0000693C  0075      
0000693E  6728      11735          beq.s     doprint_82
00006940  6E1A      11736          bgt.s     doprint_95
00006942  0C80 0000 11737          cmp.l     #115,D0
00006946  0073      
00006948  6700 0038 11738          beq       doprint_96
0000694C  6E00 0144 11739          bgt       doprint_80
00006950  0C80 0000 11740          cmp.l     #111,D0
00006954  006F      
00006956  6710      11741          beq.s     doprint_82
00006958  6000 0138 11742          bra       doprint_80
                    11743   doprint_95:
0000695C  0C80 0000 11744          cmp.l     #120,D0
00006960  0078      
00006962  6704      11745          beq.s     doprint_82
00006964  6000 012C 11746          bra       doprint_80
                    11747   doprint_82:
00006968  4A2E FFD2 11748          tst.b     -46(A6)
0000696C  6714      11749          beq.s     doprint_96
0000696E  4A2E FFCD 11750          tst.b     -51(A6)
00006972  660E      11751          bne.s     doprint_96
00006974  200D      11752          move.l    A5,D0
00006976  9087      11753          sub.l     D7,D0
00006978  4884      11754          ext.w     D4
0000697A  48C4      11755          ext.l     D4
0000697C  9084      11756          sub.l     D4,D0
0000697E  2D40 FFFC 11757          move.l    D0,-4(A6)
                    11758   doprint_96:
00006982  202E FFFC 11759          move.l    -4(A6),D0
00006986  0C80 0000 11760          cmp.l     #0,D0
0000698A  0000      
0000698C  6C04      11761          bge.s     doprint_98
0000698E  42AE FFFC 11762          clr.l     -4(A6)
                    11763   doprint_98:
00006992  4A2E FFCD 11764          tst.b     -51(A6)
00006996  6600 0030 11765          bne       doprint_104
0000699A  1004      11766          move.b    D4,D0
0000699C  4880      11767          ext.w     D0
0000699E  48C0      11768          ext.l     D0
000069A0  D0AE FFFC 11769          add.l     -4(A6),D0
000069A4  D087      11770          add.l     D7,D0
000069A6  1D40 FFD1 11771          move.b    D0,-47(A6)
                    11772   doprint_102:
000069AA  102E FFD1 11773          move.b    -47(A6),D0
000069AE  4880      11774          ext.w     D0
000069B0  48C0      11775          ext.l     D0
000069B2  220D      11776          move.l    A5,D1
000069B4  534D      11777          subq.w    #1,A5
000069B6  B081      11778          cmp.l     D1,D0
000069B8  6C0E      11779          bge.s     doprint_104
000069BA  4878 0020 11780          pea       32
000069BE  2F0A      11781          move.l    A2,-(A7)
000069C0  4E93      11782          jsr       (A3)
000069C2  504F      11783          addq.w    #8,A7
000069C4  5286      11784          addq.l    #1,D6
000069C6  60E2      11785          bra       doprint_102
                    11786   doprint_104:
000069C8  41EE FFD4 11787          lea       -44(A6),A0
000069CC  2408      11788          move.l    A0,D2
                    11789   doprint_105:
000069CE  2042      11790          move.l    D2,A0
000069D0  4A10      11791          tst.b     (A0)
000069D2  6716      11792          beq.s     doprint_107
000069D4  2042      11793          move.l    D2,A0
000069D6  5282      11794          addq.l    #1,D2
000069D8  1210      11795          move.b    (A0),D1
000069DA  4881      11796          ext.w     D1
000069DC  48C1      11797          ext.l     D1
000069DE  2F01      11798          move.l    D1,-(A7)
000069E0  2F0A      11799          move.l    A2,-(A7)
000069E2  4E93      11800          jsr       (A3)
000069E4  504F      11801          addq.w    #8,A7
000069E6  5286      11802          addq.l    #1,D6
000069E8  60E4      11803          bra       doprint_105
                    11804   doprint_107:
000069EA  202E FFFC 11805          move.l    -4(A6),D0
000069EE  1D40 FFD1 11806          move.b    D0,-47(A6)
                    11807   doprint_108:
000069F2  102E FFD1 11808          move.b    -47(A6),D0
000069F6  532E FFD1 11809          subq.b    #1,-47(A6)
000069FA  4A00      11810          tst.b     D0
000069FC  670E      11811          beq.s     doprint_110
000069FE  4878 0030 11812          pea       48
00006A02  2F0A      11813          move.l    A2,-(A7)
00006A04  4E93      11814          jsr       (A3)
00006A06  504F      11815          addq.w    #8,A7
00006A08  5286      11816          addq.l    #1,D6
00006A0A  60E6      11817          bra       doprint_108
                    11818   doprint_110:
00006A0C  2043      11819          move.l    D3,A0
00006A0E  4A10      11820          tst.b     (A0)
00006A10  6700 0048 11821          beq       doprint_113
00006A14  206E 000C 11822          move.l    12(A6),A0
00006A18  1010      11823          move.b    (A0),D0
00006A1A  4880      11824          ext.w     D0
00006A1C  48C0      11825          ext.l     D0
00006A1E  0C80 0000 11826          cmp.l     #115,D0
00006A22  0073      
00006A24  670C      11827          beq.s     doprint_116
00006A26  6E18      11828          bgt.s     doprint_119
00006A28  0C80 0000 11829          cmp.l     #99,D0
00006A2C  0063      
00006A2E  6702      11830          beq.s     doprint_116
00006A30  600E      11831          bra.s     doprint_119
                    11832   doprint_116:
00006A32  2005      11833          move.l    D5,D0
00006A34  5385      11834          subq.l    #1,D5
00006A36  0C80 0000 11835          cmp.l     #0,D0
00006A3A  0000      
00006A3C  6E02      11836          bgt.s     doprint_119
00006A3E  6016      11837          bra.s     doprint_115
                    11838   doprint_119:
00006A40  2043      11839          move.l    D3,A0
00006A42  5283      11840          addq.l    #1,D3
00006A44  1210      11841          move.b    (A0),D1
00006A46  4881      11842          ext.w     D1
00006A48  48C1      11843          ext.l     D1
00006A4A  2F01      11844          move.l    D1,-(A7)
00006A4C  2F0A      11845          move.l    A2,-(A7)
00006A4E  4E93      11846          jsr       (A3)
00006A50  504F      11847          addq.w    #8,A7
00006A52  5286      11848          addq.l    #1,D6
00006A54  6002      11849          bra.s     doprint_112
                    11850   doprint_115:
00006A56  6002      11851          bra.s     doprint_113
                    11852   doprint_112:
00006A58  60B2      11853          bra       doprint_110
                    11854   doprint_113:
00006A5A  4A2E FFCD 11855          tst.b     -51(A6)
00006A5E  6700 0030 11856          beq       doprint_125
00006A62  1004      11857          move.b    D4,D0
00006A64  4880      11858          ext.w     D0
00006A66  48C0      11859          ext.l     D0
00006A68  D0AE FFFC 11860          add.l     -4(A6),D0
00006A6C  D087      11861          add.l     D7,D0
00006A6E  1D40 FFD1 11862          move.b    D0,-47(A6)
                    11863   doprint_123:
00006A72  102E FFD1 11864          move.b    -47(A6),D0
00006A76  4880      11865          ext.w     D0
00006A78  48C0      11866          ext.l     D0
00006A7A  220D      11867          move.l    A5,D1
00006A7C  534D      11868          subq.w    #1,A5
00006A7E  B081      11869          cmp.l     D1,D0
00006A80  6C0E      11870          bge.s     doprint_125
00006A82  4878 0020 11871          pea       32
00006A86  2F0A      11872          move.l    A2,-(A7)
00006A88  4E93      11873          jsr       (A3)
00006A8A  504F      11874          addq.w    #8,A7
00006A8C  5386      11875          subq.l    #1,D6
00006A8E  60E2      11876          bra       doprint_123
                    11877   doprint_125:
00006A90  6014      11878          bra.s     doprint_81
                    11879   doprint_80:
00006A92  206E 000C 11880          move.l    12(A6),A0
00006A96  1210      11881          move.b    (A0),D1
00006A98  4881      11882          ext.w     D1
00006A9A  48C1      11883          ext.l     D1
00006A9C  2F01      11884          move.l    D1,-(A7)
00006A9E  2F0A      11885          move.l    A2,-(A7)
00006AA0  4E93      11886          jsr       (A3)
00006AA2  504F      11887          addq.w    #8,A7
00006AA4  5286      11888          addq.l    #1,D6
                    11889   doprint_81:
00006AA6  52AE 000C 11890          addq.l    #1,12(A6)
                    11891   doprint_2:
00006AAA  6000 FA10 11892          bra       doprint_1
                    11893   doprint_3:
00006AAE  4A92      11894          tst.l     (A2)
00006AB0  6710      11895          beq.s     doprint_126
00006AB2  4201      11896          clr.b     D1
00006AB4  C2BC 0000 11897          and.l     #255,D1
00006AB8  00FF      
00006ABA  2F01      11898          move.l    D1,-(A7)
00006ABC  2F0A      11899          move.l    A2,-(A7)
00006ABE  4E93      11900          jsr       (A3)
00006AC0  504F      11901          addq.w    #8,A7
                    11902   doprint_126:
00006AC2  2006      11903          move.l    D6,D0
00006AC4  4CDF 3CFC 11904          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00006AC8  4E5E      11905          unlk      A6
00006ACA  4E75      11906          rts
                    11907   ULMUL:
00006ACC  4E56 0000 11908          link    A6,#0
00006AD0  48E7 C000 11909          movem.l D0/D1,-(A7)
00006AD4  222E 0008 11910          move.l  8(A6),D1
00006AD8  202E 000C 11911          move.l  12(A6),D0
00006ADC  602C      11912          bra.s   lmul_3
                    11913   LMUL:
00006ADE  4E56 0000 11914          link    A6,#0
00006AE2  48E7 C000 11915          movem.l D0/D1,-(A7)
00006AE6  222E 0008 11916          move.l  8(A6),D1
00006AEA  202E 000C 11917          move.l  12(A6),D0
00006AEE  4A80      11918          tst.l   D0
00006AF0  6A0A      11919          bpl.s   lmul_1
00006AF2  4480      11920          neg.l   D0
00006AF4  4A81      11921          tst.l   D1
00006AF6  6A0A      11922          bpl.s   lmul_2
00006AF8  4481      11923          neg.l   D1
00006AFA  600E      11924          bra.s   lmul_3
                    11925   lmul_1:
00006AFC  4A81      11926          tst.l   D1
00006AFE  6A0A      11927          bpl.s   lmul_3
00006B00  4481      11928          neg.l   D1
                    11929   lmul_2:
00006B02  6114      11930          bsr.s   domul
00006B04  4481      11931          neg.l   D1
00006B06  4080      11932          negx.l  D0
00006B08  6002      11933          bra.s   lmul_4
                    11934   lmul_3:
00006B0A  610C      11935          bsr.s   domul
                    11936   lmul_4:
00006B0C  2D41 0008 11937          move.l  D1,8(A6)
00006B10  4CDF 0003 11938          movem.l (A7)+,D0/D1
00006B14  4E5E      11939          unlk    A6
00006B16  4E75      11940          rts
                    11941   domul:
00006B18  0C81 0000 11942          cmpi.l  #$FFFF,D1
00006B1C  FFFF      
00006B1E  620C      11943          bhi.s   domul_1
00006B20  0C80 0000 11944          cmpi.l  #$FFFF,D0
00006B24  FFFF      
00006B26  620E      11945          bhi.s   domul_2
00006B28  C2C0      11946          mulu    D0,D1
00006B2A  4E75      11947          rts
                    11948   domul_1:
00006B2C  0C80 0000 11949          cmpi.l  #$FFFF,D0
00006B30  FFFF      
00006B32  6218      11950          bhi.s   domul_4
00006B34  6002      11951          bra.s   domul_3
                    11952   domul_2
00006B36  C141      11953          exg     D0,D1
                    11954   domul_3:
00006B38  2F02      11955          move.l  D2,-(A7)
00006B3A  2401      11956          move.l  D1,D2
00006B3C  4842      11957          swap    D2
00006B3E  C2C0      11958          mulu    D0,D1
00006B40  C4C0      11959          mulu    D0,D2
00006B42  4842      11960          swap    D2
00006B44  4242      11961          clr.w   D2
00006B46  D282      11962          add.l   D2,D1
00006B48  241F      11963          move.l  (A7)+,D2
00006B4A  4E75      11964          rts
                    11965   domul_4:
00006B4C  48E7 3000 11966          movem.l D2/D3,-(A7)
00006B50  2401      11967          move.l  D1,D2
00006B52  2601      11968          move.l  D1,D3
00006B54  C2C0      11969          mulu    D0,D1
00006B56  4842      11970          swap    D2
00006B58  C4C0      11971          mulu    D0,D2
00006B5A  4840      11972          swap    D0
00006B5C  C6C0      11973          mulu    D0,D3
00006B5E  D483      11974          add.l   D3,D2
00006B60  4842      11975          swap    D2
00006B62  4242      11976          clr.w   D2
00006B64  D282      11977          add.l   D2,D1
00006B66  4CDF 000C 11978          movem.l (A7)+,D2/D3
00006B6A  4E75      11979          rts
                    11980   _gets:
00006B6C  4E56 0000 11981          link      A6,#0
00006B70  48E7 3820 11982          movem.l   D2/D3/D4/A2,-(A7)
00006B74  45F8 59E0 11983          lea       _putch.L,A2
00006B78  282E 0008 11984          move.l    8(A6),D4
00006B7C  2404      11985          move.l    D4,D2
                    11986   gets_1:
00006B7E  4EB8 5A0C 11987          jsr       _getch
00006B82  2600      11988          move.l    D0,D3
00006B84  0C80 0000 11989          cmp.l     #10,D0
00006B88  000A      
00006B8A  6700 003C 11990          beq       gets_3
00006B8E  0C83 0000 11991          cmp.l     #8,D3
00006B92  0008      
00006B94  6712      11992          beq.s     gets_4
00006B96  2042      11993          move.l    D2,A0
00006B98  5282      11994          addq.l    #1,D2
00006B9A  1083      11995          move.b    D3,(A0)
00006B9C  4883      11996          ext.w     D3
00006B9E  48C3      11997          ext.l     D3
00006BA0  2F03      11998          move.l    D3,-(A7)
00006BA2  4E92      11999          jsr       (A2)
00006BA4  584F      12000          addq.w    #4,A7
00006BA6  601E      12001          bra.s     gets_6
                    12002   gets_4:
00006BA8  B484      12003          cmp.l     D4,D2
00006BAA  631A      12004          bls.s     gets_6
00006BAC  4878 0008 12005          pea       8
00006BB0  4E92      12006          jsr       (A2)
00006BB2  584F      12007          addq.w    #4,A7
00006BB4  4878 0020 12008          pea       32
00006BB8  4E92      12009          jsr       (A2)
00006BBA  584F      12010          addq.w    #4,A7
00006BBC  4878 0008 12011          pea       8
00006BC0  4E92      12012          jsr       (A2)
00006BC2  584F      12013          addq.w    #4,A7
00006BC4  5382      12014          subq.l    #1,D2
                    12015   gets_6:
00006BC6  60B6      12016          bra       gets_1
                    12017   gets_3:
00006BC8  4878 000A 12018          pea       10
00006BCC  4E92      12019          jsr       (A2)
00006BCE  584F      12020          addq.w    #4,A7
00006BD0  2042      12021          move.l    D2,A0
00006BD2  4210      12022          clr.b     (A0)
00006BD4  2004      12023          move.l    D4,D0
00006BD6  4CDF 041C 12024          movem.l   (A7)+,D2/D3/D4/A2
00006BDA  4E5E      12025          unlk      A6
00006BDC  4E75      12026          rts
                    12027   _ungetch:
00006BDE  4E56 0000 12028          link      A6,#0
00006BE2  23EE 0008 12029          move.l    8(A6),__ungetbuf.L
00006BE6  0803 00C0 
00006BEA  202E 0008 12030          move.l    8(A6),D0
00006BEE  4E5E      12031          unlk      A6
00006BF0  4E75      12032          rts
                    12033   @itoa_convert:
00006BF2  4E56 0000 12034          link      A6,#0
00006BF6  48E7 3C00 12035          movem.l   D2/D3/D4/D5,-(A7)
00006BFA  242E 0008 12036          move.l    8(A6),D2
00006BFE  262E 0010 12037          move.l    16(A6),D3
00006C02  2A2E 000C 12038          move.l    12(A6),D5
00006C06  2F05      12039          move.l    D5,-(A7)
00006C08  2F03      12040          move.l    D3,-(A7)
00006C0A  4EB8 5902 12041          jsr       ULDIV
00006C0E  202F 0004 12042          move.l    4(A7),D0
00006C12  504F      12043          addq.w    #8,A7
00006C14  2800      12044          move.l    D0,D4
00006C16  BA83      12045          cmp.l     D3,D5
00006C18  651C      12046          blo.s     @itoa_convert_1
00006C1A  2F03      12047          move.l    D3,-(A7)
00006C1C  2F05      12048          move.l    D5,-(A7)
00006C1E  2F03      12049          move.l    D3,-(A7)
00006C20  4EB8 5902 12050          jsr       ULDIV
00006C24  2217      12051          move.l    (A7),D1
00006C26  504F      12052          addq.w    #8,A7
00006C28  2F01      12053          move.l    D1,-(A7)
00006C2A  2F02      12054          move.l    D2,-(A7)
00006C2C  4EB8 6BF2 12055          jsr       @itoa_convert
00006C30  DEFC 000C 12056          add.w     #12,A7
00006C34  2400      12057          move.l    D0,D2
                    12058   @itoa_convert_1:
00006C36  0C84 0000 12059          cmp.l     #9,D4
00006C3A  0009      
00006C3C  6E0E      12060          bgt.s     @itoa_convert_3
00006C3E  2004      12061          move.l    D4,D0
00006C40  7230      12062          moveq     #48,D1
00006C42  C2BC 0000 12063          and.l     #255,D1
00006C46  00FF      
00006C48  D081      12064          add.l     D1,D0
00006C4A  6012      12065          bra.s     @itoa_convert_4
                    12066   @itoa_convert_3:
00006C4C  2004      12067          move.l    D4,D0
00006C4E  7261      12068          moveq     #97,D1
00006C50  C2BC 0000 12069          and.l     #255,D1
00006C54  00FF      
00006C56  D081      12070          add.l     D1,D0
00006C58  0480 0000 12071          sub.l     #10,D0
00006C5C  000A      
                    12072   @itoa_convert_4:
00006C5E  2042      12073          move.l    D2,A0
00006C60  1080      12074          move.b    D0,(A0)
00006C62  2002      12075          move.l    D2,D0
00006C64  5280      12076          addq.l    #1,D0
00006C66  4CDF 003C 12077          movem.l   (A7)+,D2/D3/D4/D5
00006C6A  4E5E      12078          unlk      A6
00006C6C  4E75      12079          rts
                    12080   _ltoa:
00006C6E  4E56 0000 12081          link      A6,#0
00006C72  48E7 3C00 12082          movem.l   D2/D3/D4/D5,-(A7)
00006C76  242E 0008 12083          move.l    8(A6),D2
00006C7A  262E 000C 12084          move.l    12(A6),D3
00006C7E  2A2E 0010 12085          move.l    16(A6),D5
00006C82  2803      12086          move.l    D3,D4
00006C84  0C85 0000 12087          cmp.l     #2,D5
00006C88  0002      
00006C8A  6D08      12088          blt.s     ltoa_3
00006C8C  0C85 0000 12089          cmp.l     #36,D5
00006C90  0024      
00006C92  6F06      12090          ble.s     ltoa_1
                    12091   ltoa_3:
00006C94  2003      12092          move.l    D3,D0
00006C96  6000 0052 12093          bra       ltoa_4
                    12094   ltoa_1:
00006C9A  0C85 0000 12095          cmp.l     #10,D5
00006C9E  000A      
00006CA0  6600 0032 12096          bne       ltoa_5
00006CA4  0C82 0000 12097          cmp.l     #0,D2
00006CA8  0000      
00006CAA  6C28      12098          bge.s     ltoa_5
00006CAC  2002      12099          move.l    D2,D0
00006CAE  4480      12100          neg.l     D0
00006CB0  2400      12101          move.l    D0,D2
00006CB2  0C82 0000 12102          cmp.l     #0,D2
00006CB6  0000      
00006CB8  6C12      12103          bge.s     ltoa_7
00006CBA  4879 0000 12104          pea       @itoa_1.L
00006CBE  867A      
00006CC0  2F03      12105          move.l    D3,-(A7)
00006CC2  4EB8 58F2 12106          jsr       _strcpy
00006CC6  504F      12107          addq.w    #8,A7
00006CC8  2003      12108          move.l    D3,D0
00006CCA  601E      12109          bra.s     ltoa_4
                    12110   ltoa_7:
00006CCC  2044      12111          move.l    D4,A0
00006CCE  5284      12112          addq.l    #1,D4
00006CD0  10BC 002D 12113          move.b    #45,(A0)
                    12114   ltoa_5:
00006CD4  2F05      12115          move.l    D5,-(A7)
00006CD6  2F02      12116          move.l    D2,-(A7)
00006CD8  2F04      12117          move.l    D4,-(A7)
00006CDA  4EB8 6BF2 12118          jsr       @itoa_convert
00006CDE  DEFC 000C 12119          add.w     #12,A7
00006CE2  2800      12120          move.l    D0,D4
00006CE4  2044      12121          move.l    D4,A0
00006CE6  4210      12122          clr.b     (A0)
00006CE8  2003      12123          move.l    D3,D0
                    12124   ltoa_4:
00006CEA  4CDF 003C 12125          movem.l   (A7)+,D2/D3/D4/D5
00006CEE  4E5E      12126          unlk      A6
00006CF0  4E75      12127          rts
                    12128   _ultoa:
00006CF2  4E56 0000 12129          link      A6,#0
00006CF6  48E7 3800 12130          movem.l   D2/D3/D4,-(A7)
00006CFA  262E 0010 12131          move.l    16(A6),D3
00006CFE  282E 000C 12132          move.l    12(A6),D4
00006D02  2404      12133          move.l    D4,D2
00006D04  0C83 0000 12134          cmp.l     #2,D3
00006D08  0002      
00006D0A  6D08      12135          blt.s     ultoa_3
00006D0C  0C83 0000 12136          cmp.l     #36,D3
00006D10  0024      
00006D12  6F04      12137          ble.s     ultoa_1
                    12138   ultoa_3:
00006D14  2004      12139          move.l    D4,D0
00006D16  6018      12140          bra.s     ultoa_4
                    12141   ultoa_1:
00006D18  2F03      12142          move.l    D3,-(A7)
00006D1A  2F2E 0008 12143          move.l    8(A6),-(A7)
00006D1E  2F02      12144          move.l    D2,-(A7)
00006D20  4EB8 6BF2 12145          jsr       @itoa_convert
00006D24  DEFC 000C 12146          add.w     #12,A7
00006D28  2400      12147          move.l    D0,D2
00006D2A  2042      12148          move.l    D2,A0
00006D2C  4210      12149          clr.b     (A0)
00006D2E  2004      12150          move.l    D4,D0
                    12151   ultoa_4:
00006D30  4CDF 001C 12152          movem.l   (A7)+,D2/D3/D4
00006D34  4E5E      12153          unlk      A6
00006D36  4E75      12154          rts
                    12155   _itoa:
00006D38  4E56 0000 12156          link      A6,#0
00006D3C  2F2E 0010 12157          move.l    16(A6),-(A7)
00006D40  2F2E 000C 12158          move.l    12(A6),-(A7)
00006D44  2F2E 0008 12159          move.l    8(A6),-(A7)
00006D48  4EB8 6C6E 12160          jsr       _ltoa
00006D4C  DEFC 000C 12161          add.w     #12,A7
00006D50  4E5E      12162          unlk      A6
00006D52  4E75      12163          rts
                    12164   _strlen:
00006D54  206F 0004 12165          move.l    (4,A7),A0
00006D58  2248      12166          move.l    A0,A1
                    12167   strlen_1:
00006D5A  4A19      12168          tst.b     (A1)+
00006D5C  66FC      12169          bne       strlen_1
00006D5E  2009      12170          move.l    A1,D0
00006D60  9088      12171          sub.l     A0,D0
00006D62  5380      12172          subq.l    #1,D0
00006D64  4E75      12173          rts
                    12174          section   const
                    12175   
                    12176   @m68kde~2_1:
00006D66  0D0A 00   12177          dc.b      13,10,0
                    12178   @m68kde~2_2:
00006D6A  0D53 7769 12179          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
00006D6E  7463 6865 
00006D72  7320 5357 
00006D76  5B        
00006D77  372D 305D 12180          dc.b      55,45,48,93,32,61,32,0
00006D7B  203D 2000 
                    12181   @m68kde~2_3:
00006D80  3000      12182          dc.b      48,0
                    12183   @m68kde~2_4:
00006D82  3100      12184          dc.b      49,0
                    12185   @m68kde~2_5:
00006D84  0D0A 456E 12186          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
00006D88  7465 7220 
00006D8C  5374 6172 
00006D90  74        
00006D91  2041 6464 12187          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006D95  7265 7373 
00006D99  3A20 00   
                    12188   @m68kde~2_6:
00006D9C  0D0A 3C45 12189          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
00006DA0  5343 3E20 
00006DA4  3D20 4162 
00006DA8  6F72      
00006DAA  742C 2053 12190          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
00006DAE  5041 4345 
00006DB2  2074 6F20 
00006DB6  436F      
00006DB8  6E74 696E 12191          dc.b      110,116,105,110,117,101,0
00006DBC  7565 00   
                    12192   @m68kde~2_7:
00006DC0  0D0A 2530 12193          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
00006DC4  3858 2020 
00006DC8  2530 3458 
00006DCC  2020 20   
00006DCF  2020 2020 12194          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
00006DD3  2020 2020 
00006DD7  2020 2020 
00006DDB  2020 20   
00006DDE  2020 2020 12195          dc.b      32,32,32,32,32,32,37,115,0
00006DE2  2020 2573 
00006DE6  00        
                    12196   @m68kde~2_8:
00006DE8  0D0A 2530 12197          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006DEC  3858 2020 
00006DF0  2530 3458 
00006DF4  2025 30   
00006DF7  3458 2020 12198          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
00006DFB  2020 2020 
00006DFF  2020 2020 
00006E03  2020 20   
00006E06  2020 2020 12199          dc.b      32,32,32,32,32,32,37,115,0
00006E0A  2020 2573 
00006E0E  00        
                    12200   @m68kde~2_9:
00006E10  0D0A 2530 12201          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006E14  3858 2020 
00006E18  2530 3458 
00006E1C  2025 30   
00006E1F  3458 2025 12202          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
00006E23  3034 5820 
00006E27  2020 2020 
00006E2B  2020 20   
00006E2E  2020 2020 12203          dc.b      32,32,32,32,32,32,37,115,0
00006E32  2020 2573 
00006E36  00        
                    12204   @m68kde~2_10:
00006E38  0D0A 2530 12205          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006E3C  3858 2020 
00006E40  2530 3458 
00006E44  2025 30   
00006E47  3458 2025 12206          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
00006E4B  3034 5820 
00006E4F  2530 3458 
00006E53  2020 20   
00006E56  2020 2020 12207          dc.b      32,32,32,32,32,32,37,115,0
00006E5A  2020 2573 
00006E5E  00        
                    12208   @m68kde~2_11:
00006E60  0D0A 2530 12209          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006E64  3858 2020 
00006E68  2530 3458 
00006E6C  2025 30   
00006E6F  3458 2025 12210          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
00006E73  3034 5820 
00006E77  2530 3458 
00006E7B  2025 30   
00006E7E  3458 2020 12211          dc.b      52,88,32,32,32,32,37,115,0
00006E82  2020 2573 
00006E86  00        
                    12212   @m68kde~2_12:
00006E88  0D0A 4475 12213          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
00006E8C  6D70 204D 
00006E90  656D 6F72 
00006E94  79        
00006E95  2042 6C6F 12214          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00006E99  636B 3A20 
00006E9D  3C45 5343 
00006EA1  3E20      
00006EA3  746F 2041 12215          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00006EA7  626F 7274 
00006EAB  2C20 3C53 
00006EAF  50        
00006EB0  4143 453E 12216          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00006EB4  2074 6F20 
00006EB8  436F 6E74 
00006EBC  69        
00006EBD  6E75 6500 12217          dc.b      110,117,101,0
                    12218   @m68kde~2_13:
00006EC2  0D0A 2530 12219          dc.b      13,10,37,48,56,120,32,0
00006EC6  3878 2000 
                    12220   @m68kde~2_14:
00006ECA  2530 3258 12221          dc.b      37,48,50,88,0
00006ECE  00        
                    12222   @m68kde~2_15:
00006ED0  2020 00   12223          dc.b      32,32,0
                    12224   @m68kde~2_16:
00006ED4  0D0A 4669 12225          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00006ED8  6C6C 204D 
00006EDC  656D 6F72 
00006EE0  79        
00006EE1  2042 6C6F 12226          dc.b      32,66,108,111,99,107,0
00006EE5  636B 00   
                    12227   @m68kde~2_17:
00006EE8  0D0A 456E 12228          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00006EEC  7465 7220 
00006EF0  456E 6420 
00006EF4  41        
00006EF5  6464 7265 12229          dc.b      100,100,114,101,115,115,58,32,0
00006EF9  7373 3A20 
00006EFD  00        
                    12230   @m68kde~2_18:
00006EFE  0D0A 456E 12231          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
00006F02  7465 7220 
00006F06  4669 6C6C 
00006F0A  20        
00006F0B  4461 7461 12232          dc.b      68,97,116,97,58,32,0
00006F0F  3A20 00   
                    12233   @m68kde~2_19:
00006F12  0D0A 4669 12234          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00006F16  6C6C 696E 
00006F1A  6720 4164 
00006F1E  64        
00006F1F  7265 7373 12235          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
00006F23  6573 205B 
00006F27  2425 3038 
00006F2B  58        
00006F2C  202D 2024 12236          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
00006F30  2530 3858 
00006F34  5D20 7769 
00006F38  7468      
00006F3A  2024 2530 12237          dc.b      32,36,37,48,50,88,0
00006F3E  3258 00   
                    12238   @m68kde~2_20:
00006F42  0D0A 5573 12239          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
00006F46  6520 4879 
00006F4A  7065 7254 
00006F4E  65        
00006F4F  726D 696E 12240          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
00006F53  616C 2074 
00006F57  6F20 5365 
00006F5B  6E64 2054 12241          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
00006F5F  6578 7420 
00006F63  4669 6C65 
00006F67  2028 2E68 12242          dc.b      32,40,46,104,101,120,41,13,10,0
00006F6B  6578 290D 
00006F6F  0A00      
                    12243   @m68kde~2_21:
00006F72  0D0A 4C6F 12244          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
00006F76  6164 2046 
00006F7A  6169 6C65 
00006F7E  64        
00006F7F  2061 7420 12245          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
00006F83  4164 6472 
00006F87  6573 7320 
00006F8B  3D        
00006F8C  205B 2425 12246          dc.b      32,91,36,37,48,56,88,93,13,10,0
00006F90  3038 585D 
00006F94  0D0A 00   
                    12247   @m68kde~2_22:
00006F98  0D0A 5375 12248          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00006F9C  6363 6573 
00006FA0  733A 2044 
00006FA4  6F        
00006FA5  776E 6C6F 12249          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00006FA9  6164 6564 
00006FAD  2025 6420 
00006FB1  6279 7465 12250          dc.b      98,121,116,101,115,13,10,0
00006FB5  730D 0A00 
                    12251   @m68kde~2_23:
00006FBA  0D0A 4578 12252          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
00006FBE  616D 696E 
00006FC2  6520 616E 
00006FC6  64        
00006FC7  2043 6861 12253          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00006FCB  6E67 6520 
00006FCF  4D65 6D6F 
00006FD3  72        
00006FD4  7900      12254          dc.b      121,0
                    12255   @m68kde~2_24:
00006FD6  0D0A 3C45 12256          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00006FDA  5343 3E20 
00006FDE  746F 2053 
00006FE2  746F      
00006FE4  702C 203C 12257          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00006FE8  5350 4143 
00006FEC  453E 2074 
00006FF0  6F20      
00006FF2  4164 7661 12258          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00006FF6  6E63 652C 
00006FFA  2027 2D27 
00006FFE  2074      
00007000  6F20 476F 12259          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00007004  2042 6163 
00007008  6B2C 203C 
0000700C  4441      
0000700E  5441 3E20 12260          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
00007012  746F 2063 
00007016  6861 6E67 
0000701A  65        
0000701B  00        12261          dc.b      0
                    12262   @m68kde~2_25:
0000701C  0D0A 456E 12263          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
00007020  7465 7220 
00007024  4164 6472 
00007028  65        
00007029  7373 3A20 12264          dc.b      115,115,58,32,0
0000702D  00        
                    12265   @m68kde~2_26:
0000702E  0D0A 5B25 12266          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
00007032  3038 785D 
00007036  203A 2025 
0000703A  3032 78   
0000703D  2020 00   12267          dc.b      32,32,0
                    12268   @m68kde~2_27:
00007040  0D0A 5761 12269          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
00007044  726E 696E 
00007048  6720 4368 
0000704C  61        
0000704D  6E67 6520 12270          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
00007051  4661 696C 
00007055  6564 3A20 
00007059  57        
0000705A  726F 7465 12271          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
0000705E  205B 2530 
00007062  3278 5D2C 
00007066  20        
00007067  5265 6164 12272          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
0000706B  205B 2530 
0000706F  3278 5D00 
                    12273   @m68kde~2_28:
00007074  0D0A 4C6F 12274          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
00007078  6164 696E 
0000707C  6720 5072 
00007080  6F        
00007081  6772 616D 12275          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
00007085  2046 726F 
00007089  6D20 5350 
0000708D  49        
0000708E  2046 6C61 12276          dc.b      32,70,108,97,115,104,46,46,46,46,0
00007092  7368 2E2E 
00007096  2E2E 00   
                    12277   @m68kde~2_29:
0000709A  2425 3038 12278          dc.b      36,37,48,56,88,32,32,0
0000709E  5820 2000 
                    12279   @m68kde~2_30:
000070A2  2000      12280          dc.b      32,0
                    12281   @m68kde~2_31:
000070A4  2E00      12282          dc.b      46,0
                    12283   @m68kde~2_32:
000070A6  2563 00   12284          dc.b      37,99,0
                    12285   @m68kde~2_33:
000070AA  00        12286          dc.b      0
                    12287   @m68kde~2_34:
000070AC  0D0A 0D0A 12288          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
000070B0  2044 3020 
000070B4  3D20 2425 
000070B8  3038 58   
000070BB  2020 4130 12289          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
000070BF  203D 2024 
000070C3  2530 3858 
000070C7  00        
                    12290   @m68kde~2_35:
000070C8  0D0A 2044 12291          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
000070CC  3120 3D20 
000070D0  2425 3038 
000070D4  5820 20   
000070D7  4131 203D 12292          dc.b      65,49,32,61,32,36,37,48,56,88,0
000070DB  2024 2530 
000070DF  3858 00   
                    12293   @m68kde~2_36:
000070E2  0D0A 2044 12294          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
000070E6  3220 3D20 
000070EA  2425 3038 
000070EE  5820 20   
000070F1  4132 203D 12295          dc.b      65,50,32,61,32,36,37,48,56,88,0
000070F5  2024 2530 
000070F9  3858 00   
                    12296   @m68kde~2_37:
000070FC  0D0A 2044 12297          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
00007100  3320 3D20 
00007104  2425 3038 
00007108  5820 20   
0000710B  4133 203D 12298          dc.b      65,51,32,61,32,36,37,48,56,88,0
0000710F  2024 2530 
00007113  3858 00   
                    12299   @m68kde~2_38:
00007116  0D0A 2044 12300          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
0000711A  3420 3D20 
0000711E  2425 3038 
00007122  5820 20   
00007125  4134 203D 12301          dc.b      65,52,32,61,32,36,37,48,56,88,0
00007129  2024 2530 
0000712D  3858 00   
                    12302   @m68kde~2_39:
00007130  0D0A 2044 12303          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
00007134  3520 3D20 
00007138  2425 3038 
0000713C  5820 20   
0000713F  4135 203D 12304          dc.b      65,53,32,61,32,36,37,48,56,88,0
00007143  2024 2530 
00007147  3858 00   
                    12305   @m68kde~2_40:
0000714A  0D0A 2044 12306          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
0000714E  3620 3D20 
00007152  2425 3038 
00007156  5820 20   
00007159  4136 203D 12307          dc.b      65,54,32,61,32,36,37,48,56,88,0
0000715D  2024 2530 
00007161  3858 00   
                    12308   @m68kde~2_41:
00007164  0D0A 2044 12309          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
00007168  3720 3D20 
0000716C  2425 3038 
00007170  5820 20   
00007173  4137 203D 12310          dc.b      65,55,32,61,32,36,37,48,56,88,0
00007177  2024 2530 
0000717B  3858 00   
                    12311   @m68kde~2_42:
0000717E  0D0A 0D0A 12312          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
00007182  5553 5020 
00007186  3D20 2425 
0000718A  3038 58   
0000718D  2020 2841 12313          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
00007191  3729 2055 
00007195  7365 7220 
00007199  5350      
0000719B  00        12314          dc.b      0
                    12315   @m68kde~2_43:
0000719C  0D0A 5353 12316          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
000071A0  5020 3D20 
000071A4  2425 3038 
000071A8  5820 20   
000071AB  2841 3729 12317          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
000071AF  2053 7570 
000071B3  6572 7669 
000071B7  73        
000071B8  6F72 2053 12318          dc.b      111,114,32,83,80,0
000071BC  5000      
                    12319   @m68kde~2_44:
000071BE  0D0A 2053 12320          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
000071C2  5220 3D20 
000071C6  2425 3034 
000071CA  5820 20   
000071CD  2000      12321          dc.b      32,0
                    12322   @m68kde~2_45:
000071D0  2020 205B 12323          dc.b      32,32,32,91,0
000071D4  00        
                    12324   @m68kde~2_46:
000071D6  0D0A 2050 12325          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
000071DA  4320 3D20 
000071DE  2425 3038 
000071E2  5820 20   
000071E5  00        12326          dc.b      0
                    12327   @m68kde~2_47:
000071E6  2573 00   12328          dc.b      37,115,0
                    12329   @m68kde~2_48:
000071EA  5B42 5245 12330          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
000071EE  414B 504F 
000071F2  494E 545D 
000071F6  00        
                    12331   @m68kde~2_49:
000071F8  0D0A 5750 12332          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
000071FC  2564 203D 
00007200  2025 7300 
                    12333   @m68kde~2_50:
00007204  0D0A 0D0A 12334          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00007208  0D0A 0D0A 
0000720C  0D0A 0D0A 
00007210  5369 6E   
00007213  676C 6520 12335          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00007217  5374 6570 
0000721B  2020 3A5B 
0000721F  4F        
00007220  4E5D 00   12336          dc.b      78,93,0
                    12337   @m68kde~2_51:
00007224  0D0A 4272 12338          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007228  6561 6B20 
0000722C  506F 696E 
00007230  74        
00007231  7320 3A5B 12339          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
00007235  4469 7361 
00007239  626C 6564 
0000723D  5D        
0000723E  00        12340          dc.b      0
                    12341   @m68kde~2_52:
00007240  0D0A 5072 12342          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
00007244  6573 7320 
00007248  3C53 5041 
0000724C  4345      
0000724E  3E20 746F 12343          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
00007252  2045 7865 
00007256  6375 7465 
0000725A  20        
0000725B  4E65 7874 12344          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
0000725F  2049 6E73 
00007263  7472 7563 
00007267  7469 6F6E 12345          dc.b      116,105,111,110,0
0000726B  00        
                    12346   @m68kde~2_53:
0000726C  0D0A 5072 12347          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00007270  6573 7320 
00007274  3C45 5343 
00007278  3E20      
0000727A  746F 2052 12348          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
0000727E  6573 756D 
00007282  6520 5072 
00007286  6F67 7261 12349          dc.b      111,103,114,97,109,0
0000728A  6D00      
                    12350   @m68kde~2_54:
0000728C  0D0A 496C 12351          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
00007290  6C65 6761 
00007294  6C20 4461 
00007298  74        
00007299  6120 5265 12352          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
0000729D  6769 7374 
000072A1  6572 203A 
000072A5  20        
000072A6  5573 6520 12353          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
000072AA  4430 2D44 
000072AE  372E 2E2E 
000072B2  2E2E      
000072B4  0D0A 00   12354          dc.b      13,10,0
                    12355   @m68kde~2_55:
000072B8  0D0A 4425 12356          dc.b      13,10,68,37,99,32,61,32,0
000072BC  6320 3D20 
000072C0  00        
                    12357   @m68kde~2_56:
000072C2  0D0A 496C 12358          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
000072C6  6C65 6761 
000072CA  6C20 4164 
000072CE  64        
000072CF  7265 7373 12359          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
000072D3  2052 6567 
000072D7  6973 7465 
000072DB  7220 3A20 12360          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
000072DF  5573 6520 
000072E3  4130 2D41 
000072E7  372E      
000072E9  2E2E 2E2E 12361          dc.b      46,46,46,46,13,10,0
000072ED  0D0A 00   
                    12362   @m68kde~2_57:
000072F0  0D0A 4125 12363          dc.b      13,10,65,37,99,32,61,32,0
000072F4  6320 3D20 
000072F8  00        
                    12364   @m68kde~2_58:
000072FA  0D0A 5573 12365          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
000072FE  6572 2053 
00007302  5020 3D20 
00007306  00        
                    12366   @m68kde~2_59:
00007308  0D0A 496C 12367          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
0000730C  6C65 6761 
00007310  6C20 5265 
00007314  67        
00007315  6973 7465 12368          dc.b      105,115,116,101,114,46,46,46,46,0
00007319  722E 2E2E 
0000731D  2E00      
                    12369   @m68kde~2_60:
00007320  0D0A 5379 12370          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00007324  7374 656D 
00007328  2053 5020 
0000732C  3D        
0000732D  2000      12371          dc.b      32,0
                    12372   @m68kde~2_61:
00007330  0D0A 5043 12373          dc.b      13,10,80,67,32,61,32,0
00007334  203D 2000 
                    12374   @m68kde~2_62:
00007338  0D0A 5352 12375          dc.b      13,10,83,82,32,61,32,0
0000733C  203D 2000 
                    12376   @m68kde~2_63:
00007340  0D0A 496C 12377          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00007344  6C65 6761 
00007348  6C20 5265 
0000734C  67        
0000734D  6973 7465 12378          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
00007351  723A 2055 
00007355  7365 2041 
00007359  30        
0000735A  2D41 372C 12379          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
0000735E  2044 302D 
00007362  4437 2C20 
00007366  5353 50   
00007369  2C20 5553 12380          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
0000736D  502C 2050 
00007371  4320 6F72 
00007375  2053      
00007377  520D 0A00 12381          dc.b      82,13,10,0
                    12382   @m68kde~2_64:
0000737C  0D0A 0D0A 12383          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
00007380  4E75 6D20 
00007384  2020 2020 
00007388  4164      
0000738A  6472 6573 12384          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
0000738E  7320 2020 
00007392  2020 2049 
00007396  6E        
00007397  7374 7275 12385          dc.b      115,116,114,117,99,116,105,111,110,0
0000739B  6374 696F 
0000739F  6E00      
                    12386   @m68kde~2_65:
000073A2  0D0A 2D2D 12387          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
000073A6  2D20 2020 
000073AA  2020 2D2D 
000073AE  2D2D 2D   
000073B1  2D2D 2D2D 12388          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
000073B5  2020 2020 
000073B9  2D2D 2D2D 
000073BD  2D2D 2D   
000073C0  2D2D 2D2D 12389          dc.b      45,45,45,45,0
000073C4  00        
                    12390   @m68kde~2_66:
000073C6  0D0A 4E6F 12391          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
000073CA  2042 7265 
000073CE  616B 506F 
000073D2  69        
000073D3  6E74 7320 12392          dc.b      110,116,115,32,83,101,116,0
000073D7  5365 7400 
                    12393   @m68kde~2_67:
000073DC  0D0A 2533 12394          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
000073E0  6420 2020 
000073E4  2020 2425 
000073E8  3038 78   
000073EB  00        12395          dc.b      0
                    12396   @m68kde~2_68:
000073EC  2020 2020 12397          dc.b      32,32,32,32,37,115,0
000073F0  2573 00   
                    12398   @m68kde~2_69:
000073F4  0D0A 4E75 12399          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
000073F8  6D20 2020 
000073FC  2020 4164 
00007400  6472      
00007402  6573 7300 12400          dc.b      101,115,115,0
                    12401   @m68kde~2_70:
00007406  0D0A 2D2D 12402          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
0000740A  2D20 2020 
0000740E  2020 2D2D 
00007412  2D2D 2D   
00007415  2D2D 2D2D 12403          dc.b      45,45,45,45,0
00007419  00        
                    12404   @m68kde~2_71:
0000741A  0D0A 4E6F 12405          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
0000741E  2057 6174 
00007422  6368 506F 
00007426  69        
00007427  6E74 7320 12406          dc.b      110,116,115,32,83,101,116,0
0000742B  5365 7400 
                    12407   @m68kde~2_72:
00007430  0D0A 456E 12408          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
00007434  7465 7220 
00007438  4272 6561 
0000743C  6B        
0000743D  2050 6F69 12409          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00007441  6E74 204E 
00007445  756D 6265 
00007449  72        
0000744A  3A20 00   12410          dc.b      58,32,0
                    12411   @m68kde~2_73:
0000744E  0D0A 496C 12412          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
00007452  6C65 6761 
00007456  6C20 5261 
0000745A  6E        
0000745B  6765 203A 12413          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
0000745F  2055 7365 
00007463  2030 202D 
00007467  2037      
00007469  00        12414          dc.b      0
                    12415   @m68kde~2_74:
0000746A  0D0A 4272 12416          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000746E  6561 6B20 
00007472  506F 696E 
00007476  74        
00007477  2043 6C65 12417          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
0000747B  6172 6564 
0000747F  2E2E 2E2E 
00007483  2E        
00007484  0D0A 00   12418          dc.b      13,10,0
                    12419   @m68kde~2_75:
00007488  0D0A 4272 12420          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000748C  6561 6B20 
00007490  506F 696E 
00007494  74        
00007495  2077 6173 12421          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00007499  6E27 7420 
0000749D  5365 742E 
000074A1  2E        
000074A2  2E2E 2E00 12422          dc.b      46,46,46,0
                    12423   @m68kde~2_76:
000074A6  0D0A 456E 12424          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
000074AA  7465 7220 
000074AE  5761 7463 
000074B2  68        
000074B3  2050 6F69 12425          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000074B7  6E74 204E 
000074BB  756D 6265 
000074BF  72        
000074C0  3A20 00   12426          dc.b      58,32,0
                    12427   @m68kde~2_77:
000074C4  0D0A 5761 12428          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000074C8  7463 6820 
000074CC  506F 696E 
000074D0  74        
000074D1  2043 6C65 12429          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000074D5  6172 6564 
000074D9  2E2E 2E2E 
000074DD  2E        
000074DE  0D0A 00   12430          dc.b      13,10,0
                    12431   @m68kde~2_78:
000074E2  0D0A 5761 12432          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000074E6  7463 6820 
000074EA  506F 696E 
000074EE  74        
000074EF  2057 6173 12433          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
000074F3  206E 6F74 
000074F7  2053 6574 
000074FB  2E        
000074FC  2E2E 2E2E 12434          dc.b      46,46,46,46,0
00007500  00        
                    12435   @m68kde~2_79:
00007502  0D0A 4E6F 12436          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00007506  2046 5245 
0000750A  4520 4272 
0000750E  6561      
00007510  6B20 506F 12437          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00007514  696E 7473 
00007518  2E2E 2E2E 
0000751C  2E        
0000751D  00        12438          dc.b      0
                    12439   @m68kde~2_80:
0000751E  0D0A 4272 12440          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007522  6561 6B20 
00007526  506F 696E 
0000752A  74        
0000752B  2041 6464 12441          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000752F  7265 7373 
00007533  3A20 00   
                    12442   @m68kde~2_81:
00007536  0D0A 4572 12443          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
0000753A  726F 7220 
0000753E  3A20 4272 
00007542  65        
00007543  616B 2050 12444          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
00007547  6F69 6E74 
0000754B  7320 4341 
0000754F  4E        
00007550  4E4F 5420 12445          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
00007554  6265 2073 
00007558  6574 2061 
0000755C  74        
0000755D  204F 4444 12446          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
00007561  2061 6464 
00007565  7265 7373 
00007569  65        
0000756A  7300      12447          dc.b      115,0
                    12448   @m68kde~2_82:
0000756C  0D0A 4572 12449          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
00007570  726F 7220 
00007574  3A20 4272 
00007578  65        
00007579  616B 2050 12450          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
0000757D  6F69 6E74 
00007581  7320 4341 
00007585  4E        
00007586  4E4F 5420 12451          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
0000758A  6265 2073 
0000758E  6574 2066 
00007592  6F        
00007593  7220 524F 12452          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00007597  4D20 696E 
0000759B  2052 616E 
0000759F  67        
000075A0  6520 3A20 12453          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
000075A4  5B24 302D 
000075A8  2430 3030 
000075AC  3037 46   
000075AF  4646 5D00 12454          dc.b      70,70,93,0
                    12455   @m68kde~2_83:
000075B4  0D0A 4572 12456          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
000075B8  726F 723A 
000075BC  2042 7265 
000075C0  61        
000075C1  6B20 506F 12457          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
000075C5  696E 7420 
000075C9  416C 7265 
000075CD  6164 7920 12458          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
000075D1  4578 6973 
000075D5  7473 2061 
000075D9  74        
000075DA  2041 6464 12459          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
000075DE  7265 7373 
000075E2  203A 2025 
000075E6  30        
000075E7  3878 0D0A 12460          dc.b      56,120,13,10,0
000075EB  00        
                    12461   @m68kde~2_84:
000075EC  0D0A 4272 12462          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000075F0  6561 6B20 
000075F4  506F 696E 
000075F8  74        
000075F9  2053 6574 12463          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
000075FD  2061 7420 
00007601  4164 6472 
00007605  65        
00007606  7373 3A20 12464          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
0000760A  5B24 2530 
0000760E  3878 5D2C 
00007612  2049      
00007614  6E73 7472 12465          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
00007618  7563 7469 
0000761C  6F6E 203D 
00007620  2025 7300 12466          dc.b      32,37,115,0
                    12467   @m68kde~2_85:
00007624  0D0A 4E6F 12468          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00007628  2046 5245 
0000762C  4520 5761 
00007630  7463      
00007632  6820 506F 12469          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
00007636  696E 7473 
0000763A  2E2E 2E2E 
0000763E  2E        
0000763F  00        12470          dc.b      0
                    12471   @m68kde~2_86:
00007640  0D0A 5761 12472          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00007644  7463 6820 
00007648  506F 696E 
0000764C  74        
0000764D  2041 6464 12473          dc.b      32,65,100,100,114,101,115,115,58,32,0
00007651  7265 7373 
00007655  3A20 00   
                    12474   @m68kde~2_87:
00007658  0D0A 4572 12475          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
0000765C  726F 723A 
00007660  2057 6174 
00007664  63        
00007665  6820 506F 12476          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
00007669  696E 7420 
0000766D  416C 7265 
00007671  6164 7920 12477          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
00007675  5365 7420 
00007679  6174 2041 
0000767D  64        
0000767E  6472 6573 12478          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
00007682  7320 3A20 
00007686  2530 3878 
0000768A  0D        
0000768B  0A00      12479          dc.b      10,0
                    12480   @m68kde~2_88:
0000768E  0D0A 5761 12481          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00007692  7463 6820 
00007696  506F 696E 
0000769A  74        
0000769B  2053 6574 12482          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
0000769F  2061 7420 
000076A3  4164 6472 
000076A7  65        
000076A8  7373 3A20 12483          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
000076AC  5B24 2530 
000076B0  3878 5D00 
                    12484   @m68kde~2_89:
000076B4  0D0A 0D0A 12485          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
000076B8  0D0A 0D0A 
000076BC  4042 5245 
000076C0  414B 50   
000076C3  4F49 4E54 12486          dc.b      79,73,78,84,0
000076C7  00        
                    12487   @m68kde~2_90:
000076C8  0D0A 5369 12488          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
000076CC  6E67 6C65 
000076D0  2053 7465 
000076D4  70        
000076D5  203A 205B 12489          dc.b      32,58,32,91,79,78,93,0
000076D9  4F4E 5D00 
                    12490   @m68kde~2_91:
000076DE  0D0A 4272 12491          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
000076E2  6561 6B50 
000076E6  6F69 6E74 
000076EA  73        
000076EB  203A 205B 12492          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
000076EF  456E 6162 
000076F3  6C65 645D 
000076F7  00        
                    12493   @m68kde~2_92:
000076F8  0D0A 5072 12494          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000076FC  6573 7320 
00007700  3C45 5343 
00007704  3E20      
00007706  746F 2052 12495          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
0000770A  6573 756D 
0000770E  6520 5573 
00007712  6572 2050 12496          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00007716  726F 6772 
0000771A  616D 0D0A 
0000771E  00        
                    12497   @m68kde~2_93:
00007720  0D0A 556E 12498          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00007724  6B6E 6F77 
00007728  6E20 436F 
0000772C  6D        
0000772D  6D61 6E64 12499          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00007731  2E2E 2E2E 
00007735  2E0D 0A00 
                    12500   @m68kde~2_94:
0000773A  0D0A 5072 12501          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
0000773E  6F67 7261 
00007742  6D20 456E 
00007746  64        
00007747  6564 2028 12502          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
0000774B  5452 4150 
0000774F  2023 3135 
00007753  292E      
00007755  2E2E 2E00 12503          dc.b      46,46,46,0
                    12504   @m68kde~2_95:
0000775A  0D0A 4B69 12505          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
0000775E  6C6C 2041 
00007762  6C6C 2042 
00007766  72        
00007767  6561 6B20 12506          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
0000776B  506F 696E 
0000776F  7473 2E2E 
00007773  2E        
00007774  2879 2F6E 12507          dc.b      40,121,47,110,41,63,0
00007778  293F 00   
                    12508   @m68kde~2_96:
0000777C  0D0A 4B69 12509          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00007780  6C6C 2041 
00007784  6C6C 2057 
00007788  61        
00007789  7463 6820 12510          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
0000778D  506F 696E 
00007791  7473 2E2E 
00007795  2E        
00007796  2879 2F6E 12511          dc.b      40,121,47,110,41,63,0
0000779A  293F 00   
                    12512   @m68kde~2_97:
0000779E  0D0A 2D2D 12513          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
000077A2  2D2D 2D2D 
000077A6  2D2D 2D2D 
000077AA  2D2D 2D   
000077AD  2D2D 2D2D 12514          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000077B1  2D2D 2D2D 
000077B5  2D2D 2D2D 
000077B9  2D2D 2D   
000077BC  2D2D 2D2D 12515          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000077C0  2D2D 2D2D 
000077C4  2D2D 2D2D 
000077C8  2D2D 2D   
000077CB  2D2D 2D2D 12516          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
000077CF  2D2D 2D2D 
000077D3  2D2D 2D2D 
000077D7  2D2D 2D   
000077DA  2D2D 2D2D 12517          dc.b      45,45,45,45,45,45,0
000077DE  2D2D 00   
                    12518   @m68kde~2_98:
000077E2  0D0A 2020 12519          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
000077E6  4465 6275 
000077EA  6767 6572 
000077EE  20        
000077EF  436F 6D6D 12520          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
000077F3  616E 6420 
000077F7  5375 6D6D 
000077FB  6172 7900 12521          dc.b      97,114,121,0
                    12522   @m68kde~2_99:
00007800  0D0A 2020 12523          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00007804  2E28 7265 
00007808  6729 2020 
0000780C  2020      
0000780E  2020 202D 12524          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00007812  2043 6861 
00007816  6E67 6520 
0000781A  5265      
0000781C  6769 7374 12525          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00007820  6572 733A 
00007824  2065 2E67 
00007828  2041 302D 12526          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
0000782C  4137 2C44 
00007830  302D 4437 
00007834  2C50 43   
00007837  2C53 5350 12527          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
0000783B  2C55 5350 
0000783F  2C53 5200 
                    12528   @m68kde~2_100:
00007844  0D0A 2020 12529          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00007848  4244 2F42 
0000784C  532F 4243 
00007850  2F42 4B   
00007853  2020 2D20 12530          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00007857  4272 6561 
0000785B  6B20 506F 
0000785F  69        
00007860  6E74 3A20 12531          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00007864  4469 7370 
00007868  6C61 792F 
0000786C  53        
0000786D  6574 2F43 12532          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00007871  6C65 6172 
00007875  2F4B 696C 
00007879  6C        
0000787A  00        12533          dc.b      0
                    12534   @m68kde~2_101:
0000787C  0D0A 2020 12535          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00007880  4320 2020 
00007884  2020 2020 
00007888  2020 20   
0000788B  2020 2D20 12536          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
0000788F  436F 7079 
00007893  2050 726F 
00007897  67        
00007898  7261 6D20 12537          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
0000789C  6672 6F6D 
000078A0  2046 6C61 
000078A4  73        
000078A5  6820 746F 12538          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
000078A9  204D 6169 
000078AD  6E20 4D65 
000078B1  6D        
000078B2  6F72 7900 12539          dc.b      111,114,121,0
                    12540   @m68kde~2_102:
000078B6  0D0A 2020 12541          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
000078BA  4449 2020 
000078BE  2020 2020 
000078C2  2020 20   
000078C5  2020 2D20 12542          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
000078C9  4469 7361 
000078CD  7373 656D 
000078D1  62        
000078D2  6C65 2050 12543          dc.b      108,101,32,80,114,111,103,114,97,109,0
000078D6  726F 6772 
000078DA  616D 00   
                    12544   @m68kde~2_103:
000078DE  0D0A 2020 12545          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
000078E2  4455 2020 
000078E6  2020 2020 
000078EA  2020 20   
000078ED  2020 2D20 12546          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
000078F1  4475 6D70 
000078F5  204D 656D 
000078F9  6F        
000078FA  7279 2043 12547          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
000078FE  6F6E 7465 
00007902  6E74 7320 
00007906  746F 2053 12548          dc.b      116,111,32,83,99,114,101,101,110,0
0000790A  6372 6565 
0000790E  6E00      
                    12549   @m68kde~2_104:
00007910  0D0A 2020 12550          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00007914  4520 2020 
00007918  2020 2020 
0000791C  2020 20   
0000791F  2020 2D20 12551          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00007923  456E 7465 
00007927  7220 5374 
0000792B  72        
0000792C  696E 6720 12552          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00007930  696E 746F 
00007934  204D 656D 
00007938  6F72 7900 12553          dc.b      111,114,121,0
                    12554   @m68kde~2_105:
0000793C  0D0A 2020 12555          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00007940  4620 2020 
00007944  2020 2020 
00007948  2020 20   
0000794B  2020 2D20 12556          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
0000794F  4669 6C6C 
00007953  204D 656D 
00007957  6F        
00007958  7279 2077 12557          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
0000795C  6974 6820 
00007960  4461 7461 
00007964  00        
                    12558   @m68kde~2_106:
00007966  0D0A 2020 12559          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
0000796A  4720 2020 
0000796E  2020 2020 
00007972  2020 20   
00007975  2020 2D20 12560          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00007979  476F 2050 
0000797D  726F 6772 
00007981  61        
00007982  6D20 5374 12561          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00007986  6172 7469 
0000798A  6E67 2061 
0000798E  74        
0000798F  2041 6464 12562          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00007993  7265 7373 
00007997  3A20 2425 
0000799B  30        
0000799C  3858 00   12563          dc.b      56,88,0
                    12564   @m68kde~2_107:
000079A0  0D0A 2020 12565          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
000079A4  4C20 2020 
000079A8  2020 2020 
000079AC  2020 20   
000079AF  2020 2D20 12566          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
000079B3  4C6F 6164 
000079B7  2050 726F 
000079BB  67        
000079BC  7261 6D20 12567          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
000079C0  282E 4845 
000079C4  5820 6669 
000079C8  6C        
000079C9  6529 2066 12568          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
000079CD  726F 6D20 
000079D1  4C61 7074 
000079D5  6F        
000079D6  7000      12569          dc.b      112,0
                    12570   @m68kde~2_108:
000079D8  0D0A 2020 12571          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
000079DC  4D20 2020 
000079E0  2020 2020 
000079E4  2020 20   
000079E7  2020 2D20 12572          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
000079EB  4D65 6D6F 
000079EF  7279 2045 
000079F3  78        
000079F4  616D 696E 12573          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
000079F8  6520 616E 
000079FC  6420 4368 
00007A00  61        
00007A01  6E67 6500 12574          dc.b      110,103,101,0
                    12575   @m68kde~2_109:
00007A06  0D0A 2020 12576          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00007A0A  5020 2020 
00007A0E  2020 2020 
00007A12  2020 20   
00007A15  2020 2D20 12577          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00007A19  5072 6F67 
00007A1D  7261 6D20 
00007A21  46        
00007A22  6C61 7368 12578          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00007A26  204D 656D 
00007A2A  6F72 7920 
00007A2E  7769 7468 12579          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00007A32  2055 7365 
00007A36  7220 5072 
00007A3A  6F67 7261 12580          dc.b      111,103,114,97,109,0
00007A3E  6D00      
                    12581   @m68kde~2_110:
00007A40  0D0A 2020 12582          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00007A44  5220 2020 
00007A48  2020 2020 
00007A4C  2020 20   
00007A4F  2020 2D20 12583          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00007A53  4469 7370 
00007A57  6C61 7920 
00007A5B  36        
00007A5C  3830 3030 12584          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00007A60  2052 6567 
00007A64  6973 7465 
00007A68  72        
00007A69  7300      12585          dc.b      115,0
                    12586   @m68kde~2_111:
00007A6C  0D0A 2020 12587          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00007A70  5320 2020 
00007A74  2020 2020 
00007A78  2020 20   
00007A7B  2020 2D20 12588          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00007A7F  546F 6767 
00007A83  6C65 204F 
00007A87  4E        
00007A88  2F4F 4646 12589          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00007A8C  2053 696E 
00007A90  676C 6520 
00007A94  53        
00007A95  7465 7020 12590          dc.b      116,101,112,32,77,111,100,101,0
00007A99  4D6F 6465 
00007A9D  00        
                    12591   @m68kde~2_112:
00007A9E  0D0A 2020 12592          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00007AA2  544D 2020 
00007AA6  2020 2020 
00007AAA  2020 20   
00007AAD  2020 2D20 12593          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00007AB1  5465 7374 
00007AB5  204D 656D 
00007AB9  6F        
00007ABA  7279 00   12594          dc.b      114,121,0
                    12595   @m68kde~2_113:
00007ABE  0D0A 2020 12596          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00007AC2  5453 2020 
00007AC6  2020 2020 
00007ACA  2020 20   
00007ACD  2020 2D20 12597          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00007AD1  5465 7374 
00007AD5  2053 7769 
00007AD9  74        
00007ADA  6368 6573 12598          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00007ADE  3A20 5357 
00007AE2  372D 3000 
                    12599   @m68kde~2_114:
00007AE6  0D0A 2020 12600          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00007AEA  5444 2020 
00007AEE  2020 2020 
00007AF2  2020 20   
00007AF5  2020 2D20 12601          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00007AF9  5465 7374 
00007AFD  2044 6973 
00007B01  70        
00007B02  6C61 7973 12602          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00007B06  3A20 4C45 
00007B0A  4473 2061 
00007B0E  6E        
00007B0F  6420 372D 12603          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00007B13  5365 676D 
00007B17  656E 7400 
                    12604   @m68kde~2_115:
00007B1C  0D0A 2020 12605          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00007B20  5744 2F57 
00007B24  532F 5743 
00007B28  2F57 4B   
00007B2B  2020 2D20 12606          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00007B2F  5761 7463 
00007B33  6820 506F 
00007B37  696E      
00007B39  743A 2044 12607          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00007B3D  6973 706C 
00007B41  6179 2F53 
00007B45  65        
00007B46  742F 436C 12608          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00007B4A  6561 722F 
00007B4E  4B69 6C6C 
00007B52  00        
                    12609   @m68kde~2_116:
00007B54  0D0A 2300 12610          dc.b      13,10,35,0
                    12611   @m68kde~2_117:
00007B58  0D0A 5072 12612          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00007B5C  6F67 7261 
00007B60  6D20 5275 
00007B64  6E        
00007B65  6E69 6E67 12613          dc.b      110,105,110,103,46,46,46,46,46,0
00007B69  2E2E 2E2E 
00007B6D  2E00      
                    12614   @m68kde~2_118:
00007B70  0D0A 5072 12615          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00007B74  6573 7320 
00007B78  3C52 4553 
00007B7C  4554      
00007B7E  3E20 6275 12616          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00007B82  7474 6F6E 
00007B86  203C 4B65 
00007B8A  79        
00007B8B  303E 206F 12617          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00007B8F  6E20 4445 
00007B93  3120 746F 
00007B97  2073      
00007B99  746F 7000 12618          dc.b      116,111,112,0
                    12619   @m68kde~2_119:
00007B9E  0D0A 4572 12620          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00007BA2  726F 723A 
00007BA6  2050 7265 
00007BAA  73        
00007BAB  7320 2747 12621          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00007BAF  2720 6669 
00007BB3  7273 7420 
00007BB7  74        
00007BB8  6F20 7374 12622          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00007BBC  6172 7420 
00007BC0  7072 6F67 
00007BC4  7261 6D00 12623          dc.b      114,97,109,0
                    12624   @m68kde~2_120:
00007BC8  0D0A 5369 12625          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007BCC  6E67 6C65 
00007BD0  2053 7465 
00007BD4  70        
00007BD5  2020 3A5B 12626          dc.b      32,32,58,91,79,78,93,0
00007BD9  4F4E 5D00 
                    12627   @m68kde~2_121:
00007BDE  0D0A 5072 12628          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00007BE2  6573 7320 
00007BE6  2747 2720 
00007BEA  74        
00007BEB  6F20 5472 12629          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00007BEF  6163 6520 
00007BF3  5072 6F67 
00007BF7  72        
00007BF8  616D 2066 12630          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00007BFC  726F 6D20 
00007C00  6164 6472 
00007C04  6573 7320 12631          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00007C08  2425 582E 
00007C0C  2E2E 2E2E 
00007C10  00        
                    12632   @m68kde~2_122:
00007C12  0D0A 5075 12633          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00007C16  7368 203C 
00007C1A  5245 5345 
00007C1E  5420      
00007C20  4275 7474 12634          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00007C24  6F6E 3E20 
00007C28  746F 2053 
00007C2C  74        
00007C2D  6F70 2E2E 12635          dc.b      111,112,46,46,46,46,46,0
00007C31  2E2E 2E00 
                    12636   @m68kde~2_123:
00007C36  0D0A 5369 12637          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007C3A  6E67 6C65 
00007C3E  2053 7465 
00007C42  70        
00007C43  203A 205B 12638          dc.b      32,58,32,91,79,70,70,93,0
00007C47  4F46 465D 
00007C4B  00        
                    12639   @m68kde~2_124:
00007C4C  0D0A 4272 12640          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00007C50  6561 6B20 
00007C54  506F 696E 
00007C58  74        
00007C59  7320 3A5B 12641          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00007C5D  456E 6162 
00007C61  6C65 645D 
00007C65  00        
                    12642   @m68kde~2_125:
00007C66  0D0A 5072 12643          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00007C6A  6573 7320 
00007C6E  3C45 5343 
00007C72  3E20      
00007C74  746F 2052 12644          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00007C78  6573 756D 
00007C7C  6520 5573 
00007C80  6572 2050 12645          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00007C84  726F 6772 
00007C88  616D 2E2E 
00007C8C  2E        
00007C8D  2E2E 00   12646          dc.b      46,46,0
                    12647   @m68kde~2_126:
00007C90  0D0A 5369 12648          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007C94  6E67 6C65 
00007C98  2053 7465 
00007C9C  70        
00007C9D  2020 3A5B 12649          dc.b      32,32,58,91,79,70,70,93,0
00007CA1  4F46 465D 
00007CA5  00        
                    12650   @m68kde~2_127:
00007CA6  0D0A 0D0A 12651          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00007CAA  5072 6F67 
00007CAE  7261 6D20 
00007CB2  41        
00007CB3  424F 5254 12652          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00007CB7  2021 2121 
00007CBB  2121 210D 
00007CBF  0A00      
                    12653   @m68kde~2_128:
00007CC2  2573 0D0A 12654          dc.b      37,115,13,10,0
00007CC6  00        
                    12655   @m68kde~2_129:
00007CC8  0D0A 0D0A 12656          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00007CCC  5072 6F67 
00007CD0  7261 6D20 
00007CD4  41        
00007CD5  424F 5254 12657          dc.b      66,79,82,84,32,33,33,33,33,33,0
00007CD9  2021 2121 
00007CDD  2121 00   
                    12658   @m68kde~2_130:
00007CE0  0D0A 556E 12659          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00007CE4  6861 6E64 
00007CE8  6C65 6420 
00007CEC  49        
00007CED  6E74 6572 12660          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
00007CF1  7275 7074 
00007CF5  3A20 4952 
00007CF9  5125 6420 12661          dc.b      81,37,100,32,33,33,33,33,33,0
00007CFD  2121 2121 
00007D01  2100      
                    12662   @m68kde~2_131:
00007D04  4144 4452 12663          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00007D08  4553 5320 
00007D0C  4552 524F 
00007D10  523A 20   
00007D13  3136 206F 12664          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00007D17  7220 3332 
00007D1B  2042 6974 
00007D1F  2054      
00007D21  7261 6E73 12665          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00007D25  6665 7220 
00007D29  746F 2F66 
00007D2D  726F 6D20 12666          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
00007D31  616E 204F 
00007D35  4444 2041 
00007D39  64        
00007D3A  6472 6573 12667          dc.b      100,114,101,115,115,46,46,46,46,0
00007D3E  732E 2E2E 
00007D42  2E00      
                    12668   @m68kde~2_132:
00007D44  556E 6861 12669          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
00007D48  6E64 6C65 
00007D4C  6420 5472 
00007D50  6170 2021 12670          dc.b      97,112,32,33,33,33,33,33,0
00007D54  2121 2121 
00007D58  00        
                    12671   @m68kde~2_133:
00007D5A  4255 5320 12672          dc.b      66,85,83,32,69,114,114,111,114,33,0
00007D5E  4572 726F 
00007D62  7221 00   
                    12673   @m68kde~2_134:
00007D66  4144 4452 12674          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
00007D6A  4553 5320 
00007D6E  4572 726F 
00007D72  7221      
00007D74  00        12675          dc.b      0
                    12676   @m68kde~2_135:
00007D76  494C 4C45 12677          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
00007D7A  4741 4C20 
00007D7E  494E 5354 
00007D82  5255 43   
00007D85  5449 4F4E 12678          dc.b      84,73,79,78,0
00007D89  00        
                    12679   @m68kde~2_136:
00007D8A  4449 5649 12680          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
00007D8E  4445 2042 
00007D92  5920 5A45 
00007D96  524F 00   
                    12681   @m68kde~2_137:
00007D9A  2743 484B 12682          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
00007D9E  2720 494E 
00007DA2  5354 5255 
00007DA6  4354 49   
00007DA9  4F4E 00   12683          dc.b      79,78,0
                    12684   @m68kde~2_138:
00007DAC  5452 4150 12685          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
00007DB0  5620 494E 
00007DB4  5354 5255 
00007DB8  4354 49   
00007DBB  4F4E 00   12686          dc.b      79,78,0
                    12687   @m68kde~2_139:
00007DBE  5052 4956 12688          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
00007DC2  494C 4547 
00007DC6  4520 5649 
00007DCA  4F4C 41   
00007DCD  5449 4F4E 12689          dc.b      84,73,79,78,0
00007DD1  00        
                    12690   @m68kde~2_140:
00007DD2  554E 494E 12691          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00007DD6  4954 4941 
00007DDA  4C49 5345 
00007DDE  4420 49   
00007DE1  5251 00   12692          dc.b      82,81,0
                    12693   @m68kde~2_141:
00007DE4  5350 5552 12694          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00007DE8  494F 5553 
00007DEC  2049 5251 
00007DF0  00        
                    12695   @m68kde~2_142:
00007DF2  0D0A 5374 12696          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00007DF6  6172 7420 
00007DFA  4164 6472 
00007DFE  65        
00007DFF  7373 2069 12697          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
00007E03  6E20 4D65 
00007E07  6D6F 7279 
00007E0B  3A20 00   12698          dc.b      58,32,0
                    12699   @m68kde~2_143:
00007E0E  0D0A 456E 12700          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
00007E12  7465 7220 
00007E16  5374 7269 
00007E1A  6E        
00007E1B  6720 2845 12701          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
00007E1F  5343 2074 
00007E23  6F20 656E 
00007E27  64        
00007E28  2920 3A00 12702          dc.b      41,32,58,0
                    12703   @m68kde~2_144:
00007E2C  0D0A 5370 12704          dc.b      13,10,83,112,101,99,105,102,121,32,116,104,101
00007E30  6563 6966 
00007E34  7920 7468 
00007E38  65        
00007E39  206D 656D 12705          dc.b      32,109,101,109,111,114,121,32,116,101,115,116
00007E3D  6F72 7920 
00007E41  7465 7374 
00007E45  2074 7970 12706          dc.b      32,116,121,112,101,46,32,73,110,112,117,116
00007E49  652E 2049 
00007E4D  6E70 7574 
00007E51  2027 3027 12707          dc.b      32,39,48,39,32,102,111,114,32,66,121,116,101
00007E55  2066 6F72 
00007E59  2042 7974 
00007E5D  65        
00007E5E  732C 2027 12708          dc.b      115,44,32,39,49,39,32,102,111,114,32,87,111
00007E62  3127 2066 
00007E66  6F72 2057 
00007E6A  6F        
00007E6B  7264 2C20 12709          dc.b      114,100,44,32,97,110,100,32,39,50,39,32,102
00007E6F  616E 6420 
00007E73  2732 2720 
00007E77  66        
00007E78  6F72 204C 12710          dc.b      111,114,32,76,111,110,103,32,87,111,114,100
00007E7C  6F6E 6720 
00007E80  576F 7264 
00007E84  3A20 00   12711          dc.b      58,32,0
                    12712   @m68kde~2_145:
00007E88  2575 00   12713          dc.b      37,117,0
                    12714   @m68kde~2_146:
00007E8C  0D0A 496E 12715          dc.b      13,10,73,110,118,97,108,105,100,32,73,110,112
00007E90  7661 6C69 
00007E94  6420 496E 
00007E98  70        
00007E99  7574 2100 12716          dc.b      117,116,33,0
                    12717   @m68kde~2_147:
00007E9E  0D0A 456E 12718          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,100
00007EA2  7465 7220 
00007EA6  7468 6520 
00007EAA  64        
00007EAB  6174 6120 12719          dc.b      97,116,97,32,105,110,32,102,111,114,109,97,116
00007EAF  696E 2066 
00007EB3  6F72 6D61 
00007EB7  74        
00007EB8  2058 583A 12720          dc.b      32,88,88,58,32,0
00007EBC  2000      
                    12721   @m68kde~2_148:
00007EBE  2578 00   12722          dc.b      37,120,0
                    12723   @m68kde~2_149:
00007EC2  0D44 6174 12724          dc.b      13,68,97,116,97,32,108,97,114,103,101,114,32
00007EC6  6120 6C61 
00007ECA  7267 6572 
00007ECE  20        
00007ECF  7468 616E 12725          dc.b      116,104,97,110,32,98,121,116,101,33,10,0
00007ED3  2062 7974 
00007ED7  6521 0A00 
                    12726   @m68kde~2_150:
00007EDC  0D45 6E74 12727          dc.b      13,69,110,116,101,114,32,116,104,101,32,100
00007EE0  6572 2074 
00007EE4  6865 2064 
00007EE8  6174 6120 12728          dc.b      97,116,97,32,105,110,32,102,111,114,109,97,116
00007EEC  696E 2066 
00007EF0  6F72 6D61 
00007EF4  74        
00007EF5  2058 583A 12729          dc.b      32,88,88,58,32,0
00007EF9  2000      
                    12730   @m68kde~2_151:
00007EFC  0D0A 456E 12731          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,100
00007F00  7465 7220 
00007F04  7468 6520 
00007F08  64        
00007F09  6174 6120 12732          dc.b      97,116,97,32,105,110,32,102,111,114,109,97,116
00007F0D  696E 2066 
00007F11  6F72 6D61 
00007F15  74        
00007F16  2058 5858 12733          dc.b      32,88,88,88,88,58,32,0
00007F1A  583A 2000 
                    12734   @m68kde~2_152:
00007F1E  0D0A 4461 12735          dc.b      13,10,68,97,116,97,32,108,97,114,103,101,114
00007F22  7461 206C 
00007F26  6172 6765 
00007F2A  72        
00007F2B  2074 6861 12736          dc.b      32,116,104,97,110,32,97,32,119,111,114,100,33
00007F2F  6E20 6120 
00007F33  776F 7264 
00007F37  21        
00007F38  00        12737          dc.b      0
                    12738   @m68kde~2_153:
00007F3A  0D45 6E74 12739          dc.b      13,69,110,116,101,114,32,116,104,101,32,100
00007F3E  6572 2074 
00007F42  6865 2064 
00007F46  6174 6120 12740          dc.b      97,116,97,32,105,110,32,102,111,114,109,97,116
00007F4A  696E 2066 
00007F4E  6F72 6D61 
00007F52  74        
00007F53  2058 5858 12741          dc.b      32,88,88,88,88,88,88,88,88,58,32,0
00007F57  5858 5858 
00007F5B  583A 2000 
                    12742   @m68kde~2_154:
00007F60  0D0A 4461 12743          dc.b      13,10,68,97,116,97,32,108,97,114,103,101,114
00007F64  7461 206C 
00007F68  6172 6765 
00007F6C  72        
00007F6D  2074 6861 12744          dc.b      32,116,104,97,110,32,97,32,108,111,110,103,32
00007F71  6E20 6120 
00007F75  6C6F 6E67 
00007F79  20        
00007F7A  776F 7264 12745          dc.b      119,111,114,100,33,0
00007F7E  2100      
                    12746   @m68kde~2_155:
00007F80  0D0A 456E 12747          dc.b      13,10,69,110,116,101,114,32,116,104,101,32,100
00007F84  7465 7220 
00007F88  7468 6520 
00007F8C  64        
00007F8D  6174 6120 12748          dc.b      97,116,97,32,105,110,32,102,111,114,109,97,116
00007F91  696E 2066 
00007F95  6F72 6D61 
00007F99  74        
00007F9A  2058 5858 12749          dc.b      32,88,88,88,88,88,88,88,88,58,32,0
00007F9E  5858 5858 
00007FA2  583A 2000 
                    12750   @m68kde~2_156:
00007FA6  0D0A 5072 12751          dc.b      13,10,80,114,111,118,105,100,101,32,97,32,115
00007FAA  6F76 6964 
00007FAE  6520 6120 
00007FB2  73        
00007FB3  7461 7274 12752          dc.b      116,97,114,116,32,97,100,100,114,101,115,115
00007FB7  2061 6464 
00007FBB  7265 7373 
00007FBF  2066 6F72 12753          dc.b      32,102,111,114,32,121,111,117,114,32,100,97
00007FC3  2079 6F75 
00007FC7  7220 6461 
00007FCB  7461 3A20 12754          dc.b      116,97,58,32,0
00007FCF  00        
                    12755   @m68kde~2_157:
00007FD0  0D0A 204F 12756          dc.b      13,10,32,79,100,100,32,97,100,100,114,101,115
00007FD4  6464 2061 
00007FD8  6464 7265 
00007FDC  73        
00007FDD  7320 6973 12757          dc.b      115,32,105,115,32,110,111,116,32,97,108,108
00007FE1  206E 6F74 
00007FE5  2061 6C6C 
00007FE9  6F77 6564 12758          dc.b      111,119,101,100,32,102,111,114,32,119,111,114
00007FED  2066 6F72 
00007FF1  2077 6F72 
00007FF5  6420 6F72 12759          dc.b      100,32,111,114,32,108,111,110,103,32,119,111
00007FF9  206C 6F6E 
00007FFD  6720 776F 
00008001  7264 2100 12760          dc.b      114,100,33,0
                    12761   @m68kde~2_158:
00008006  0D0A 496E 12762          dc.b      13,10,73,110,118,97,108,105,100,32,97,100,100
0000800A  7661 6C69 
0000800E  6420 6164 
00008012  64        
00008013  7265 7373 12763          dc.b      114,101,115,115,33,0
00008017  2100      
                    12764   @m68kde~2_159:
0000801A  0D0A 596F 12765          dc.b      13,10,89,111,117,32,104,97,118,101,32,101,110
0000801E  7520 6861 
00008022  7665 2065 
00008026  6E        
00008027  7465 7265 12766          dc.b      116,101,114,101,100,32,37,120,32,102,111,114
0000802B  6420 2578 
0000802F  2066 6F72 
00008033  2074 6865 12767          dc.b      32,116,104,101,32,115,116,97,114,116,32,97,100
00008037  2073 7461 
0000803B  7274 2061 
0000803F  64        
00008040  6472 6573 12768          dc.b      100,114,101,115,115,0
00008044  7300      
                    12769   @m68kde~2_160:
00008046  0D0A 5072 12770          dc.b      13,10,80,114,111,118,105,100,101,32,97,110,32
0000804A  6F76 6964 
0000804E  6520 616E 
00008052  20        
00008053  656E 6420 12771          dc.b      101,110,100,32,97,100,100,114,101,115,115,32
00008057  6164 6472 
0000805B  6573 7320 
0000805F  666F 7220 12772          dc.b      102,111,114,32,121,111,117,114,32,100,97,116
00008063  796F 7572 
00008067  2064 6174 
0000806B  613A 2000 12773          dc.b      97,58,32,0
                    12774   @m68kde~2_161:
00008070  0D0A 5772 12775          dc.b      13,10,87,114,105,116,105,110,103,32,37,120,32
00008074  6974 696E 
00008078  6720 2578 
0000807C  20        
0000807D  6174 206C 12776          dc.b      97,116,32,108,111,99,97,116,105,111,110,32,37
00008081  6F63 6174 
00008085  696F 6E20 
00008089  25        
0000808A  7800      12777          dc.b      120,0
                    12778   @m68kde~2_162:
0000808C  0D0A 4572 12779          dc.b      13,10,69,114,114,111,114,32,119,114,105,116
00008090  726F 7220 
00008094  7772 6974 
00008098  696E 6720 12780          dc.b      105,110,103,32,37,120,32,116,111,32,97,100,100
0000809C  2578 2074 
000080A0  6F20 6164 
000080A4  64        
000080A5  7265 7373 12781          dc.b      114,101,115,115,32,37,120,0
000080A9  2025 7800 
                    12782   @m68kde~2_163:
000080AE  0D0A 5772 12783          dc.b      13,10,87,114,105,116,105,110,103,32,102,105
000080B2  6974 696E 
000080B6  6720 6669 
000080BA  6E69 7368 12784          dc.b      110,105,115,104,101,100,32,97,116,32,37,48,56
000080BE  6564 2061 
000080C2  7420 2530 
000080C6  38        
000080C7  7800      12785          dc.b      120,0
                    12786   @m68kde~2_164:
000080CA  5361 6966 12787          dc.b      83,97,105,102,32,65,98,100,101,108,97,122,105
000080CE  2041 6264 
000080D2  656C 617A 
000080D6  69        
000080D7  6D20 616E 12788          dc.b      109,32,97,110,100,32,74,105,110,105,108,32,80
000080DB  6420 4A69 
000080DF  6E69 6C20 
000080E3  50        
000080E4  6174 656C 12789          dc.b      97,116,101,108,0
000080E8  00        
                    12790   @m68kde~2_165:
000080EA  5374 7564 12791          dc.b      83,116,117,100,101,110,116,32,35,58,32,54,50
000080EE  656E 7420 
000080F2  233A 2036 
000080F6  32        
000080F7  3633 3934 12792          dc.b      54,51,57,52,50,50,32,97,110,100,32,51,56,50
000080FB  3232 2061 
000080FF  6E64 2033 
00008103  3832      
00008105  3430 3732 12793          dc.b      52,48,55,50,0
00008109  00        
                    12794   @m68kde~2_166:
0000810A  0D0A 5275 12795          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
0000810E  6E6E 696E 
00008112  672E 2E2E 
00008116  2E        
00008117  2E00      12796          dc.b      46,0
                    12797   @m68kde~2_167:
0000811A  5275 6E6E 12798          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
0000811E  696E 672E 
00008122  2E2E 2E2E 
00008126  00        
                    12799   @m68kde~2_168:
00008128  4279 3A20 12800          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
0000812C  504A 2044 
00008130  6176 6965 
00008134  73        
00008135  00        12801          dc.b      0
                    12802   @m68kde~2_169:
00008136  0D0A 2573 12803          dc.b      13,10,37,115,0
0000813A  00        
                    12804   @m68kde~2_170:
0000813C  2E42 2000 12805          dc.b      46,66,32,0
                    12806   @m68kde~2_171:
00008140  2E57 2000 12807          dc.b      46,87,32,0
                    12808   @m68kde~2_172:
00008144  2E4C 2000 12809          dc.b      46,76,32,0
                    12810   @m68kde~2_173:
00008148  2324 2558 12811          dc.b      35,36,37,88,0
0000814C  00        
                    12812   @m68kde~2_174:
0000814E  2800      12813          dc.b      40,0
                    12814   @m68kde~2_175:
00008150  2900      12815          dc.b      41,0
                    12816   @m68kde~2_176:
00008152  292B 00   12817          dc.b      41,43,0
                    12818   @m68kde~2_177:
00008156  2D28 00   12819          dc.b      45,40,0
                    12820   @m68kde~2_178:
0000815A  2564 2841 12821          dc.b      37,100,40,65,37,100,41,0
0000815E  2564 2900 
                    12822   @m68kde~2_179:
00008162  2564 2841 12823          dc.b      37,100,40,65,37,100,44,0
00008166  2564 2C00 
                    12824   @m68kde~2_180:
0000816A  4400      12825          dc.b      68,0
                    12826   @m68kde~2_181:
0000816C  4100      12827          dc.b      65,0
                    12828   @m68kde~2_182:
0000816E  2564 00   12829          dc.b      37,100,0
                    12830   @m68kde~2_183:
00008172  2E57 2900 12831          dc.b      46,87,41,0
                    12832   @m68kde~2_184:
00008176  2E4C 2900 12833          dc.b      46,76,41,0
                    12834   @m68kde~2_185:
0000817A  2425 5800 12835          dc.b      36,37,88,0
                    12836   @m68kde~2_186:
0000817E  2564 2850 12837          dc.b      37,100,40,80,67,41,0
00008182  4329 00   
                    12838   @m68kde~2_187:
00008186  2564 2850 12839          dc.b      37,100,40,80,67,44,0
0000818A  432C 00   
                    12840   @m68kde~2_188:
0000818E  2C00      12841          dc.b      44,0
                    12842   @m68kde~2_189:
00008190  4343 00   12843          dc.b      67,67,0
                    12844   @m68kde~2_190:
00008194  4353 00   12845          dc.b      67,83,0
                    12846   @m68kde~2_191:
00008198  4551 00   12847          dc.b      69,81,0
                    12848   @m68kde~2_192:
0000819C  4745 00   12849          dc.b      71,69,0
                    12850   @m68kde~2_193:
000081A0  4754 00   12851          dc.b      71,84,0
                    12852   @m68kde~2_194:
000081A4  4849 00   12853          dc.b      72,73,0
                    12854   @m68kde~2_195:
000081A8  4C45 00   12855          dc.b      76,69,0
                    12856   @m68kde~2_196:
000081AC  4C53 00   12857          dc.b      76,83,0
                    12858   @m68kde~2_197:
000081B0  4C54 00   12859          dc.b      76,84,0
                    12860   @m68kde~2_198:
000081B4  4D49 00   12861          dc.b      77,73,0
                    12862   @m68kde~2_199:
000081B8  4E45 00   12863          dc.b      78,69,0
                    12864   @m68kde~2_200:
000081BC  504C 00   12865          dc.b      80,76,0
                    12866   @m68kde~2_201:
000081C0  5653 00   12867          dc.b      86,83,0
                    12868   @m68kde~2_202:
000081C4  5643 00   12869          dc.b      86,67,0
                    12870   @m68kde~2_203:
000081C8  5241 00   12871          dc.b      82,65,0
                    12872   @m68kde~2_204:
000081CC  5352 00   12873          dc.b      83,82,0
                    12874   @m68kde~2_205:
000081D0  556E 6B6E 12875          dc.b      85,110,107,110,111,119,110,0
000081D4  6F77 6E00 
                    12876   @m68kde~2_206:
000081D8  4142 4344 12877          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
000081DC  2044 2564 
000081E0  2C44 2564 
000081E4  00        
                    12878   @m68kde~2_207:
000081E6  4142 4344 12879          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
000081EA  202D 2841 
000081EE  2564 292C 
000081F2  2D28 41   
000081F5  2564 2900 12880          dc.b      37,100,41,0
                    12881   @m68kde~2_208:
000081FA  4144 4441 12882          dc.b      65,68,68,65,46,87,32,0
000081FE  2E57 2000 
                    12883   @m68kde~2_209:
00008202  4144 4441 12884          dc.b      65,68,68,65,46,76,32,0
00008206  2E4C 2000 
                    12885   @m68kde~2_210:
0000820A  2C41 2558 12886          dc.b      44,65,37,88,0
0000820E  00        
                    12887   @m68kde~2_211:
00008210  4144 4400 12888          dc.b      65,68,68,0
                    12889   @m68kde~2_212:
00008214  4144 4449 12890          dc.b      65,68,68,73,0
00008218  00        
                    12891   @m68kde~2_213:
0000821A  414E 4449 12892          dc.b      65,78,68,73,0
0000821E  00        
                    12893   @m68kde~2_214:
00008220  434D 5049 12894          dc.b      67,77,80,73,0
00008224  00        
                    12895   @m68kde~2_215:
00008226  454F 5249 12896          dc.b      69,79,82,73,0
0000822A  00        
                    12897   @m68kde~2_216:
0000822C  4F52 4900 12898          dc.b      79,82,73,0
                    12899   @m68kde~2_217:
00008230  5355 4249 12900          dc.b      83,85,66,73,0
00008234  00        
                    12901   @m68kde~2_218:
00008236  414E 4449 12902          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
0000823A  2023 2425 
0000823E  582C 5352 
00008242  00        
                    12903   @m68kde~2_219:
00008244  4144 4451 12904          dc.b      65,68,68,81,0
00008248  00        
                    12905   @m68kde~2_220:
0000824A  2325 3158 12906          dc.b      35,37,49,88,44,0
0000824E  2C00      
                    12907   @m68kde~2_221:
00008250  4144 4458 12908          dc.b      65,68,68,88,0
00008254  00        
                    12909   @m68kde~2_222:
00008256  4425 582C 12910          dc.b      68,37,88,44,68,37,88,0
0000825A  4425 5800 
                    12911   @m68kde~2_223:
0000825E  2D28 4125 12912          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
00008262  5829 2C2D 
00008266  2841 2558 
0000826A  2900      
                    12913   @m68kde~2_224:
0000826C  414E 4400 12914          dc.b      65,78,68,0
                    12915   @m68kde~2_225:
00008270  414E 4449 12916          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
00008274  2023 2425 
00008278  3258 2C43 
0000827C  4352 00   
                    12917   @m68kde~2_226:
00008280  4153 4C00 12918          dc.b      65,83,76,0
                    12919   @m68kde~2_227:
00008284  4153 5200 12920          dc.b      65,83,82,0
                    12921   @m68kde~2_228:
00008288  4C53 4C00 12922          dc.b      76,83,76,0
                    12923   @m68kde~2_229:
0000828C  4C53 5200 12924          dc.b      76,83,82,0
                    12925   @m68kde~2_230:
00008290  524F 4C00 12926          dc.b      82,79,76,0
                    12927   @m68kde~2_231:
00008294  524F 5200 12928          dc.b      82,79,82,0
                    12929   @m68kde~2_232:
00008298  524F 584C 12930          dc.b      82,79,88,76,0
0000829C  00        
                    12931   @m68kde~2_233:
0000829E  524F 5852 12932          dc.b      82,79,88,82,0
000082A2  00        
                    12933   @m68kde~2_234:
000082A4  2324 2558 12934          dc.b      35,36,37,88,44,68,37,88,0
000082A8  2C44 2558 
000082AC  00        
                    12935   @m68kde~2_235:
000082AE  4200      12936          dc.b      66,0
                    12937   @m68kde~2_236:
000082B0  4243 4847 12938          dc.b      66,67,72,71,32,0
000082B4  2000      
                    12939   @m68kde~2_237:
000082B6  4425 642C 12940          dc.b      68,37,100,44,0
000082BA  00        
                    12941   @m68kde~2_238:
000082BC  2324 2558 12942          dc.b      35,36,37,88,44,0
000082C0  2C00      
                    12943   @m68kde~2_239:
000082C2  4243 4C52 12944          dc.b      66,67,76,82,32,0
000082C6  2000      
                    12945   @m68kde~2_240:
000082C8  4253 4554 12946          dc.b      66,83,69,84,32,0
000082CC  2000      
                    12947   @m68kde~2_241:
000082CE  4254 5354 12948          dc.b      66,84,83,84,32,0
000082D2  2000      
                    12949   @m68kde~2_242:
000082D4  4348 4B20 12950          dc.b      67,72,75,32,0
000082D8  00        
                    12951   @m68kde~2_243:
000082DA  2C44 2564 12952          dc.b      44,68,37,100,0
000082DE  00        
                    12953   @m68kde~2_244:
000082E0  434C 5200 12954          dc.b      67,76,82,0
                    12955   @m68kde~2_245:
000082E4  434D 5041 12956          dc.b      67,77,80,65,46,87,32,0
000082E8  2E57 2000 
                    12957   @m68kde~2_246:
000082EC  434D 5041 12958          dc.b      67,77,80,65,46,76,32,0
000082F0  2E4C 2000 
                    12959   @m68kde~2_247:
000082F4  2C41 2564 12960          dc.b      44,65,37,100,0
000082F8  00        
                    12961   @m68kde~2_248:
000082FA  434D 5000 12962          dc.b      67,77,80,0
                    12963   @m68kde~2_249:
000082FE  434D 504D 12964          dc.b      67,77,80,77,0
00008302  00        
                    12965   @m68kde~2_250:
00008304  2841 2564 12966          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
00008308  292B 2C28 
0000830C  4125 6429 
00008310  2B00      
                    12967   @m68kde~2_251:
00008312  4442 00   12968          dc.b      68,66,0
                    12969   @m68kde~2_252:
00008316  4425 642C 12970          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
0000831A  252B 6428 
0000831E  5043 2920 
00008322  746F      
00008324  2041 6464 12971          dc.b      32,65,100,100,114,58,36,37,88,0
00008328  723A 2425 
0000832C  5800      
                    12972   @m68kde~2_253:
0000832E  4449 5653 12973          dc.b      68,73,86,83,32,0
00008332  2000      
                    12974   @m68kde~2_254:
00008334  4449 5655 12975          dc.b      68,73,86,85,32,0
00008338  2000      
                    12976   @m68kde~2_255:
0000833A  454F 5200 12977          dc.b      69,79,82,0
                    12978   @m68kde~2_256:
0000833E  454F 5249 12979          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
00008342  2023 2425 
00008346  3258 2C43 
0000834A  4352 00   
                    12980   @m68kde~2_257:
0000834E  454F 5249 12981          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
00008352  2023 2425 
00008356  582C 5352 
0000835A  00        
                    12982   @m68kde~2_258:
0000835C  4558 4720 12983          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
00008360  4425 642C 
00008364  4425 6400 
                    12984   @m68kde~2_259:
00008368  4558 4720 12985          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
0000836C  4125 642C 
00008370  4125 6400 
                    12986   @m68kde~2_260:
00008374  4558 4720 12987          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
00008378  4425 642C 
0000837C  4125 6400 
                    12988   @m68kde~2_261:
00008380  4558 5400 12989          dc.b      69,88,84,0
                    12990   @m68kde~2_262:
00008384  494C 4C45 12991          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
00008388  4741 4C20 
0000838C  2824 3441 
00008390  4643 29   
00008393  00        12992          dc.b      0
                    12993   @m68kde~2_263:
00008394  4A4D 5020 12994          dc.b      74,77,80,32,0
00008398  00        
                    12995   @m68kde~2_264:
0000839A  4A53 5220 12996          dc.b      74,83,82,32,0
0000839E  00        
                    12997   @m68kde~2_265:
000083A0  4C45 4120 12998          dc.b      76,69,65,32,0
000083A4  00        
                    12999   @m68kde~2_266:
000083A6  4C49 4E4B 13000          dc.b      76,73,78,75,32,0
000083AA  2000      
                    13001   @m68kde~2_267:
000083AC  4125 642C 13002          dc.b      65,37,100,44,35,37,100,0
000083B0  2325 6400 
                    13003   @m68kde~2_268:
000083B4  4D4F 5645 13004          dc.b      77,79,86,69,46,66,32,0
000083B8  2E42 2000 
                    13005   @m68kde~2_269:
000083BC  4D4F 5645 13006          dc.b      77,79,86,69,46,76,32,0
000083C0  2E4C 2000 
                    13007   @m68kde~2_270:
000083C4  4D4F 5645 13008          dc.b      77,79,86,69,46,87,32,0
000083C8  2E57 2000 
                    13009   @m68kde~2_271:
000083CC  4D4F 5645 13010          dc.b      77,79,86,69,32,0
000083D0  2000      
                    13011   @m68kde~2_272:
000083D2  2C43 4352 13012          dc.b      44,67,67,82,0
000083D6  00        
                    13013   @m68kde~2_273:
000083D8  4D4F 5645 13014          dc.b      77,79,86,69,32,83,82,44,0
000083DC  2053 522C 
000083E0  00        
                    13015   @m68kde~2_274:
000083E2  2C53 5200 13016          dc.b      44,83,82,0
                    13017   @m68kde~2_275:
000083E6  4D4F 5645 13018          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
000083EA  2055 5350 
000083EE  2C41 2564 
000083F2  00        
                    13019   @m68kde~2_276:
000083F4  4D4F 5645 13020          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
000083F8  2041 2564 
000083FC  2C55 5350 
00008400  00        
                    13021   @m68kde~2_277:
00008402  4D4F 5645 13022          dc.b      77,79,86,69,77,0
00008406  4D00      
                    13023   @m68kde~2_278:
00008408  4425 6400 13024          dc.b      68,37,100,0
                    13025   @m68kde~2_279:
0000840C  2F44 2564 13026          dc.b      47,68,37,100,0
00008410  00        
                    13027   @m68kde~2_280:
00008412  4125 6400 13028          dc.b      65,37,100,0
                    13029   @m68kde~2_281:
00008416  2F41 2564 13030          dc.b      47,65,37,100,0
0000841A  00        
                    13031   @m68kde~2_282:
0000841C  4D4F 5645 13032          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
00008420  502E 5720 
00008424  2425 5828 
00008428  4125 64   
0000842B  292C 4425 13033          dc.b      41,44,68,37,100,0
0000842F  6400      
                    13034   @m68kde~2_283:
00008432  4D4F 5645 13035          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
00008436  502E 4C20 
0000843A  2425 5828 
0000843E  4125 64   
00008441  292C 4425 13036          dc.b      41,44,68,37,100,0
00008445  6400      
                    13037   @m68kde~2_284:
00008448  4D4F 5645 13038          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
0000844C  502E 5720 
00008450  4425 642C 
00008454  2425 58   
00008457  2841 2564 13039          dc.b      40,65,37,100,41,0
0000845B  2900      
                    13040   @m68kde~2_285:
0000845E  4D4F 5645 13041          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
00008462  502E 4C20 
00008466  4425 642C 
0000846A  2425 58   
0000846D  2841 2564 13042          dc.b      40,65,37,100,41,0
00008471  2900      
                    13043   @m68kde~2_286:
00008474  4D4F 5645 13044          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
00008478  5120 2324 
0000847C  2558 2C44 
00008480  2564 00   
                    13045   @m68kde~2_287:
00008484  4D55 4C53 13046          dc.b      77,85,76,83,32,0
00008488  2000      
                    13047   @m68kde~2_288:
0000848A  4D55 4C55 13048          dc.b      77,85,76,85,32,0
0000848E  2000      
                    13049   @m68kde~2_289:
00008490  4E42 4344 13050          dc.b      78,66,67,68,32,0
00008494  2000      
                    13051   @m68kde~2_290:
00008496  4E45 4700 13052          dc.b      78,69,71,0
                    13053   @m68kde~2_291:
0000849A  4E45 4758 13054          dc.b      78,69,71,88,0
0000849E  00        
                    13055   @m68kde~2_292:
000084A0  4E4F 5000 13056          dc.b      78,79,80,0
                    13057   @m68kde~2_293:
000084A4  4E4F 5400 13058          dc.b      78,79,84,0
                    13059   @m68kde~2_294:
000084A8  4F52 00   13060          dc.b      79,82,0
                    13061   @m68kde~2_295:
000084AC  4F52 4920 13062          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
000084B0  2324 2532 
000084B4  582C 4343 
000084B8  5200      
                    13063   @m68kde~2_296:
000084BA  4F52 4920 13064          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
000084BE  2023 2425 
000084C2  582C 5352 
000084C6  00        
                    13065   @m68kde~2_297:
000084C8  5045 4120 13066          dc.b      80,69,65,32,0
000084CC  00        
                    13067   @m68kde~2_298:
000084CE  5245 5345 13068          dc.b      82,69,83,69,84,0
000084D2  5400      
                    13069   @m68kde~2_299:
000084D4  5254 4500 13070          dc.b      82,84,69,0
                    13071   @m68kde~2_300:
000084D8  5254 5200 13072          dc.b      82,84,82,0
                    13073   @m68kde~2_301:
000084DC  5254 5300 13074          dc.b      82,84,83,0
                    13075   @m68kde~2_302:
000084E0  5354 4F50 13076          dc.b      83,84,79,80,32,35,36,37,88,0
000084E4  2023 2425 
000084E8  5800      
                    13077   @m68kde~2_303:
000084EA  5342 4344 13078          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
000084EE  2044 2564 
000084F2  2C44 2564 
000084F6  00        
                    13079   @m68kde~2_304:
000084F8  5342 4344 13080          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
000084FC  202D 2841 
00008500  2564 292C 
00008504  2D28 41   
00008507  2564 2900 13081          dc.b      37,100,41,0
                    13082   @m68kde~2_305:
0000850C  5300      13083          dc.b      83,0
                    13084   @m68kde~2_306:
0000850E  5355 4241 13085          dc.b      83,85,66,65,46,87,32,0
00008512  2E57 2000 
                    13086   @m68kde~2_307:
00008516  5355 4241 13087          dc.b      83,85,66,65,46,76,32,0
0000851A  2E4C 2000 
                    13088   @m68kde~2_308:
0000851E  5355 4200 13089          dc.b      83,85,66,0
                    13090   @m68kde~2_309:
00008522  5355 4251 13091          dc.b      83,85,66,81,0
00008526  00        
                    13092   @m68kde~2_310:
00008528  5355 4258 13093          dc.b      83,85,66,88,0
0000852C  00        
                    13094   @m68kde~2_311:
0000852E  4425 3158 13095          dc.b      68,37,49,88,44,68,37,49,88,0
00008532  2C44 2531 
00008536  5800      
                    13096   @m68kde~2_312:
00008538  2D28 4125 13097          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
0000853C  3158 292C 
00008540  2D28 4125 
00008544  3158 29   
00008547  00        13098          dc.b      0
                    13099   @m68kde~2_313:
00008548  5357 4150 13100          dc.b      83,87,65,80,32,68,37,100,0
0000854C  2044 2564 
00008550  00        
                    13101   @m68kde~2_314:
00008552  5441 5320 13102          dc.b      84,65,83,32,0
00008556  00        
                    13103   @m68kde~2_315:
00008558  5452 4150 13104          dc.b      84,82,65,80,32,35,37,100,0
0000855C  2023 2564 
00008560  00        
                    13105   @m68kde~2_316:
00008562  5452 4150 13106          dc.b      84,82,65,80,86,0
00008566  5600      
                    13107   @m68kde~2_317:
00008568  5453 5400 13108          dc.b      84,83,84,0
                    13109   @m68kde~2_318:
0000856C  554E 4C4B 13110          dc.b      85,78,76,75,32,65,37,100,0
00008570  2041 2564 
00008574  00        
                    13111   @doscan_1:
00008576  0A00      13112          dc.b      10,0
                    13113   __ctype:
00008578  0040 4040 13114          dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
0000857C  4040 4040 
00008580  4040 5050 
00008584  5050 50   
00008587  4040 4040 13115          dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
0000858B  4040 4040 
0000858F  4040 4040 
00008593  4040 40   
00008596  4040 40D0 13116          dc.b      64,64,64,208,160,160,160,160,160,160,160,160
0000859A  A0A0 A0A0 
0000859E  A0A0 A0A0 
000085A2  A0A0 A0A0 13117          dc.b      160,160,160,160,160,160,160,140,140,140,140
000085A6  A0A0 A08C 
000085AA  8C8C 8C   
000085AD  8C8C 8C8C 13118          dc.b      140,140,140,140,140,140,160,160,160,160,160
000085B1  8C8C A0A0 
000085B5  A0A0 A0   
000085B8  A0A0 8A8A 13119          dc.b      160,160,138,138,138,138,138,138,130,130,130
000085BC  8A8A 8A8A 
000085C0  8282 82   
000085C3  8282 8282 13120          dc.b      130,130,130,130,130,130,130,130,130,130,130
000085C7  8282 8282 
000085CB  8282 82   
000085CE  8282 8282 13121          dc.b      130,130,130,130,130,130,160,160,160,160,160
000085D2  8282 A0A0 
000085D6  A0A0 A0   
000085D9  A089 8989 13122          dc.b      160,137,137,137,137,137,137,129,129,129,129
000085DD  8989 8981 
000085E1  8181 81   
000085E4  8181 8181 13123          dc.b      129,129,129,129,129,129,129,129,129,129,129
000085E8  8181 8181 
000085EC  8181 81   
000085EF  8181 8181 13124          dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
000085F3  81A0 A0A0 
000085F7  A040 0000 
000085FB  00        
000085FC  0000 0000 13125          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008600  0000 0000 
00008604  0000 0000 
00008608  0000 0000 
0000860C  0000 0000 
00008610  0000      
00008612  0000 0000 13126          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008616  0000 0000 
0000861A  0000 0000 
0000861E  0000 0000 
00008622  0000 0000 
00008626  0000      
00008628  0000 0000 13127          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000862C  0000 0000 
00008630  0000 0000 
00008634  0000 0000 
00008638  0000 0000 
0000863C  0000      
0000863E  0000 0000 13128          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008642  0000 0000 
00008646  0000 0000 
0000864A  0000 0000 
0000864E  0000 0000 
00008652  0000      
00008654  0000 0000 13129          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00008658  0000 0000 
0000865C  0000 0000 
00008660  0000 0000 
00008664  0000 0000 
00008668  0000      
0000866A  0000 0000 13130          dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000866E  0000 0000 
00008672  0000 0000 
00008676  0000 00   
                    13131   @itoa_1:
0000867A  2D32 3134 13132          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
0000867E  3734 3833 
00008682  3634 3800 
                    13133          section   data
00008686            13134                   align
          0000 8686 13135   DataStart       equ       *
                    13136   
                    13137   *********************************************************************************************************
                    13138   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    13139   * to ram as part of the CStart routine in this file
                    13140   *********************************************************************************************************
                    13141   
                    13142   @doscan_lpbuf:
00008686  0803 05AA 13143          dc.l      @doscan_buf
                    13144          section   bss
0000868A            13145                   align
          0000 868A 13146   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    13147   
                    13148   *********************************************************************************************************
                    13149   * Section for Uninitialised Data held in ROM as constants
                    13150   *********************************************************************************************************
                    13151   
08030000            13152                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0004 13153   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    13154   
                    13155   
08030000            13156   bss             org       bss
                    13157   
                    13158   *********************************************************************************************************
                    13159   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    13160   * install the exception handler using the C function InstallExceptionHandler()
                    13161   *********************************************************************************************************
                    13162   
                    13163   
                    13164   
08030000            13165   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
08030004            13166   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
08030008            13167   VBusError        ds.l    1      storage for address of Bus Error Handler
0803000C            13168   VAddressError    ds.l    1      storage for address of Address Error Handler
08030010            13169   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
08030014            13170   VDividebyZero    ds.l    1      storage for address of divide by zero handler
08030018            13171   VCheck           ds.l    1      ditto
0803001C            13172   VTrapV           ds.l    1      ditto
08030020            13173   VPrivilege       ds.l    1      ditto
08030024            13174   VTrace           ds.l    1
08030028            13175   VLine1010emul    ds.l    1
0803002C            13176   VLine1111emul    ds.l    1
08030030            13177   VUnassigned1     ds.l    1
08030034            13178   VUnassigned2     ds.l    1
08030038            13179   VUnassigned3     ds.l    1
0803003C            13180   VUninit_IRQ      ds.l    1
08030040            13181   VUnassigned4     ds.l    1
08030044            13182   VUnassigned5     ds.l    1
08030048            13183   VUnassigned6     ds.l    1
0803004C            13184   VUnassigned7     ds.l    1
08030050            13185   VUnassigned8     ds.l    1
08030054            13186   VUnassigned9     ds.l    1
08030058            13187   VUnassigned10    ds.l    1
0803005C            13188   VUnassigned11    ds.l    1
08030060            13189   VSpuriousIRQ     ds.l    1
                    13190   
                    13191   * Interrupt handlers Vector 25-31
08030064            13192   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030068            13193   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803006C            13194   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030070            13195   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030074            13196   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
08030078            13197   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0803007C            13198   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    13199   
                    13200   * Trap Handler vectors 32-47
08030080            13201   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030084            13202   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030088            13203   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803008C            13204   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030090            13205   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030094            13206   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
08030098            13207   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0803009C            13208   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A0            13209   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A4            13210   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300A8            13211   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300AC            13212   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B0            13213   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B4            13214   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300B8            13215   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
080300BC            13216   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    13217   
                    13218   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    13219   
                    13220   ***********************************************************************************************************
                    13221   * Other Variables
                    13222   ***********************************************************************************************************
                    13223   *__DebugA5       ds.l    1
                    13224   *__UserA5        ds.l    1
                    13225   
                    13226   ***********************************************************************************************************
080300C0            13227   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
080300C4            13228   __allocp:       ds.l    0       ; start of allocation units
080300C4            13229   __heap:         ds.l    0       ; pointers for malloc functions
                    13230   
                    13231   *__himem:       ds.l    himem            ; highest memory location + 1
                    13232   *__stklen:      ds.l    stklen           ; default stack size
                    13233   
                    13234   *********************************************************************************************************
                    13235   * Section for Heap
                    13236   *********************************************************************************************************
                    13237   
                    13238   _i:
080300C4            13239          ds.b      4
                    13240   _x:
080300C8            13241          ds.b      4
                    13242   _y:
080300CC            13243          ds.b      4
                    13244   _z:
080300D0            13245          ds.b      4
                    13246   _PortA_Count:
080300D4            13247          ds.b      4
                    13248   _Trace:
080300D8            13249          ds.b      4
                    13250   _GoFlag:
080300DC            13251          ds.b      4
                    13252   _Echo:
080300E0            13253          ds.b      4
                    13254   _d0:
080300E4            13255          ds.b      4
                    13256   _d1:
080300E8            13257          ds.b      4
                    13258   _d2:
080300EC            13259          ds.b      4
                    13260   _d3:
080300F0            13261          ds.b      4
                    13262   _d4:
080300F4            13263          ds.b      4
                    13264   _d5:
080300F8            13265          ds.b      4
                    13266   _d6:
080300FC            13267          ds.b      4
                    13268   _d7:
08030100            13269          ds.b      4
                    13270   _a0:
08030104            13271          ds.b      4
                    13272   _a1:
08030108            13273          ds.b      4
                    13274   _a2:
0803010C            13275          ds.b      4
                    13276   _a3:
08030110            13277          ds.b      4
                    13278   _a4:
08030114            13279          ds.b      4
                    13280   _a5:
08030118            13281          ds.b      4
                    13282   _a6:
0803011C            13283          ds.b      4
                    13284   _PC:
08030120            13285          ds.b      4
                    13286   _SSP:
08030124            13287          ds.b      4
                    13288   _USP:
08030128            13289          ds.b      4
                    13290   _SR:
0803012C            13291          ds.b      2
                    13292   _BreakPointAddress:
0803012E            13293          ds.b      32
                    13294   _BreakPointInstruction:
0803014E            13295          ds.b      16
                    13296   _BreakPointSetOrCleared:
0803015E            13297          ds.b      32
                    13298   _InstructionSize:
0803017E            13299          ds.b      4
                    13300   _WatchPointAddress:
08030182            13301          ds.b      32
                    13302   _WatchPointSetOrCleared:
080301A2            13303          ds.b      32
                    13304   _WatchPointString:
080301C2            13305          ds.b      800
                    13306   _Instruction:
080304E2            13307          ds.b      100
                    13308   _TempString:
08030546            13309          ds.b      100
                    13310   @doscan_buf:
080305AA            13311          ds.b      80
                    13312          section   heap
080305FA            13313                   align
          0803 05FA 13314   bssEnd          equ *                   end of storage space for unitialised variables
                    13315   *                                       we have to copy all initialised variable from rom to here at startup
          0803 05FA 13316   heap   equ       *
080305FA            13317                    align
          0000 0000

Assembly errors: 0
